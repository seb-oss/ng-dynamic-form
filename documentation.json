{
    "pipes": [
        {
            "name": "ObjectKeysPipe",
            "id": "pipe-ObjectKeysPipe-c05a48df03973bf6bfcf1cda64d6d1da",
            "file": "projects/dynamic-form/src/lib/object-keys.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "objectKeys",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'objectKeys',\n})\nexport class ObjectKeysPipe implements PipeTransform {\n  transform(param: { [key: string]: any }): string[] {\n    return Object.keys(param);\n  }\n}\n"
        },
        {
            "name": "SafePipe",
            "id": "pipe-SafePipe-7c7c92cd02de52299f1f40086b1a62d5",
            "file": "projects/dynamic-form/src/lib/safe.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safe",
            "sourceCode": "import { NgModule, Pipe, PipeTransform } from \"@angular/core\";\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from \"@angular/platform-browser\";\n\n@Pipe({\n    name: \"safe\",\n})\nexport class SafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case \"html\":\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n            case \"style\":\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            case \"script\":\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case \"url\":\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case \"resourceUrl\":\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@NgModule({\n    declarations: [SafePipe],\n    exports: [SafePipe],\n})\nexport class SafePipeModule {}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AttributeTypeMap",
            "id": "interface-AttributeTypeMap-a2afd4e1d18d6f2ebac62ed26c9c7ae1",
            "file": "projects/dynamic-form/src/lib/model/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export * from './dynamicFormItem';\nexport * from './dynamicFormOption';\nexport * from './dynamicFormResponseItem';\nexport * from './dynamicFormSection';\nexport * from './dynamicFormType';\nexport * from './custom-classes/extended-form-array';\nexport * from './custom-classes/extended-form-control';\nexport * from './custom-classes/extended-form-group';\nexport * from './custom-classes/extended-form-group-array';\n\nexport interface AttributeTypeMap {\n  name: string;\n  type: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ConfirmInformation",
            "id": "interface-ConfirmInformation-ed2bb052be528add736a185fc5d4bb18",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AttributeTypeMap } from './models';\nimport { DynamicFormItem, Media } from './dynamicFormItem';\nimport { DynamicFormSection } from './dynamicFormSection';\n\nexport interface ConfirmInformation {\n  title?: string;\n  message?: string;\n  accept?: string;\n  deny?: string;\n}\n\nexport interface FollowUpItem {\n  type: string;\n  title?: string;\n  subTitle?: string;\n  description?: string;\n  items: DynamicFormItem[] | DynamicFormSection[];\n  multi?: boolean;\n}\n\nexport interface DynamicFormOption<T = any> {\n  id?: string;\n  value?: T;\n  label?: string | null;\n  disabled?: boolean | null;\n  category?: string;\n  order?: number;\n  confirm?: ConfirmInformation;\n  media?: Media[];\n  followUpItems?: FollowUpItem;\n}\n\nexport const attributeTypeMapDynamicFormOption: AttributeTypeMap[] = [\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n];\n",
            "properties": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "deny",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "DynamicFormItem",
            "id": "interface-DynamicFormItem-41ef39e74feaf1ab456d0d702c9101b2",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from \"./dynamicFormType\";\nimport { DynamicFormOption } from \"./dynamicFormOption\";\nimport { AttributeTypeMap } from \"./models\";\n\nexport enum RuleType {\n    required,\n    min,\n    max,\n    minLength,\n    maxLength,\n    pattern,\n    minThanReference,\n    minThanEqualsReference,\n    maxThanReference,\n    maxThanEqualReference,\n    confirm,\n}\n\nexport enum MediaKind {\n    Image,\n    Video,\n}\n\nexport interface formItemValidation {\n    required?: boolean;\n    min?: number | string;\n    max?: number | string;\n    minLength?: number | string;\n    maxLength?: number | string;\n}\n\nexport interface Rule {\n    value?: any;\n    message?: string;\n    type: RuleType;\n}\n\nexport interface Media {\n    id: string;\n    url: string;\n    kind: MediaKind;\n    mimeType: string;\n    name: string;\n    description: string;\n}\n\nexport interface DynamicFormItem {\n    key: string | null;\n    category?: string | null; //subTitle\n    title?: string | null; //name\n    value?: any;\n    label?: string | null;\n    descriptionHeader?: string | null; //text\n    description?: string | null;\n    media?: Media[];\n    className?: string | null;\n    multi?: boolean;\n    order?: number;\n    placeholder?: string | null;\n    options?: Array<DynamicFormOption> | null;\n    rulerKey?: string | null;\n    condition?: any;\n    controlType: DynamicFormType;\n    rules?: Rule[];\n    controlMetaData?: {\n        label?: string;\n        description?: string;\n        inputGroupLabel?: string;\n        inputGroupPosition?: \"left\" | \"right\";\n    };\n}\n\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n];\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "controlMetaData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormType",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "descriptionHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "media",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Media[]",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "multi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<DynamicFormOption> | null",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "rulerKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Rule[]",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "DynamicFormOption",
            "id": "interface-DynamicFormOption-ed2bb052be528add736a185fc5d4bb18",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AttributeTypeMap } from './models';\nimport { DynamicFormItem, Media } from './dynamicFormItem';\nimport { DynamicFormSection } from './dynamicFormSection';\n\nexport interface ConfirmInformation {\n  title?: string;\n  message?: string;\n  accept?: string;\n  deny?: string;\n}\n\nexport interface FollowUpItem {\n  type: string;\n  title?: string;\n  subTitle?: string;\n  description?: string;\n  items: DynamicFormItem[] | DynamicFormSection[];\n  multi?: boolean;\n}\n\nexport interface DynamicFormOption<T = any> {\n  id?: string;\n  value?: T;\n  label?: string | null;\n  disabled?: boolean | null;\n  category?: string;\n  order?: number;\n  confirm?: ConfirmInformation;\n  media?: Media[];\n  followUpItems?: FollowUpItem;\n}\n\nexport const attributeTypeMapDynamicFormOption: AttributeTypeMap[] = [\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n];\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmInformation",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "followUpItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowUpItem",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "media",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Media[]",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "DynamicFormResponseItem",
            "id": "interface-DynamicFormResponseItem-b8bcfd6945bc1138c967c09552ff924e",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormItem } from \"./dynamicFormItem\";\nimport { AttributeTypeMap } from \"./models\";\n\nexport interface DynamicFormResponseItem {\n    key?: string | null;\n    value?: object | null;\n    sectionId?: string | null;\n    sectionIndex?: number;\n    formItem?: DynamicFormItem | null;\n}\n\nexport const attributeTypeMapDynamicFormResponseItem: AttributeTypeMap[] = [\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"sectionId\", type: \"string\" },\n    { name: \"sectionIndex\", type: \"number\" },\n    { name: \"formItem\", type: \"DynamicFormItem\" },\n];\n",
            "properties": [
                {
                    "name": "formItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormItem | null",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sectionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sectionIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object | null",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "DynamicFormSection",
            "id": "interface-DynamicFormSection-5ca46ff758948807744346b7dcccee12",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormItem } from './dynamicFormItem';\nimport { AttributeTypeMap } from './models';\n\nexport interface DynamicFormSection {\n  title?: string | null;\n  category?: string | null;\n  description?: string | null;\n  text?: string | null;\n  className?: string | null;\n  key?: string | null;\n  order?: number;\n  multi?: boolean;\n  sectionType?: any;\n  sections?: DynamicFormSection[];\n  items?: DynamicFormItem[] | null;\n}\n\nexport const attributeTypeMapDynamicFormSection: AttributeTypeMap[] = [\n  { name: 'title', type: 'string' },\n  { name: 'category', type: 'string' },\n  { name: 'description', type: 'string' },\n  { name: 'className', type: 'string' },\n  { name: 'key', type: 'string' },\n  { name: 'order', type: 'number' },\n  { name: 'multi', type: 'boolean' },\n  { name: 'sectionType', type: 'any' },\n  { name: 'items', type: 'Array<DynamicFormItem>' },\n];\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormItem[] | null",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "multi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "sections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormSection[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "sectionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ExtendedFormGroupControls",
            "id": "interface-ExtendedFormGroupControls-3101e61994da85e229f3d798f6b63ac1",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  FormGroup,\n  ValidatorFn,\n  AbstractControlOptions,\n  AsyncValidatorFn,\n} from '@angular/forms';\nimport { DynamicFormSection } from '../../model/dynamicFormSection';\nimport { ExtendedFormControl } from './extended-form-control';\nimport { ExtendedFormArray } from './extended-form-array';\nimport { ExtendedFormGroupArray } from './extended-form-group-array';\nexport interface ExtendedFormGroupControls {\n  [key: string]: ExtendedFormGroupControl | ExtendedFormGroup;\n}\n\nexport type ExtendedFormGroupControl =\n  | ExtendedFormControl\n  | ExtendedFormArray\n  | ExtendedFormGroup\n  | ExtendedFormGroupArray;\n\nexport class ExtendedFormGroup extends FormGroup {\n  sectionItem: DynamicFormSection;\n\n  constructor(\n    controls: ExtendedFormGroupControls,\n    item?: DynamicFormSection,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.sectionItem = item;\n  }\n\n  get(path: string | (string | number)[]): ExtendedFormGroupControl {\n    return super.get(path) as ExtendedFormGroupControl;\n  }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-3101e61994da85e229f3d798f6b63ac1",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ExtendedFormGroupControl | ExtendedFormGroup",
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "FollowUpItem",
            "id": "interface-FollowUpItem-ed2bb052be528add736a185fc5d4bb18",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AttributeTypeMap } from './models';\nimport { DynamicFormItem, Media } from './dynamicFormItem';\nimport { DynamicFormSection } from './dynamicFormSection';\n\nexport interface ConfirmInformation {\n  title?: string;\n  message?: string;\n  accept?: string;\n  deny?: string;\n}\n\nexport interface FollowUpItem {\n  type: string;\n  title?: string;\n  subTitle?: string;\n  description?: string;\n  items: DynamicFormItem[] | DynamicFormSection[];\n  multi?: boolean;\n}\n\nexport interface DynamicFormOption<T = any> {\n  id?: string;\n  value?: T;\n  label?: string | null;\n  disabled?: boolean | null;\n  category?: string;\n  order?: number;\n  confirm?: ConfirmInformation;\n  media?: Media[];\n  followUpItems?: FollowUpItem;\n}\n\nexport const attributeTypeMapDynamicFormOption: AttributeTypeMap[] = [\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n];\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormItem[] | DynamicFormSection[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "multi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "formItemValidation",
            "id": "interface-formItemValidation-41ef39e74feaf1ab456d0d702c9101b2",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from \"./dynamicFormType\";\nimport { DynamicFormOption } from \"./dynamicFormOption\";\nimport { AttributeTypeMap } from \"./models\";\n\nexport enum RuleType {\n    required,\n    min,\n    max,\n    minLength,\n    maxLength,\n    pattern,\n    minThanReference,\n    minThanEqualsReference,\n    maxThanReference,\n    maxThanEqualReference,\n    confirm,\n}\n\nexport enum MediaKind {\n    Image,\n    Video,\n}\n\nexport interface formItemValidation {\n    required?: boolean;\n    min?: number | string;\n    max?: number | string;\n    minLength?: number | string;\n    maxLength?: number | string;\n}\n\nexport interface Rule {\n    value?: any;\n    message?: string;\n    type: RuleType;\n}\n\nexport interface Media {\n    id: string;\n    url: string;\n    kind: MediaKind;\n    mimeType: string;\n    name: string;\n    description: string;\n}\n\nexport interface DynamicFormItem {\n    key: string | null;\n    category?: string | null; //subTitle\n    title?: string | null; //name\n    value?: any;\n    label?: string | null;\n    descriptionHeader?: string | null; //text\n    description?: string | null;\n    media?: Media[];\n    className?: string | null;\n    multi?: boolean;\n    order?: number;\n    placeholder?: string | null;\n    options?: Array<DynamicFormOption> | null;\n    rulerKey?: string | null;\n    condition?: any;\n    controlType: DynamicFormType;\n    rules?: Rule[];\n    controlMetaData?: {\n        label?: string;\n        description?: string;\n        inputGroupLabel?: string;\n        inputGroupPosition?: \"left\" | \"right\";\n    };\n}\n\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n];\n",
            "properties": [
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "minLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IDynamicFormValidationError",
            "id": "interface-IDynamicFormValidationError-58086a5ad773832aea81005eff6ae098",
            "file": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { KeyValue } from '@angular/common';\nimport {\n  DynamicFormItem,\n  DynamicFormOption,\n  ConfirmInformation,\n} from './model/models';\nimport {\n  ExtendedFormGroup,\n  ExtendedFormGroupControls,\n} from './model/custom-classes/extended-form-group';\nimport { ExtendedFormControl } from './model/custom-classes/extended-form-control';\nimport { ExtendedFormArray } from './model/custom-classes/extended-form-array';\nimport { ExtendedFormGroupArray } from './model/custom-classes/extended-form-group-array';\nimport { FormService } from './form.service';\n\ninterface IDynamicFormValidationError {\n  key: string;\n  errorMessage: string;\n  sectionId: string;\n  sectionIndex: number;\n  formItem: Partial<DynamicFormItem>;\n}\n\nexport interface IFormAction {\n  hasAction: boolean;\n  label?: string;\n  theme?: string;\n  icon?: string;\n}\n/** some comment */\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [FormService],\n  styles: [\n    `\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    `,\n  ],\n})\nexport class DynamicFormComponent {\n  @Input() extendedFormGroup: ExtendedFormGroup;\n  @Input() activeStep: number;\n  @Input() sectionTemplate: TemplateRef<any>;\n  @Input() itemTemplate: TemplateRef<any>;\n  @Input() actionsTemplate: TemplateRef<any>;\n  @Input() disclaimerTemplate: TemplateRef<any>;\n  @Input() inputMetadataTemplate: TemplateRef<any>;\n  @Input() textAreaTemplate: TemplateRef<any>;\n  @Input() numberTemplate: TemplateRef<any>;\n  @Input() checkboxTemplate: TemplateRef<any>;\n  @Input() dropdownTemplate: TemplateRef<any>;\n  @Input() datePickerTemplate: TemplateRef<any>;\n  @Input() radioTemplate: TemplateRef<any>;\n  @Input() radioTableTemplate: TemplateRef<any>;\n  @Input() toggleSelectorTemplate: TemplateRef<any>;\n  @Input() cardTemplate: TemplateRef<any>;\n  @Input() itemCustomClass: string;\n  @Input() hasFormActions: boolean = true;\n  // used to compare current rules with saved data\n  @Input() savedFormData: { key: string; value: string | number | boolean }[] = [];\n  @Input() nextAction: IFormAction = {\n    hasAction: true,\n    label: 'Next',\n  };\n  @Input() previousAction: IFormAction = {\n    hasAction: true,\n    label: 'Previous',\n  };\n  @Input() cancelAction: IFormAction = {\n    hasAction: true,\n    label: 'Cancel',\n  };\n\n  @Input() saveAction: IFormAction = {\n    hasAction: true,\n    label: 'Save',\n  };\n  @Input() deleteAction: IFormAction = {\n    hasAction: true,\n    label: 'Delete',\n  };\n  @Output() previousEvent: EventEmitter<any> = new EventEmitter();\n  @Output() nextEvent: EventEmitter<any> = new EventEmitter();\n  @Output() cancelEvent: EventEmitter<any> = new EventEmitter();\n\n  submitted: boolean = false;\n  confirmationToggle: boolean = false;\n  confirmationData: ConfirmInformation = null;\n\n  newFormGroup: {\n    form: ExtendedFormGroup;\n    index: number;\n    parentKey: string;\n  } = {\n    form: null,\n    index: null,\n    parentKey: null,\n  };\n\n  followUpModalToggle: boolean = false;\n\n  constructor(\n    private formService: FormService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  shouldRenderFollowUpControlsType(key: any): string {\n    if (key.value?.followUpItems) {\n      return key.value?.followUpItems.type;\n    }\n  }\n\n  dimissFollowUpModal(item: ExtendedFormControl): void {\n    this.followUpModalToggle = false;\n    !item.formGroup && item?.reset();\n  }\n\n  saveFollowUpModal(param: {\n    item: ExtendedFormGroup;\n    control: ExtendedFormControl;\n  }): void {\n    const { item, control } = param;\n    if (item.valid) {\n      if (this.newFormGroup.index !== null) {\n        (control.formGroup as ExtendedFormGroupArray).setControl(\n          this.newFormGroup.index,\n          item\n        );\n      } else {\n        if (!control.formGroup?.controls?.length) {\n          control.formGroup = new ExtendedFormGroupArray([item]);\n        } else {\n          (control.formGroup as ExtendedFormGroupArray).push(item);\n        }\n      }\n      this.followUpModalToggle = false;\n      this.cd.detectChanges();\n    }\n  }\n\n  createFormGroup(param: { items: any; key: string }) {\n    this.newFormGroup = {\n      form: this.formService.dynamicFormSectionsToFormGroup(param.items),\n      index: null,\n      parentKey: param.key,\n    };\n    this.followUpModalToggle = true;\n  }\n\n  modalShouldBeRendered(control): boolean {\n    if (\n      control.value?.followUpItems?.items?.length &&\n      control.formItem.key === this.newFormGroup.parentKey\n    ) {\n      return !!this.newFormGroup.form;\n    }\n  }\n\n  /**\n   * SHOULD RENDER CONTROL:\n   * Determines if the form control should be rendered or not.\n   * @param key section key\n   * @param formItem the target form item that should or should not be displayed\n   * @param index if the formgroup is an array this is the index of the formgroup item\n   */\n  shouldRenderControl(\n    key: string,\n    formItem: DynamicFormItem,\n    index?: number\n  ): boolean {\n    if (this.extendedFormGroup.controls)\n      if (formItem?.rulerKey) {\n        // It has a ruler key, trying to find the ruler and it's value\n        let ruler: ExtendedFormControl;\n        if (index > -1) {\n          // the form control where the ruler should be is an array\n          const target: ExtendedFormControl = (this.extendedFormGroup.get(\n            key\n          ) as ExtendedFormGroupArray)\n            .at(index)\n            .get(formItem.rulerKey) as ExtendedFormControl;\n          if (target) {\n            ruler = target;\n          }\n        } else {\n          // no array index: the form control where the ruler should be is a regular form\n          ruler = this.extendedFormGroup\n            ?.get(key)\n            ?.get(formItem.rulerKey) as ExtendedFormControl;\n        }\n        const rulerValue: any = ruler.value;\n        const { condition }: DynamicFormItem = formItem;\n        if (rulerValue === undefined || condition === undefined) {\n          console.warn(\n            'Something went wrong in shouldRenderControl: Ruler value or condition could not be found.'\n          );\n          return false;\n        }\n        if (\n          typeof rulerValue === 'string' &&\n          rulerValue === (condition as any)\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          condition &&\n          typeof condition === 'object' &&\n          Array.isArray(condition)\n        ) {\n          for (const conditionItem of condition as Array<any>) {\n            if (conditionItem) {\n              if (typeof rulerValue === 'object' && Array.isArray(rulerValue)) {\n                for (const rulerValueItem of rulerValue as Array<any>) {\n                  if (\n                    rulerValueItem &&\n                    rulerValueItem.value === conditionItem.value\n                  ) {\n                    return this.shouldRenderControl(key, ruler.formItem, index);\n                  }\n                }\n              } else if (\n                typeof rulerValue === 'object' &&\n                !Array.isArray(rulerValue)\n              ) {\n                if (rulerValue && rulerValue.value === conditionItem.value) {\n                  return this.shouldRenderControl(key, ruler.formItem, index);\n                }\n              }\n            }\n          }\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'object' &&\n          !Array.isArray(rulerValue) &&\n          rulerValue.value === (condition as DynamicFormOption).value\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'boolean' &&\n          rulerValue === condition\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        }\n        return false;\n      }\n    return true;\n  }\n\n  /**\n   * ADD NEW ITEM TO FORM ARRAY WITH ID:\n   * Duplicates the whole section or a form item within a section\n   * @param key section key\n   * @param id the id of the form item which should be duplicated\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  addNewItemToFormArrayWithId(\n    key: string,\n    id?: string,\n    sectionIndex?: number\n  ): void {\n    if (id) {\n      // There is an id which means we want to duplicate a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to duplicate should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(id) as ExtendedFormArray).push(new FormControl(''));\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup.get(key).get(id) as ExtendedFormArray).push(\n          new FormControl('')\n        );\n      }\n    } else {\n      // There is no id which means we want to duplicate the entire section\n      const target: ExtendedFormGroupArray = this.extendedFormGroup.get(\n        key\n      ) as ExtendedFormGroupArray;\n      const childControls: ExtendedFormGroupControls = this.formService.dynamicFormItemsToControls(\n        target.sectionItem.items\n      );\n      const formGroup: ExtendedFormGroup = new ExtendedFormGroup(\n        childControls,\n        target.sectionItem\n      );\n      target.push(formGroup);\n    }\n  }\n\n  /**\n   * REMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\n   * Removes the whole section or a form item within a section\n   * @param key section key\n   * @param info the id of the form item which should be removed and the index of where to remove it\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  removeItemAtIndexFromFormArrayWithId(\n    key: string,\n    info?: { id: string; index: number },\n    sectionIndex?: number\n  ): void {\n    if (info && info.id) {\n      // There is info which means we want to remove a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to remove should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(info.id) as ExtendedFormArray).removeAt(info.index);\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup\n          .get(key)\n          .get(info.id) as ExtendedFormArray).removeAt(info.index);\n      }\n    } else {\n      // there is no info indicating we should use the section index to remove the section itself\n      if (sectionIndex > -1) {\n        (this.extendedFormGroup.get(key) as ExtendedFormGroupArray).removeAt(\n          sectionIndex\n        );\n      } else {\n        console.warn(\n          'Error at removeItemAtIndexFromFormArrayWithId: Tried to remove section but no section index was provided'\n        );\n      }\n    }\n  }\n\n  removeItemFromParent(param: {\n    form: ExtendedFormControl;\n    index: number;\n  }): void {\n    const { form, index } = param;\n    (form.formGroup as ExtendedFormGroupArray).removeAt(index);\n    // reset parent control if the formGroup property doesn't have controls\n    if (!(form.formGroup as ExtendedFormGroupArray).controls?.length) {\n      form.reset();\n    }\n    this.followUpModalToggle = false;\n  }\n\n  editItemFromParent(param: {\n    formArray: ExtendedFormArray;\n    index: number;\n    parentKey: string;\n  }): void {\n    const { formArray, index, parentKey } = param;\n    \n    this.newFormGroup = {\n      form: new ExtendedFormGroup(\n        (formArray.at(index) as ExtendedFormGroup)\n          .controls as ExtendedFormGroupControls\n      ),\n      index,\n      parentKey,\n    };\n    \n    this.followUpModalToggle = true;\n  }\n\n  orderForm = (\n    a: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>,\n    b: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>\n  ): number => {\n    if (a.value['sectionItem'] && b.value['sectionItem']) {\n      return (\n        (a.value as ExtendedFormGroup).sectionItem.order -\n        (b.value as ExtendedFormGroup).sectionItem.order\n      );\n    } else if (a.value['formItem'] && b.value['formItem']) {\n      return (\n        (a.value as ExtendedFormControl).formItem.order -\n        (b.value as ExtendedFormControl).formItem.order\n      );\n    }\n    return 0;\n  };\n\n  getFormArrayControls(\n    control: ExtendedFormGroupArray\n  ): Array<ExtendedFormGroup> {\n    if (control instanceof ExtendedFormGroupArray) {\n      return control.controls as Array<ExtendedFormGroup>;\n    } else {\n      console.warn(\n        'Error in getFormArrayControls: control is not an instance of ExtendedFormGroupArray'\n      );\n      return [];\n    }\n  }\n\n  controlValueChanged(): void {\n    this.submitted &&= false;\n  }\n\n  get sectionList() {\n    console.log(this.extendedFormGroup)\n    if (this.activeStep !== null) {\n      return [\n        this.extendedFormGroup.controls[\n          Object.keys(this.extendedFormGroup.controls)[this.activeStep]\n        ],\n      ];\n    } else {\n      return this.extendedFormGroup.controls;\n    }\n  }\n\n  validate(): void {\n    console.log(this.extendedFormGroup);\n  }\n\n  cancel(): void {\n    this.cancelEvent.emit();\n  }\n\n  next(): void {\n    this.submitted = true;\n    if (this.formService.validateForm(this.sectionList[0])) {\n      this.confirmationData = this.hasConfirmation(this.sectionList[0].value);\n      if (this.confirmationData) {\n        this.confirmationToggle = true;\n      } else {\n        this.nextEvent?.emit();\n        this.submitted = false;\n      }\n    }\n  }\n\n  /**\n   * Find if the current selected values have a confirmation required\n   * @param value the property value of formGroup\n   */\n  hasConfirmation(value: any): ConfirmInformation {\n    let confirmation: ConfirmInformation = null;\n    if (typeof value === 'object') {\n      Object.keys(value).forEach((key: string) => {\n        if (value[key]?.confirm) {\n          confirmation = value[key].confirm;\n        }\n      });\n    }\n    return confirmation;\n  }\n\n  denyConfirmation(): void {\n    this.confirmationToggle = false;\n    this.confirmationData = null;\n  }\n\n  acceptConfirmation(): void {\n    this.denyConfirmation();\n    this.submitted = false;\n    this.nextEvent?.emit();\n  }\n\n  previous(): void {\n    this.previousEvent.emit();\n  }\n}\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "formItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<DynamicFormItem>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "sectionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "sectionIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "IFormAction",
            "id": "interface-IFormAction-58086a5ad773832aea81005eff6ae098",
            "file": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { KeyValue } from '@angular/common';\nimport {\n  DynamicFormItem,\n  DynamicFormOption,\n  ConfirmInformation,\n} from './model/models';\nimport {\n  ExtendedFormGroup,\n  ExtendedFormGroupControls,\n} from './model/custom-classes/extended-form-group';\nimport { ExtendedFormControl } from './model/custom-classes/extended-form-control';\nimport { ExtendedFormArray } from './model/custom-classes/extended-form-array';\nimport { ExtendedFormGroupArray } from './model/custom-classes/extended-form-group-array';\nimport { FormService } from './form.service';\n\ninterface IDynamicFormValidationError {\n  key: string;\n  errorMessage: string;\n  sectionId: string;\n  sectionIndex: number;\n  formItem: Partial<DynamicFormItem>;\n}\n\nexport interface IFormAction {\n  hasAction: boolean;\n  label?: string;\n  theme?: string;\n  icon?: string;\n}\n/** some comment */\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [FormService],\n  styles: [\n    `\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    `,\n  ],\n})\nexport class DynamicFormComponent {\n  @Input() extendedFormGroup: ExtendedFormGroup;\n  @Input() activeStep: number;\n  @Input() sectionTemplate: TemplateRef<any>;\n  @Input() itemTemplate: TemplateRef<any>;\n  @Input() actionsTemplate: TemplateRef<any>;\n  @Input() disclaimerTemplate: TemplateRef<any>;\n  @Input() inputMetadataTemplate: TemplateRef<any>;\n  @Input() textAreaTemplate: TemplateRef<any>;\n  @Input() numberTemplate: TemplateRef<any>;\n  @Input() checkboxTemplate: TemplateRef<any>;\n  @Input() dropdownTemplate: TemplateRef<any>;\n  @Input() datePickerTemplate: TemplateRef<any>;\n  @Input() radioTemplate: TemplateRef<any>;\n  @Input() radioTableTemplate: TemplateRef<any>;\n  @Input() toggleSelectorTemplate: TemplateRef<any>;\n  @Input() cardTemplate: TemplateRef<any>;\n  @Input() itemCustomClass: string;\n  @Input() hasFormActions: boolean = true;\n  // used to compare current rules with saved data\n  @Input() savedFormData: { key: string; value: string | number | boolean }[] = [];\n  @Input() nextAction: IFormAction = {\n    hasAction: true,\n    label: 'Next',\n  };\n  @Input() previousAction: IFormAction = {\n    hasAction: true,\n    label: 'Previous',\n  };\n  @Input() cancelAction: IFormAction = {\n    hasAction: true,\n    label: 'Cancel',\n  };\n\n  @Input() saveAction: IFormAction = {\n    hasAction: true,\n    label: 'Save',\n  };\n  @Input() deleteAction: IFormAction = {\n    hasAction: true,\n    label: 'Delete',\n  };\n  @Output() previousEvent: EventEmitter<any> = new EventEmitter();\n  @Output() nextEvent: EventEmitter<any> = new EventEmitter();\n  @Output() cancelEvent: EventEmitter<any> = new EventEmitter();\n\n  submitted: boolean = false;\n  confirmationToggle: boolean = false;\n  confirmationData: ConfirmInformation = null;\n\n  newFormGroup: {\n    form: ExtendedFormGroup;\n    index: number;\n    parentKey: string;\n  } = {\n    form: null,\n    index: null,\n    parentKey: null,\n  };\n\n  followUpModalToggle: boolean = false;\n\n  constructor(\n    private formService: FormService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  shouldRenderFollowUpControlsType(key: any): string {\n    if (key.value?.followUpItems) {\n      return key.value?.followUpItems.type;\n    }\n  }\n\n  dimissFollowUpModal(item: ExtendedFormControl): void {\n    this.followUpModalToggle = false;\n    !item.formGroup && item?.reset();\n  }\n\n  saveFollowUpModal(param: {\n    item: ExtendedFormGroup;\n    control: ExtendedFormControl;\n  }): void {\n    const { item, control } = param;\n    if (item.valid) {\n      if (this.newFormGroup.index !== null) {\n        (control.formGroup as ExtendedFormGroupArray).setControl(\n          this.newFormGroup.index,\n          item\n        );\n      } else {\n        if (!control.formGroup?.controls?.length) {\n          control.formGroup = new ExtendedFormGroupArray([item]);\n        } else {\n          (control.formGroup as ExtendedFormGroupArray).push(item);\n        }\n      }\n      this.followUpModalToggle = false;\n      this.cd.detectChanges();\n    }\n  }\n\n  createFormGroup(param: { items: any; key: string }) {\n    this.newFormGroup = {\n      form: this.formService.dynamicFormSectionsToFormGroup(param.items),\n      index: null,\n      parentKey: param.key,\n    };\n    this.followUpModalToggle = true;\n  }\n\n  modalShouldBeRendered(control): boolean {\n    if (\n      control.value?.followUpItems?.items?.length &&\n      control.formItem.key === this.newFormGroup.parentKey\n    ) {\n      return !!this.newFormGroup.form;\n    }\n  }\n\n  /**\n   * SHOULD RENDER CONTROL:\n   * Determines if the form control should be rendered or not.\n   * @param key section key\n   * @param formItem the target form item that should or should not be displayed\n   * @param index if the formgroup is an array this is the index of the formgroup item\n   */\n  shouldRenderControl(\n    key: string,\n    formItem: DynamicFormItem,\n    index?: number\n  ): boolean {\n    if (this.extendedFormGroup.controls)\n      if (formItem?.rulerKey) {\n        // It has a ruler key, trying to find the ruler and it's value\n        let ruler: ExtendedFormControl;\n        if (index > -1) {\n          // the form control where the ruler should be is an array\n          const target: ExtendedFormControl = (this.extendedFormGroup.get(\n            key\n          ) as ExtendedFormGroupArray)\n            .at(index)\n            .get(formItem.rulerKey) as ExtendedFormControl;\n          if (target) {\n            ruler = target;\n          }\n        } else {\n          // no array index: the form control where the ruler should be is a regular form\n          ruler = this.extendedFormGroup\n            ?.get(key)\n            ?.get(formItem.rulerKey) as ExtendedFormControl;\n        }\n        const rulerValue: any = ruler.value;\n        const { condition }: DynamicFormItem = formItem;\n        if (rulerValue === undefined || condition === undefined) {\n          console.warn(\n            'Something went wrong in shouldRenderControl: Ruler value or condition could not be found.'\n          );\n          return false;\n        }\n        if (\n          typeof rulerValue === 'string' &&\n          rulerValue === (condition as any)\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          condition &&\n          typeof condition === 'object' &&\n          Array.isArray(condition)\n        ) {\n          for (const conditionItem of condition as Array<any>) {\n            if (conditionItem) {\n              if (typeof rulerValue === 'object' && Array.isArray(rulerValue)) {\n                for (const rulerValueItem of rulerValue as Array<any>) {\n                  if (\n                    rulerValueItem &&\n                    rulerValueItem.value === conditionItem.value\n                  ) {\n                    return this.shouldRenderControl(key, ruler.formItem, index);\n                  }\n                }\n              } else if (\n                typeof rulerValue === 'object' &&\n                !Array.isArray(rulerValue)\n              ) {\n                if (rulerValue && rulerValue.value === conditionItem.value) {\n                  return this.shouldRenderControl(key, ruler.formItem, index);\n                }\n              }\n            }\n          }\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'object' &&\n          !Array.isArray(rulerValue) &&\n          rulerValue.value === (condition as DynamicFormOption).value\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'boolean' &&\n          rulerValue === condition\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        }\n        return false;\n      }\n    return true;\n  }\n\n  /**\n   * ADD NEW ITEM TO FORM ARRAY WITH ID:\n   * Duplicates the whole section or a form item within a section\n   * @param key section key\n   * @param id the id of the form item which should be duplicated\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  addNewItemToFormArrayWithId(\n    key: string,\n    id?: string,\n    sectionIndex?: number\n  ): void {\n    if (id) {\n      // There is an id which means we want to duplicate a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to duplicate should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(id) as ExtendedFormArray).push(new FormControl(''));\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup.get(key).get(id) as ExtendedFormArray).push(\n          new FormControl('')\n        );\n      }\n    } else {\n      // There is no id which means we want to duplicate the entire section\n      const target: ExtendedFormGroupArray = this.extendedFormGroup.get(\n        key\n      ) as ExtendedFormGroupArray;\n      const childControls: ExtendedFormGroupControls = this.formService.dynamicFormItemsToControls(\n        target.sectionItem.items\n      );\n      const formGroup: ExtendedFormGroup = new ExtendedFormGroup(\n        childControls,\n        target.sectionItem\n      );\n      target.push(formGroup);\n    }\n  }\n\n  /**\n   * REMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\n   * Removes the whole section or a form item within a section\n   * @param key section key\n   * @param info the id of the form item which should be removed and the index of where to remove it\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  removeItemAtIndexFromFormArrayWithId(\n    key: string,\n    info?: { id: string; index: number },\n    sectionIndex?: number\n  ): void {\n    if (info && info.id) {\n      // There is info which means we want to remove a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to remove should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(info.id) as ExtendedFormArray).removeAt(info.index);\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup\n          .get(key)\n          .get(info.id) as ExtendedFormArray).removeAt(info.index);\n      }\n    } else {\n      // there is no info indicating we should use the section index to remove the section itself\n      if (sectionIndex > -1) {\n        (this.extendedFormGroup.get(key) as ExtendedFormGroupArray).removeAt(\n          sectionIndex\n        );\n      } else {\n        console.warn(\n          'Error at removeItemAtIndexFromFormArrayWithId: Tried to remove section but no section index was provided'\n        );\n      }\n    }\n  }\n\n  removeItemFromParent(param: {\n    form: ExtendedFormControl;\n    index: number;\n  }): void {\n    const { form, index } = param;\n    (form.formGroup as ExtendedFormGroupArray).removeAt(index);\n    // reset parent control if the formGroup property doesn't have controls\n    if (!(form.formGroup as ExtendedFormGroupArray).controls?.length) {\n      form.reset();\n    }\n    this.followUpModalToggle = false;\n  }\n\n  editItemFromParent(param: {\n    formArray: ExtendedFormArray;\n    index: number;\n    parentKey: string;\n  }): void {\n    const { formArray, index, parentKey } = param;\n    \n    this.newFormGroup = {\n      form: new ExtendedFormGroup(\n        (formArray.at(index) as ExtendedFormGroup)\n          .controls as ExtendedFormGroupControls\n      ),\n      index,\n      parentKey,\n    };\n    \n    this.followUpModalToggle = true;\n  }\n\n  orderForm = (\n    a: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>,\n    b: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>\n  ): number => {\n    if (a.value['sectionItem'] && b.value['sectionItem']) {\n      return (\n        (a.value as ExtendedFormGroup).sectionItem.order -\n        (b.value as ExtendedFormGroup).sectionItem.order\n      );\n    } else if (a.value['formItem'] && b.value['formItem']) {\n      return (\n        (a.value as ExtendedFormControl).formItem.order -\n        (b.value as ExtendedFormControl).formItem.order\n      );\n    }\n    return 0;\n  };\n\n  getFormArrayControls(\n    control: ExtendedFormGroupArray\n  ): Array<ExtendedFormGroup> {\n    if (control instanceof ExtendedFormGroupArray) {\n      return control.controls as Array<ExtendedFormGroup>;\n    } else {\n      console.warn(\n        'Error in getFormArrayControls: control is not an instance of ExtendedFormGroupArray'\n      );\n      return [];\n    }\n  }\n\n  controlValueChanged(): void {\n    this.submitted &&= false;\n  }\n\n  get sectionList() {\n    console.log(this.extendedFormGroup)\n    if (this.activeStep !== null) {\n      return [\n        this.extendedFormGroup.controls[\n          Object.keys(this.extendedFormGroup.controls)[this.activeStep]\n        ],\n      ];\n    } else {\n      return this.extendedFormGroup.controls;\n    }\n  }\n\n  validate(): void {\n    console.log(this.extendedFormGroup);\n  }\n\n  cancel(): void {\n    this.cancelEvent.emit();\n  }\n\n  next(): void {\n    this.submitted = true;\n    if (this.formService.validateForm(this.sectionList[0])) {\n      this.confirmationData = this.hasConfirmation(this.sectionList[0].value);\n      if (this.confirmationData) {\n        this.confirmationToggle = true;\n      } else {\n        this.nextEvent?.emit();\n        this.submitted = false;\n      }\n    }\n  }\n\n  /**\n   * Find if the current selected values have a confirmation required\n   * @param value the property value of formGroup\n   */\n  hasConfirmation(value: any): ConfirmInformation {\n    let confirmation: ConfirmInformation = null;\n    if (typeof value === 'object') {\n      Object.keys(value).forEach((key: string) => {\n        if (value[key]?.confirm) {\n          confirmation = value[key].confirm;\n        }\n      });\n    }\n    return confirmation;\n  }\n\n  denyConfirmation(): void {\n    this.confirmationToggle = false;\n    this.confirmationData = null;\n  }\n\n  acceptConfirmation(): void {\n    this.denyConfirmation();\n    this.submitted = false;\n    this.nextEvent?.emit();\n  }\n\n  previous(): void {\n    this.previousEvent.emit();\n  }\n}\n",
            "properties": [
                {
                    "name": "hasAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Media",
            "id": "interface-Media-41ef39e74feaf1ab456d0d702c9101b2",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from \"./dynamicFormType\";\nimport { DynamicFormOption } from \"./dynamicFormOption\";\nimport { AttributeTypeMap } from \"./models\";\n\nexport enum RuleType {\n    required,\n    min,\n    max,\n    minLength,\n    maxLength,\n    pattern,\n    minThanReference,\n    minThanEqualsReference,\n    maxThanReference,\n    maxThanEqualReference,\n    confirm,\n}\n\nexport enum MediaKind {\n    Image,\n    Video,\n}\n\nexport interface formItemValidation {\n    required?: boolean;\n    min?: number | string;\n    max?: number | string;\n    minLength?: number | string;\n    maxLength?: number | string;\n}\n\nexport interface Rule {\n    value?: any;\n    message?: string;\n    type: RuleType;\n}\n\nexport interface Media {\n    id: string;\n    url: string;\n    kind: MediaKind;\n    mimeType: string;\n    name: string;\n    description: string;\n}\n\nexport interface DynamicFormItem {\n    key: string | null;\n    category?: string | null; //subTitle\n    title?: string | null; //name\n    value?: any;\n    label?: string | null;\n    descriptionHeader?: string | null; //text\n    description?: string | null;\n    media?: Media[];\n    className?: string | null;\n    multi?: boolean;\n    order?: number;\n    placeholder?: string | null;\n    options?: Array<DynamicFormOption> | null;\n    rulerKey?: string | null;\n    condition?: any;\n    controlType: DynamicFormType;\n    rules?: Rule[];\n    controlMetaData?: {\n        label?: string;\n        description?: string;\n        inputGroupLabel?: string;\n        inputGroupPosition?: \"left\" | \"right\";\n    };\n}\n\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n];\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "kind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaKind",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "mimeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Rule",
            "id": "interface-Rule-41ef39e74feaf1ab456d0d702c9101b2",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from \"./dynamicFormType\";\nimport { DynamicFormOption } from \"./dynamicFormOption\";\nimport { AttributeTypeMap } from \"./models\";\n\nexport enum RuleType {\n    required,\n    min,\n    max,\n    minLength,\n    maxLength,\n    pattern,\n    minThanReference,\n    minThanEqualsReference,\n    maxThanReference,\n    maxThanEqualReference,\n    confirm,\n}\n\nexport enum MediaKind {\n    Image,\n    Video,\n}\n\nexport interface formItemValidation {\n    required?: boolean;\n    min?: number | string;\n    max?: number | string;\n    minLength?: number | string;\n    maxLength?: number | string;\n}\n\nexport interface Rule {\n    value?: any;\n    message?: string;\n    type: RuleType;\n}\n\nexport interface Media {\n    id: string;\n    url: string;\n    kind: MediaKind;\n    mimeType: string;\n    name: string;\n    description: string;\n}\n\nexport interface DynamicFormItem {\n    key: string | null;\n    category?: string | null; //subTitle\n    title?: string | null; //name\n    value?: any;\n    label?: string | null;\n    descriptionHeader?: string | null; //text\n    description?: string | null;\n    media?: Media[];\n    className?: string | null;\n    multi?: boolean;\n    order?: number;\n    placeholder?: string | null;\n    options?: Array<DynamicFormOption> | null;\n    rulerKey?: string | null;\n    condition?: any;\n    controlType: DynamicFormType;\n    rules?: Rule[];\n    controlMetaData?: {\n        label?: string;\n        description?: string;\n        inputGroupLabel?: string;\n        inputGroupPosition?: \"left\" | \"right\";\n    };\n}\n\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n];\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "FormService",
            "id": "injectable-FormService-8a2c79c873e0e643220c03109b8197d1",
            "file": "projects/dynamic-form/src/lib/form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "appendValidations",
                    "args": [
                        {
                            "name": "rule",
                            "type": "Rule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "referenceControl",
                            "type": "ExtendedFormGroupControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "referenceValue",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rule",
                            "type": "Rule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "referenceControl",
                            "type": "ExtendedFormGroupControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "referenceValue",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormItemsToArrayFormGroup",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupArray",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormItemsToControls",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupControls",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormItemsToFormGroup",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroup",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormSectionsToFormGroup",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormSection>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "original",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ keepForwardHistory: true }"
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroup",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormSection>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "original",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ keepForwardHistory: true }",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findNestedControl",
                    "args": [
                        {
                            "name": "forms",
                            "type": "ExtendedFormGroup | ExtendedFormGroup[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controlKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupControl",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "forms",
                            "type": "ExtendedFormGroup | ExtendedFormGroup[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controlKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formToDynamicFormResponseItems",
                    "args": [
                        {
                            "name": "data",
                            "type": "KeyValue<string | any> | Array<KeyValue<string, any>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formGroup",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<DynamicFormResponseItem>",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "KeyValue<string | any> | Array<KeyValue<string, any>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formGroup",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateControlValidator",
                    "args": [
                        {
                            "name": "validators",
                            "type": "formItemValidation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "validators",
                            "type": "formItemValidation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateValidations",
                    "args": [
                        {
                            "name": "rules",
                            "type": "Rule[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rules",
                            "type": "Rule[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNestedFormInvalid",
                    "args": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { FormControl, ValidatorFn, Validators } from '@angular/forms';\nimport {\n  DynamicFormItem,\n  DynamicFormSection,\n  DynamicFormResponseItem,\n  DynamicFormType,\n  formItemValidation,\n  Rule,\n  RuleType,\n} from './model/models';\nimport {\n  ExtendedFormGroup,\n  ExtendedFormGroupControls,\n  ExtendedFormGroupControl,\n} from './model/custom-classes/extended-form-group';\nimport { ExtendedFormControl } from './model/custom-classes/extended-form-control';\nimport { ExtendedFormArray } from './model/custom-classes/extended-form-array';\nimport { ExtendedFormGroupArray } from './model/custom-classes/extended-form-group-array';\nimport { KeyValue } from '@angular/common';\n\n@Injectable()\nexport class FormService {\n  constructor() {}\n\n  dynamicFormSectionsToFormGroup(\n    items: Array<DynamicFormSection>,\n    original?: ExtendedFormGroup,\n    config: { keepForwardHistory: boolean } = { keepForwardHistory: true }\n  ): ExtendedFormGroup {\n    const controls: ExtendedFormGroupControls = {};\n    const orderedItems = items.sort((a: DynamicFormSection, b: DynamicFormSection) => a.order - b.order);\n    const existingKeys: boolean =\n      config.keepForwardHistory &&\n      original &&\n      orderedItems.every((item) => {\n        return original.get(item.key);\n      });\n    if (existingKeys) {\n      return original;\n    }\n    orderedItems.forEach((item: DynamicFormSection) => {\n      if (!!item.multi) {\n        const childControls: ExtendedFormGroupControls = this.dynamicFormItemsToControls(item.items);\n        const formGroup: ExtendedFormGroup = new ExtendedFormGroup(childControls, item);\n        const controlsArray: ExtendedFormGroup[] = [formGroup];\n        controls[item.key] = new ExtendedFormGroupArray(controlsArray, item);\n      } else {\n        // if section has an inner section call dynamicFormSectionsToFormGroup recursively\n        if(item.sections) {\n          controls[item.key] = this.dynamicFormSectionsToFormGroup(item.sections);\n        } else {\n          const childControls: ExtendedFormGroupControls = this.dynamicFormItemsToControls(item.items);\n          controls[item.key] = new ExtendedFormGroup(childControls, item);\n          if (original) {\n            original.controls[item.key] = new ExtendedFormGroup(childControls, item);\n          }\n        }\n       \n      }\n    });\n    if (original) {\n      return original;\n    }\n    return new ExtendedFormGroup(controls);\n  }\n\n  dynamicFormItemsToControls(items: Array<DynamicFormItem>): ExtendedFormGroupControls {\n    const controls: ExtendedFormGroupControls = {};\n    const orderedItems: Array<DynamicFormItem> = items?.sort(\n      (a: DynamicFormItem, b: DynamicFormItem) => a.order - b.order\n    );\n\n    orderedItems?.forEach((item: DynamicFormItem) => {\n      if (item.controlType === DynamicFormType.Text && item.multi) {\n        const controlsArray: FormControl[] = item.value\n          ? (item.value as Array<string>).map((val: string) => new FormControl(val))\n          : [new FormControl('')];\n        controls[item.key] = new ExtendedFormArray(item, controlsArray);\n      } else {\n        controls[item.key] = new ExtendedFormControl(\n          item,\n          item.value,\n          this.generateControlValidator(this.generateValidations(item.rules))\n        );\n      }\n    });\n    return controls;\n  }\n\n  dynamicFormItemsToFormGroup(items: Array<DynamicFormItem>): ExtendedFormGroup {\n    const controls: ExtendedFormGroupControls = this.dynamicFormItemsToControls(items);\n    const formGroup: ExtendedFormGroup = new ExtendedFormGroup(controls);\n    return formGroup;\n  }\n\n  dynamicFormItemsToArrayFormGroup(items: Array<DynamicFormItem>): ExtendedFormGroupArray {\n    const formGroup: ExtendedFormGroup = this.dynamicFormItemsToFormGroup(items);\n    return new ExtendedFormGroupArray([formGroup]);\n  }\n\n  formToDynamicFormResponseItems(\n    data: KeyValue<string, any> | Array<KeyValue<string, any>>,\n    formGroup: ExtendedFormGroup\n  ): Array<DynamicFormResponseItem> {\n    const dynamicFormSubmitValues: Array<DynamicFormResponseItem> = [];\n\n    for (const section of Object.keys(data)) {\n      const targetSection: ExtendedFormGroupControl = formGroup.get(section);\n      if (targetSection) {\n        if (targetSection instanceof ExtendedFormGroupArray) {\n          (targetSection as ExtendedFormGroupArray).controls.map((item: ExtendedFormGroup, sectionIndex: number) => {\n            for (const key of Object.keys(data[section][sectionIndex])) {\n              const target: ExtendedFormControl | ExtendedFormArray =\n                (item.get(key) as ExtendedFormControl | ExtendedFormArray) || null;\n              if (target) {\n                const { value, formItem }: ExtendedFormControl | ExtendedFormArray = target;\n                dynamicFormSubmitValues.push({\n                  key,\n                  formItem,\n                  value,\n                  sectionId: section,\n                  sectionIndex,\n                });\n              }\n            }\n          });\n        } else {\n          for (const key of Object.keys(data[section])) {\n            const target: ExtendedFormControl | ExtendedFormArray =\n              (targetSection.get(key) as ExtendedFormControl | ExtendedFormArray) || null;\n            if (target) {\n              const { value, formItem }: ExtendedFormControl | ExtendedFormArray = target;\n              dynamicFormSubmitValues.push({\n                key,\n                formItem,\n                value,\n                sectionId: section,\n                sectionIndex: 0,\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return dynamicFormSubmitValues;\n  }\n\n  generateValidations(rules: Rule[]): { [key: string]: any } {\n    let validations: { [key: string]: any } = {};\n    rules\n      ?.sort((a: Rule, b: Rule) => a.type - b.type)\n      .forEach((rule: Rule) => {\n        switch (rule.type) {\n          case RuleType.required:\n            validations = { ...validations, ...{ required: true } };\n            break;\n          case RuleType.min:\n            validations = { ...validations, ...{ min: rule.value } };\n            break;\n          case RuleType.max:\n            validations = { ...validations, ...{ max: rule.value } };\n            break;\n          case RuleType.maxLength:\n            validations = { ...validations, ...{ maxLength: rule.value } };\n            break;\n          case RuleType.minLength:\n            validations = { ...validations, ...{ minLength: rule.value } };\n            break;\n          case RuleType.pattern:\n            validations = { ...validations, ...{ pattern: rule.value } };\n            break;\n          case RuleType.minThanEqualsReference:\n            validations = { ...validations, ...{ min: rule.value } };\n            break;\n          case RuleType.minThanReference:\n            validations = { ...validations, ...{ min: rule.value } };\n            break;\n          case RuleType.maxThanReference:\n            validations = { ...validations, ...{ max: rule.value } };\n            break;\n          case RuleType.maxThanEqualReference:\n            validations = { ...validations, ...{ max: rule.value } };\n            break;\n          default:\n            break;\n        }\n      });\n    return validations;\n  }\n\n  appendValidations(\n    rule: Rule,\n    referenceControl?: ExtendedFormGroupControl,\n    referenceValue?: { key: string; value: string | number | boolean }\n  ): { validator: ValidatorFn[], customRule: Rule} {\n    let customRule: Rule;\n    switch (rule.type) {\n      case RuleType.maxThanReference:\n        customRule = {\n          ...rule,\n          ...{ value: referenceControl ? Number(referenceControl.value) - 1 : Number(referenceValue.value) - 1 },\n        };\n        break;\n      case RuleType.maxThanEqualReference:\n        customRule = {\n          ...rule,\n          ...{ value: referenceControl ? referenceControl.value : referenceValue.value },\n        };\n        break;\n      case RuleType.minThanReference:\n        customRule = {\n          ...rule,\n          ...{ value: referenceControl ? Number(referenceControl.value) + 1 : Number(referenceValue.value) + 1 },\n        };\n        break;\n      case RuleType.minThanEqualsReference:\n        customRule = {\n          ...rule,\n          ...{ value: referenceControl ? referenceControl.value : referenceValue.value },\n        };\n        break;\n      default:\n        break;\n    }\n    return {\n      validator: this.generateControlValidator(this.generateValidations([customRule])),\n      customRule\n    };\n  }\n\n  generateControlValidator(validators: formItemValidation): ValidatorFn[] {\n    const validations: ValidatorFn[] = [];\n    Object.keys(validators).forEach((validator: string) => {\n      switch (validator) {\n        case 'min':\n          validations.push(Validators.min(Number(validators[validator])));\n          break;\n        case 'max':\n          validations.push(Validators.max(Number(validators[validator])));\n          break;\n        case 'minLength':\n          validations.push(Validators.minLength(Number(validators[validator])));\n          break;\n        case 'maxLength':\n          validations.push(Validators.maxLength(Number(validators[validator])));\n          break;\n        case 'required':\n          validators.required && validations.push(Validators.required);\n          break;\n        case 'pattern':\n          validations.push(Validators.pattern(validators[validator]));\n          break;\n        default:\n          break;\n      }\n    });\n    return validations;\n  }\n\n  isNestedFormInvalid(form: ExtendedFormGroup): boolean {\n    return Object.keys(form.controls).some((key: string) => {\n      if (form.controls[key]?.valid) {\n        const formGroup: ExtendedFormGroup = (form.controls[key] as ExtendedFormControl)\n          ?.formGroup as ExtendedFormGroup;\n        if (formGroup && !formGroup.valid) {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    });\n  }\n\n  findNestedControl(forms: ExtendedFormGroup | ExtendedFormGroup[], controlKey: string): ExtendedFormGroupControl {\n    let existingControl: ExtendedFormGroupControl;\n\n    if (Array.isArray(forms)) {\n      forms.some((form: ExtendedFormGroup) => {\n        this.findNestedControl(form, controlKey);\n      });\n    } else {\n      if (forms.controls[controlKey]) {\n        existingControl = forms.controls[controlKey] as ExtendedFormGroupControl;\n      } else {\n        Object.keys(forms.controls).forEach((key: string) => {\n          if ((forms.controls[key] as ExtendedFormGroup).controls) {\n            if ((forms.controls[key] as ExtendedFormGroup).controls[controlKey]) {\n              existingControl = (forms.controls[key] as ExtendedFormGroup).controls[\n                controlKey\n              ] as ExtendedFormGroupControl;\n            } else {\n              Object.keys((forms.controls[key] as ExtendedFormGroup).controls).forEach((control: string) => {\n                (forms.controls[key] as ExtendedFormGroup).controls[control];\n                if (((forms.controls[key] as ExtendedFormGroup).controls[control] as ExtendedFormControl).formGroup) {\n                  if (\n                    ((forms.controls[key] as ExtendedFormGroup).controls[control] as ExtendedFormControl).formGroup\n                      .controls[controlKey]\n                  ) {\n                    existingControl = ((forms.controls[key] as ExtendedFormGroup).controls[\n                      control\n                    ] as ExtendedFormControl).formGroup.controls[controlKey];\n                  }\n                }\n              });\n            }\n          }\n          if ((forms.controls[key] as ExtendedFormControl).formGroup) {\n            if ((forms.controls[key] as ExtendedFormControl).formGroup.controls[controlKey]) {\n              existingControl = (forms.controls[key] as ExtendedFormControl).formGroup.controls[controlKey];\n            }\n          }\n        });\n      }\n    }\n\n    return existingControl;\n  }\n\n  validateForm(form: ExtendedFormGroup): boolean {\n    form.updateValueAndValidity();\n    if (!form.valid) {\n      return form.valid;\n    }\n    return !this.isNestedFormInvalid(form);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ExtendedFormArray",
            "id": "class-ExtendedFormArray-dc963a8d43955bc6f03c5c6e74e129c6",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-array.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormArray, FormControl } from \"@angular/forms\";\nimport { DynamicFormItem } from \"../../model/dynamicFormItem\";\n\nexport class ExtendedFormArray extends FormArray {\n    formItem: DynamicFormItem;\n\n    constructor(formItem: DynamicFormItem, controls: Array<FormControl>) {\n        super(controls);\n        this.formItem = formItem;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controls",
                        "type": "Array<FormControl>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controls",
                        "type": "Array<FormControl>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "formItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormItem",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormArray",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExtendedFormControl",
            "id": "class-ExtendedFormControl-7b1fa64bb34754455848b971b493be12",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-control.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormControl, AsyncValidatorFn, ValidatorFn } from \"@angular/forms\";\nimport { DynamicFormItem } from \"../../model/dynamicFormItem\";\nimport { ExtendedFormGroup } from \"./extended-form-group\";\nimport { ExtendedFormGroupArray } from \"./extended-form-group-array\";\n\nexport class ExtendedFormControl extends FormControl {\n    formItem: DynamicFormItem;\n    options: DynamicFormItem[\"options\"] = [];\n    formGroup: ExtendedFormGroup | ExtendedFormGroupArray;\n\n    constructor(\n        formItem: DynamicFormItem,\n        value: any,\n        validator?: ValidatorFn | ValidatorFn[] | AsyncValidatorFn | AsyncValidatorFn[] | null\n    ) {\n        super(value, validator);\n        this.formItem = formItem;\n        this.options = formItem.options ? formItem.options : null;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validator",
                        "type": "ValidatorFn | ValidatorFn[] | AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validator",
                        "type": "ValidatorFn | ValidatorFn[] | AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedFormGroup | ExtendedFormGroupArray",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "formItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormItem",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormControl",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExtendedFormGroup",
            "id": "class-ExtendedFormGroup-3101e61994da85e229f3d798f6b63ac1",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  FormGroup,\n  ValidatorFn,\n  AbstractControlOptions,\n  AsyncValidatorFn,\n} from '@angular/forms';\nimport { DynamicFormSection } from '../../model/dynamicFormSection';\nimport { ExtendedFormControl } from './extended-form-control';\nimport { ExtendedFormArray } from './extended-form-array';\nimport { ExtendedFormGroupArray } from './extended-form-group-array';\nexport interface ExtendedFormGroupControls {\n  [key: string]: ExtendedFormGroupControl | ExtendedFormGroup;\n}\n\nexport type ExtendedFormGroupControl =\n  | ExtendedFormControl\n  | ExtendedFormArray\n  | ExtendedFormGroup\n  | ExtendedFormGroupArray;\n\nexport class ExtendedFormGroup extends FormGroup {\n  sectionItem: DynamicFormSection;\n\n  constructor(\n    controls: ExtendedFormGroupControls,\n    item?: DynamicFormSection,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.sectionItem = item;\n  }\n\n  get(path: string | (string | number)[]): ExtendedFormGroupControl {\n    return super.get(path) as ExtendedFormGroupControl;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controls",
                        "type": "ExtendedFormGroupControls",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "controls",
                        "type": "ExtendedFormGroupControls",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "sectionItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormSection",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "path",
                            "type": "string | (string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupControl",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string | (string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "FormGroup",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExtendedFormGroupArray",
            "id": "class-ExtendedFormGroupArray-14a597fe1cad5dd75e1cf14d0f0622a2",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group-array.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormArray } from \"@angular/forms\";\nimport { DynamicFormSection } from \"../../model/dynamicFormSection\";\nimport { ExtendedFormGroup } from \"./extended-form-group\";\n\nexport class ExtendedFormGroupArray extends FormArray {\n    sectionItem: DynamicFormSection;\n\n    constructor(controls: Array<ExtendedFormGroup>, item?: DynamicFormSection) {\n        super(controls);\n        this.sectionItem = item;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controls",
                        "type": "Array<ExtendedFormGroup>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "controls",
                        "type": "Array<ExtendedFormGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "sectionItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormSection",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormArray",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "DigitOnlyDirective",
            "id": "directive-DigitOnlyDirective-987a545876aca56dcaffc3cba2fda4c3",
            "file": "projects/dynamic-form/src/lib/digit-only/digit-only.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener, NgModule, AfterViewInit, Input, AfterViewChecked, ChangeDetectorRef } from \"@angular/core\";\nimport { formatNumber } from \"@angular/common\";\nimport { ExtendedFormControl } from \"../model/custom-classes/extended-form-control\";\n\n@Directive({\n    selector: \"[digitsOnly]\",\n})\nexport class DigitOnlyDirective implements AfterViewInit, AfterViewChecked {\n    inputElement: HTMLInputElement;\n    element: ElementRef;\n    @Input() formControl: ExtendedFormControl;\n\n    constructor(public el: ElementRef, private cd: ChangeDetectorRef) {\n        this.element = el;\n    }\n\n    ngAfterViewInit(): void {\n        this.inputElement = this.element.nativeElement.querySelector(\"input\");\n    }\n\n    ngAfterViewChecked(): void {\n        const { formattedValue } = this.formatValue();\n        this.inputElement.value = formattedValue;\n    }\n\n    @HostListener(\"input\", [\"$event\"])\n    onInputChange(event: Event) {\n        const { initialValue, value, formattedValue } = this.formatValue();\n        if (initialValue !== this.inputElement.value) {\n            event?.stopPropagation();\n        }\n        this.formControl.patchValue(value);\n        this.inputElement.value = formattedValue;\n        this.cd.detectChanges();\n    }\n\n    formatValue(): { initialValue: string; value: string; formattedValue: string } {\n        const initialValue: string = this.inputElement.value;\n        const value: string = initialValue\n            .split(/[.,]/)[0]\n            .replace(/[^0-9]*/g, \"\")\n            .replace(/^0+(?!\\.|$)/, \"\");\n        const formattedValue: string = value ? formatNumber(Number(value), \"se\") : value;\n        return {\n            initialValue,\n            value,\n            formattedValue,\n        };\n    }\n}\n\n@NgModule({\n    declarations: [DigitOnlyDirective],\n    exports: [DigitOnlyDirective],\n})\nexport class DigitOnlyModule {}\n",
            "selector": "[digitsOnly]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ExtendedFormControl"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "input",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                }
            ],
            "propertiesClass": [
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLInputElement",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "formatValue",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewInit",
                "AfterViewChecked"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "DemoComponent",
            "id": "component-DemoComponent-14c2d95f44921be0d4f5b25f6e4287c0",
            "file": "stories/demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-dynamic-form",
            "styleUrls": [
                "./demo.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "number"
                },
                {
                    "name": "cancelAction",
                    "defaultValue": "{ hasAction: false, label: 'Cancel' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "IFormAction"
                },
                {
                    "name": "formSection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "DynamicFormSection[]"
                },
                {
                    "name": "hasFormActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean"
                },
                {
                    "name": "nextAction",
                    "defaultValue": "{ hasAction: false, label: 'Next' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "IFormAction"
                },
                {
                    "name": "previousAction",
                    "defaultValue": "{ hasAction: false, label: 'Previous' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "IFormAction"
                },
                {
                    "name": "saveAction",
                    "defaultValue": "{ hasAction: false, label: 'Save' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "IFormAction"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dynamicForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dynamicForm'"
                        }
                    ]
                },
                {
                    "name": "extendedFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "param",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "param",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatNumberLocale",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNestedControlValue",
                    "args": [
                        {
                            "name": "control",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getObjectKeys",
                    "args": [
                        {
                            "name": "obj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "gotToPreviousStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { formatNumber } from '@angular/common';\nimport {\n  Component,\n  Input,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport {\n  DynamicFormSection,\n  FormService,\n  ExtendedFormGroup,\n  IFormAction,\n  DynamicFormComponent\n} from 'projects/dynamic-form/src/lib';\n\n@Component({\n  selector: 'storybook-dynamic-form',\n  templateUrl: './demo.component.html',\n  styleUrls: ['./demo.scss'],\n})\nexport class DemoComponent implements OnInit, OnChanges {\n  extendedFormGroup: ExtendedFormGroup;\n  @ViewChild('dynamicForm') dynamicForm: DynamicFormComponent;\n  constructor(private formService: FormService) {}\n\n  ngOnInit(): void {\n    this.extendedFormGroup = this.formService.dynamicFormSectionsToFormGroup([\n      this.formSection[this.activeStep],\n    ]);\n    console.log(this.extendedFormGroup)\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // if (changes.formSection.currentValue) {\n    //   this.extendedFormGroup = this.formService.dynamicFormSectionsToFormGroup(\n    //     this.formSection\n    //   );\n    // }\n  }\n\n  @Input()\n  activeStep: number;\n\n  @Input()\n  formSection: DynamicFormSection[];\n\n  @Input()\n  hasFormActions: boolean;\n\n  @Input()\n  nextAction: IFormAction = { hasAction: false, label: 'Next' };\n\n  @Input()\n  previousAction: IFormAction = { hasAction: false, label: 'Previous' };\n\n  @Input()\n  cancelAction: IFormAction = { hasAction: false, label: 'Cancel' };\n\n  @Input()\n  saveAction: IFormAction = { hasAction: false, label: 'Save' };\n\n  goToNextStep(): void {\n    this.activeStep += 1;\n    this.extendedFormGroup = this.formService.dynamicFormSectionsToFormGroup(\n      [this.formSection[this.activeStep]],\n      this.extendedFormGroup\n    );\n  }\n\n  gotToPreviousStep(): void {\n    this.activeStep -= 1;\n  }\n\n  getObjectKeys(obj: {[key: string]: any}): string[] {\n    return Object.keys(obj)\n  }\n\n  edit(param): void {\n    this.dynamicForm.editItemFromParent(param);\n  }\n\n  delete(param): void {\n    this.dynamicForm.removeItemFromParent(param);\n  }\n  \n  getNestedControlValue(control): string[] {\n    return Object.values(Object.values(control)[0]);\n  }\n\n  formatNumberLocale(value): string {\n    return Number(value) ? formatNumber(value, 'se') : value;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep {\n  @import \"~@sebgroup/bootstrap/scss/bootstrap\";\n  .radio.card {\n    margin-bottom: 1rem;\n    display: flex;\n    padding: 0.75rem 1rem;\n    flex-direction: column;\n    min-height: 68px;\n    flex-wrap: wrap;\n    .title {\n      display: flex;\n      align-items: center;\n      flex-wrap: wrap;\n      white-space: nowrap;\n    }\n    .options {\n      padding: 0;\n    }\n    &.error {\n      outline: 1px solid $danger;\n    }\n    sebng-radio-group {\n      ::ng-deep {\n        .radio-group {\n          margin-bottom: 0;\n        }\n        .custom-radio {\n          margin-left: 0.25rem;\n          .row {\n            .col {\n              min-width: 80px;\n            }\n          }\n        }\n      }\n    }\n    label {\n      margin-bottom: 0;\n      margin-right: 0.25rem;\n    }\n    span {\n      font-size: $font-size-sm;\n      font-weight: $font-weight-normal;\n    }\n    &.data {\n      padding: 0 1rem;\n      flex-direction: column;\n      align-items: flex-start;\n      .title {\n        width: 100%;\n        border-bottom: 1px solid $gray-200;\n        padding: 1.5rem 1rem 1rem;\n      }\n  \n      table.radio-group-data {\n        width: 35%;\n        margin: 1rem 0;\n        tr {\n          padding-left: 1rem;\n          td {\n            height: 3rem;\n            vertical-align: middle;\n            padding-left: 1rem;\n            &:nth-child(2) {\n              text-align: right;\n              font-weight: $font-weight-medium;\n              padding-right: 1rem;\n            }\n            &:last-child {\n              width: 6%;\n              padding: 0;\n              &.picto {\n                ::ng-deep {\n                  svg,\n                  img {\n                    width: 1.5rem;\n                    height: 1.5rem;\n                    fill: $primary;\n                  }\n                }\n              }\n            }\n          }\n        }\n        @include media-breakpoint-down(md) {\n          width: 100%;\n        }\n      }\n    }\n  }\n  \n}\n\n",
                    "styleUrl": "./demo.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"extendedFormGroup\">\n  <app-dynamic-form\n    #dynamicForm\n    [extendedFormGroup]=\"extendedFormGroup\"\n    [radioTableTemplate]=\"radioTableTmpl\"\n    [radioTemplate]=\"radioTmpl\"\n    [disclaimerTemplate]=\"disclaimerTmpl\"\n    [activeStep]=\"activeStep\"\n    [hasFormActions]=\"hasFormActions\"\n    [nextAction]=\"nextAction\"\n    [previousAction]=\"previousAction\"\n    [saveAction]=\"saveAction\"\n    [cancelAction]=\"cancelAction\"\n    (nextEvent)=\"goToNextStep()\"\n    (previousEvent)=\"gotToPreviousStep()\"\n  ></app-dynamic-form>\n</ng-container>\n\n<ng-template #numberTmpl let-context=\"context\" let-error=\"error\">\n  <div class=\"card px-3 py-4\" [formGroup]=\"extendedFormGroup\">\n    <div class=\"input-metadata mb-3\" style=\"max-width: 75%\">\n      <h3>{{ context?.formItem?.descriptionHeader }}</h3>\n      <p class=\"mt-3\">{{ context?.formItem?.description }}</p>\n    </div>\n    <div class=\"input\" style=\"max-width: 75%\">\n      <span class=\"font-weight-bold d-block\">{{\n        context?.formItem?.controlMetaData?.description\n      }}</span>\n      <span>{{ context?.formItem?.controlMetaData?.label }}</span>\n      <sebng-textbox\n        className=\"dynamic-form-item\"\n        pattern=\"[0-9]*\"\n        inputmode=\"numeric\"\n        type=\"text\"\n        digitsOnly\n        [rightText]=\"context?.formItem?.controlMetaData?.inputGroupLabel\"\n        [formControl]=\"context\"\n        [error]=\"error\"\n      ></sebng-textbox>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #disclaimerTmpl let-context=\"context\">\n  <div class=\"card px-3 py-4\">\n    <h3>{{ context?.formItem?.descriptionHeader }}</h3>\n    <p>{{ context?.formItem?.description }}</p>\n  </div>\n</ng-template>\n\n<ng-template #itemTmpl>\n  <h3>{{ context?.descriptionHeader }}</h3>\n  <p>{{ context?.description }}</p>\n</ng-template>\n\n<ng-template #radioTmpl let-context=\"context\" let-error=\"error\">\n  <div\n    class=\"radio\"\n    [formGroup]=\"extendedFormGroup\"\n    *ngIf=\"!context.formGroup || context?.value?.followUpItems?.multi\"\n  >\n    <div class=\"col-sm-12 col-md-5 col-lg-5 pt-3\">\n      <label>{{ context?.formItem?.controlMetaData?.label }}</label>\n    </div>\n    <div class=\"col-2 p-0\">\n      <sebng-radio-group\n        className=\"dynamic-form-item\"\n        [condensed]=\"true\"\n        [inline]=\"true\"\n        [formControl]=\"context\"\n        [list]=\"context.formItem.options\"\n        [error]=\"error\"\n      ></sebng-radio-group>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #cardTmpl let-context=\"context\" let-error=\"error\">\n  <div class=\"card px-3 py-4\">\n    <h3>{{ context?.formItem?.descriptionHeader }}</h3>\n    <p>{{ context?.formItem?.description }}</p>\n    <div class=\"row\" [formGroup]=\"extendedFormGroup\">\n      <div class=\"col-6\">\n        <sebng-toggle-selector\n          [formControl]=\"context\"\n          [list]=\"context.formItem.options\"\n          [error]=\"!!error\"\n          [errorMessage]=\"error\"\n        ></sebng-toggle-selector>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #radioTableTmpl let-context=\"context\" let-error=\"error\">\n  <ng-container *ngIf=\"context.value.value.followUpItems?.multi; else single\">\n    <table\n      class=\"table table-hover\"\n      *ngIf=\"context.value?.formGroup.value?.length\"\n    >\n      <thead>\n        <tr>\n          <th\n            *ngFor=\"\n              let section of context.value.value.followUpItems.items[0].sections\n            \"\n          >\n            {{ section.title }}\n          </th>\n          <th></th>\n          <th></th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let item of context.value.formGroup.value; index as i\">\n          <ng-container *ngFor=\"let key of getObjectKeys(item)\">\n            <ng-container *ngFor=\"let itemKey of getObjectKeys(item[key])\">\n              <td *ngFor=\"let val of getObjectKeys(item[key][itemKey])\">\n                {{ item[key][itemKey][val] }}\n              </td>\n            </ng-container>\n          </ng-container>\n          <td>\n            <button\n              class=\"btn btn-sm btn-secondary\"\n              type=\"button\"\n              (click)=\"\n                edit({\n                  formArray: context.value.formGroup,\n                  index: i,\n                  parentKey: context.value.formItem.key\n                })\n              \"\n            >\n              Edit\n            </button>\n          </td>\n          <td>\n            <button\n              class=\"btn btn-sm btn-secondary btn-danger\"\n              type=\"button\"\n              (click)=\"delete({ form: context.value, index: i })\"\n            >\n              Delete\n            </button>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </ng-container>\n  <ng-template #single>\n    <div class=\"radio card data\">\n      <div class=\"title\">\n        <label *ngIf=\"context?.value?.formItem?.controlMetaData?.label\">\n          {{ context.value.formItem.controlMetaData.label }}\n        </label>\n        <span\n          *ngIf=\"context?.value?.formItem?.controlMetaData?.description\"\n        ></span>\n      </div>\n      <table class=\"radio-group-data cursor-pointer\">\n        <tbody>\n          <tr\n            *ngFor=\"\n              let control of context.value.formGroup.controls;\n              index as i;\n              trackBy: trackByFn\n            \"\n            (click)=\"\n              edit({\n                formArray: context.value.formGroup,\n                index: i,\n                parentKey: context.value.formItem.key\n              })\n            \"\n          >\n            <td>value</td>\n            <ng-container\n              *ngFor=\"let item of getNestedControlValue(control.value)\"\n            >\n              <td class=\"pr-0\">{{ formatNumberLocale(item) }}</td>\n            </ng-container>\n            <td class=\"picto\">\n              <sebng-button theme=\"link\" className=\"p-0 font-weight-bold\"> \n                <svg id=\"PIKTO_REGULAR\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 192 512\" width=\"32px\" height=\"32px\">\n                  <path d=\"M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z\" />\n                </svg>\n              </sebng-button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </ng-template>\n</ng-template>\n"
        },
        {
            "name": "DynamicFormComponent",
            "id": "component-DynamicFormComponent-58086a5ad773832aea81005eff6ae098",
            "file": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "FormService"
                }
            ],
            "selector": "app-dynamic-form",
            "styleUrls": [],
            "styles": [
                "\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    "
            ],
            "templateUrl": [
                "./dynamic-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionsTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "activeStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "number"
                },
                {
                    "name": "cancelAction",
                    "defaultValue": "{\n    hasAction: true,\n    label: 'Cancel',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "IFormAction"
                },
                {
                    "name": "cardTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "checkboxTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "datePickerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "deleteAction",
                    "defaultValue": "{\n    hasAction: true,\n    label: 'Delete',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "IFormAction"
                },
                {
                    "name": "disclaimerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "dropdownTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "extendedFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "ExtendedFormGroup"
                },
                {
                    "name": "hasFormActions",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean"
                },
                {
                    "name": "inputMetadataTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "itemCustomClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string"
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "nextAction",
                    "defaultValue": "{\n    hasAction: true,\n    label: 'Next',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "IFormAction"
                },
                {
                    "name": "numberTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "previousAction",
                    "defaultValue": "{\n    hasAction: true,\n    label: 'Previous',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "IFormAction"
                },
                {
                    "name": "radioTableTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "radioTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "saveAction",
                    "defaultValue": "{\n    hasAction: true,\n    label: 'Save',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "IFormAction"
                },
                {
                    "name": "savedFormData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "literal type[]"
                },
                {
                    "name": "sectionTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "textAreaTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "toggleSelectorTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "TemplateRef<any>"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "nextEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "previousEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "confirmationData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmInformation",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "confirmationToggle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "followUpModalToggle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "newFormGroup",
                    "defaultValue": "{\n    form: null,\n    index: null,\n    parentKey: null,\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "orderForm",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 376
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 98
                }
            ],
            "methodsClass": [
                {
                    "name": "acceptConfirmation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 466,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addNewItemToFormArrayWithId",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "sectionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nADD NEW ITEM TO FORM ARRAY WITH ID:\nDuplicates the whole section or a form item within a section\n",
                    "description": "<p>ADD NEW ITEM TO FORM ARRAY WITH ID:\nDuplicates the whole section or a form item within a section</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8129,
                                "end": 8132,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8123,
                                "end": 8128,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>section key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8157,
                                "end": 8159,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 8151,
                                "end": 8156,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>the id of the form item which should be duplicated</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8223,
                                "end": 8235,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "sectionIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 8217,
                                "end": 8222,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>if the formgroup is an array this is the index of the formgroup item</p>\n"
                        }
                    ]
                },
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 428,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "controlValueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 407,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createFormGroup",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "denyConfirmation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 461,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dimissFollowUpModal",
                    "args": [
                        {
                            "name": "item",
                            "type": "ExtendedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ExtendedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editItemFromParent",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 357,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormArrayControls",
                    "args": [
                        {
                            "name": "control",
                            "type": "ExtendedFormGroupArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<ExtendedFormGroup>",
                    "typeParameters": [],
                    "line": 394,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "ExtendedFormGroupArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasConfirmation",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ConfirmInformation",
                    "typeParameters": [],
                    "line": 449,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFind if the current selected values have a confirmation required\n",
                    "description": "<p>Find if the current selected values have a confirmation required</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 13929,
                                "end": 13934,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 13923,
                                "end": 13928,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>the property value of formGroup</p>\n"
                        }
                    ]
                },
                {
                    "name": "modalShouldBeRendered",
                    "args": [
                        {
                            "name": "control",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 432,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 472,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeItemAtIndexFromFormArrayWithId",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "info",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "sectionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nREMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\nRemoves the whole section or a form item within a section\n",
                    "description": "<p>REMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\nRemoves the whole section or a form item within a section</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9723,
                                "end": 9726,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9717,
                                "end": 9722,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>section key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9751,
                                "end": 9755,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "info"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 9745,
                                "end": 9750,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>the id of the form item which should be removed and the index of where to remove it</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9852,
                                "end": 9864,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "sectionIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 9846,
                                "end": 9851,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>if the formgroup is an array this is the index of the formgroup item</p>\n"
                        }
                    ]
                },
                {
                    "name": "removeItemFromParent",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveFollowUpModal",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldRenderControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formItem",
                            "type": "DynamicFormItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSHOULD RENDER CONTROL:\nDetermines if the form control should be rendered or not.\n",
                    "description": "<p>SHOULD RENDER CONTROL:\nDetermines if the form control should be rendered or not.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4804,
                                "end": 4807,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4798,
                                "end": 4803,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>section key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4832,
                                "end": 4840,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "formItem"
                            },
                            "type": "DynamicFormItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4826,
                                "end": 4831,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>the target form item that should or should not be displayed</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4913,
                                "end": 4918,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4907,
                                "end": 4912,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>if the formgroup is an array this is the index of the formgroup item</p>\n"
                        }
                    ]
                },
                {
                    "name": "shouldRenderFollowUpControlsType",
                    "args": [
                        {
                            "name": "key",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 424,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>some comment</p>\n",
            "rawdescription": "\nsome comment",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Output,\n  TemplateRef,\n} from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { KeyValue } from '@angular/common';\nimport {\n  DynamicFormItem,\n  DynamicFormOption,\n  ConfirmInformation,\n} from './model/models';\nimport {\n  ExtendedFormGroup,\n  ExtendedFormGroupControls,\n} from './model/custom-classes/extended-form-group';\nimport { ExtendedFormControl } from './model/custom-classes/extended-form-control';\nimport { ExtendedFormArray } from './model/custom-classes/extended-form-array';\nimport { ExtendedFormGroupArray } from './model/custom-classes/extended-form-group-array';\nimport { FormService } from './form.service';\n\ninterface IDynamicFormValidationError {\n  key: string;\n  errorMessage: string;\n  sectionId: string;\n  sectionIndex: number;\n  formItem: Partial<DynamicFormItem>;\n}\n\nexport interface IFormAction {\n  hasAction: boolean;\n  label?: string;\n  theme?: string;\n  icon?: string;\n}\n/** some comment */\n@Component({\n  selector: 'app-dynamic-form',\n  templateUrl: './dynamic-form.component.html',\n  providers: [FormService],\n  styles: [\n    `\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    `,\n  ],\n})\nexport class DynamicFormComponent {\n  @Input() extendedFormGroup: ExtendedFormGroup;\n  @Input() activeStep: number;\n  @Input() sectionTemplate: TemplateRef<any>;\n  @Input() itemTemplate: TemplateRef<any>;\n  @Input() actionsTemplate: TemplateRef<any>;\n  @Input() disclaimerTemplate: TemplateRef<any>;\n  @Input() inputMetadataTemplate: TemplateRef<any>;\n  @Input() textAreaTemplate: TemplateRef<any>;\n  @Input() numberTemplate: TemplateRef<any>;\n  @Input() checkboxTemplate: TemplateRef<any>;\n  @Input() dropdownTemplate: TemplateRef<any>;\n  @Input() datePickerTemplate: TemplateRef<any>;\n  @Input() radioTemplate: TemplateRef<any>;\n  @Input() radioTableTemplate: TemplateRef<any>;\n  @Input() toggleSelectorTemplate: TemplateRef<any>;\n  @Input() cardTemplate: TemplateRef<any>;\n  @Input() itemCustomClass: string;\n  @Input() hasFormActions: boolean = true;\n  // used to compare current rules with saved data\n  @Input() savedFormData: { key: string; value: string | number | boolean }[] = [];\n  @Input() nextAction: IFormAction = {\n    hasAction: true,\n    label: 'Next',\n  };\n  @Input() previousAction: IFormAction = {\n    hasAction: true,\n    label: 'Previous',\n  };\n  @Input() cancelAction: IFormAction = {\n    hasAction: true,\n    label: 'Cancel',\n  };\n\n  @Input() saveAction: IFormAction = {\n    hasAction: true,\n    label: 'Save',\n  };\n  @Input() deleteAction: IFormAction = {\n    hasAction: true,\n    label: 'Delete',\n  };\n  @Output() previousEvent: EventEmitter<any> = new EventEmitter();\n  @Output() nextEvent: EventEmitter<any> = new EventEmitter();\n  @Output() cancelEvent: EventEmitter<any> = new EventEmitter();\n\n  submitted: boolean = false;\n  confirmationToggle: boolean = false;\n  confirmationData: ConfirmInformation = null;\n\n  newFormGroup: {\n    form: ExtendedFormGroup;\n    index: number;\n    parentKey: string;\n  } = {\n    form: null,\n    index: null,\n    parentKey: null,\n  };\n\n  followUpModalToggle: boolean = false;\n\n  constructor(\n    private formService: FormService,\n    private cd: ChangeDetectorRef\n  ) {}\n\n  shouldRenderFollowUpControlsType(key: any): string {\n    if (key.value?.followUpItems) {\n      return key.value?.followUpItems.type;\n    }\n  }\n\n  dimissFollowUpModal(item: ExtendedFormControl): void {\n    this.followUpModalToggle = false;\n    !item.formGroup && item?.reset();\n  }\n\n  saveFollowUpModal(param: {\n    item: ExtendedFormGroup;\n    control: ExtendedFormControl;\n  }): void {\n    const { item, control } = param;\n    if (item.valid) {\n      if (this.newFormGroup.index !== null) {\n        (control.formGroup as ExtendedFormGroupArray).setControl(\n          this.newFormGroup.index,\n          item\n        );\n      } else {\n        if (!control.formGroup?.controls?.length) {\n          control.formGroup = new ExtendedFormGroupArray([item]);\n        } else {\n          (control.formGroup as ExtendedFormGroupArray).push(item);\n        }\n      }\n      this.followUpModalToggle = false;\n      this.cd.detectChanges();\n    }\n  }\n\n  createFormGroup(param: { items: any; key: string }) {\n    this.newFormGroup = {\n      form: this.formService.dynamicFormSectionsToFormGroup(param.items),\n      index: null,\n      parentKey: param.key,\n    };\n    this.followUpModalToggle = true;\n  }\n\n  modalShouldBeRendered(control): boolean {\n    if (\n      control.value?.followUpItems?.items?.length &&\n      control.formItem.key === this.newFormGroup.parentKey\n    ) {\n      return !!this.newFormGroup.form;\n    }\n  }\n\n  /**\n   * SHOULD RENDER CONTROL:\n   * Determines if the form control should be rendered or not.\n   * @param key section key\n   * @param formItem the target form item that should or should not be displayed\n   * @param index if the formgroup is an array this is the index of the formgroup item\n   */\n  shouldRenderControl(\n    key: string,\n    formItem: DynamicFormItem,\n    index?: number\n  ): boolean {\n    if (this.extendedFormGroup.controls)\n      if (formItem?.rulerKey) {\n        // It has a ruler key, trying to find the ruler and it's value\n        let ruler: ExtendedFormControl;\n        if (index > -1) {\n          // the form control where the ruler should be is an array\n          const target: ExtendedFormControl = (this.extendedFormGroup.get(\n            key\n          ) as ExtendedFormGroupArray)\n            .at(index)\n            .get(formItem.rulerKey) as ExtendedFormControl;\n          if (target) {\n            ruler = target;\n          }\n        } else {\n          // no array index: the form control where the ruler should be is a regular form\n          ruler = this.extendedFormGroup\n            ?.get(key)\n            ?.get(formItem.rulerKey) as ExtendedFormControl;\n        }\n        const rulerValue: any = ruler.value;\n        const { condition }: DynamicFormItem = formItem;\n        if (rulerValue === undefined || condition === undefined) {\n          console.warn(\n            'Something went wrong in shouldRenderControl: Ruler value or condition could not be found.'\n          );\n          return false;\n        }\n        if (\n          typeof rulerValue === 'string' &&\n          rulerValue === (condition as any)\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          condition &&\n          typeof condition === 'object' &&\n          Array.isArray(condition)\n        ) {\n          for (const conditionItem of condition as Array<any>) {\n            if (conditionItem) {\n              if (typeof rulerValue === 'object' && Array.isArray(rulerValue)) {\n                for (const rulerValueItem of rulerValue as Array<any>) {\n                  if (\n                    rulerValueItem &&\n                    rulerValueItem.value === conditionItem.value\n                  ) {\n                    return this.shouldRenderControl(key, ruler.formItem, index);\n                  }\n                }\n              } else if (\n                typeof rulerValue === 'object' &&\n                !Array.isArray(rulerValue)\n              ) {\n                if (rulerValue && rulerValue.value === conditionItem.value) {\n                  return this.shouldRenderControl(key, ruler.formItem, index);\n                }\n              }\n            }\n          }\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'object' &&\n          !Array.isArray(rulerValue) &&\n          rulerValue.value === (condition as DynamicFormOption).value\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        } else if (\n          rulerValue &&\n          typeof rulerValue === 'boolean' &&\n          rulerValue === condition\n        ) {\n          return this.shouldRenderControl(key, ruler.formItem, index);\n        }\n        return false;\n      }\n    return true;\n  }\n\n  /**\n   * ADD NEW ITEM TO FORM ARRAY WITH ID:\n   * Duplicates the whole section or a form item within a section\n   * @param key section key\n   * @param id the id of the form item which should be duplicated\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  addNewItemToFormArrayWithId(\n    key: string,\n    id?: string,\n    sectionIndex?: number\n  ): void {\n    if (id) {\n      // There is an id which means we want to duplicate a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to duplicate should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(id) as ExtendedFormArray).push(new FormControl(''));\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup.get(key).get(id) as ExtendedFormArray).push(\n          new FormControl('')\n        );\n      }\n    } else {\n      // There is no id which means we want to duplicate the entire section\n      const target: ExtendedFormGroupArray = this.extendedFormGroup.get(\n        key\n      ) as ExtendedFormGroupArray;\n      const childControls: ExtendedFormGroupControls = this.formService.dynamicFormItemsToControls(\n        target.sectionItem.items\n      );\n      const formGroup: ExtendedFormGroup = new ExtendedFormGroup(\n        childControls,\n        target.sectionItem\n      );\n      target.push(formGroup);\n    }\n  }\n\n  /**\n   * REMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\n   * Removes the whole section or a form item within a section\n   * @param key section key\n   * @param info the id of the form item which should be removed and the index of where to remove it\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\n   */\n  removeItemAtIndexFromFormArrayWithId(\n    key: string,\n    info?: { id: string; index: number },\n    sectionIndex?: number\n  ): void {\n    if (info && info.id) {\n      // There is info which means we want to remove a form item within a section\n      if (sectionIndex > -1) {\n        // the form control where the item to remove should be is an array\n        const target: ExtendedFormArray = (this.extendedFormGroup.get(\n          key\n        ) as ExtendedFormGroupArray).at(sectionIndex) as ExtendedFormArray;\n        (target.get(info.id) as ExtendedFormArray).removeAt(info.index);\n      } else {\n        // the form control is not an array since there is no section index\n        (this.extendedFormGroup\n          .get(key)\n          .get(info.id) as ExtendedFormArray).removeAt(info.index);\n      }\n    } else {\n      // there is no info indicating we should use the section index to remove the section itself\n      if (sectionIndex > -1) {\n        (this.extendedFormGroup.get(key) as ExtendedFormGroupArray).removeAt(\n          sectionIndex\n        );\n      } else {\n        console.warn(\n          'Error at removeItemAtIndexFromFormArrayWithId: Tried to remove section but no section index was provided'\n        );\n      }\n    }\n  }\n\n  removeItemFromParent(param: {\n    form: ExtendedFormControl;\n    index: number;\n  }): void {\n    const { form, index } = param;\n    (form.formGroup as ExtendedFormGroupArray).removeAt(index);\n    // reset parent control if the formGroup property doesn't have controls\n    if (!(form.formGroup as ExtendedFormGroupArray).controls?.length) {\n      form.reset();\n    }\n    this.followUpModalToggle = false;\n  }\n\n  editItemFromParent(param: {\n    formArray: ExtendedFormArray;\n    index: number;\n    parentKey: string;\n  }): void {\n    const { formArray, index, parentKey } = param;\n    \n    this.newFormGroup = {\n      form: new ExtendedFormGroup(\n        (formArray.at(index) as ExtendedFormGroup)\n          .controls as ExtendedFormGroupControls\n      ),\n      index,\n      parentKey,\n    };\n    \n    this.followUpModalToggle = true;\n  }\n\n  orderForm = (\n    a: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>,\n    b: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>\n  ): number => {\n    if (a.value['sectionItem'] && b.value['sectionItem']) {\n      return (\n        (a.value as ExtendedFormGroup).sectionItem.order -\n        (b.value as ExtendedFormGroup).sectionItem.order\n      );\n    } else if (a.value['formItem'] && b.value['formItem']) {\n      return (\n        (a.value as ExtendedFormControl).formItem.order -\n        (b.value as ExtendedFormControl).formItem.order\n      );\n    }\n    return 0;\n  };\n\n  getFormArrayControls(\n    control: ExtendedFormGroupArray\n  ): Array<ExtendedFormGroup> {\n    if (control instanceof ExtendedFormGroupArray) {\n      return control.controls as Array<ExtendedFormGroup>;\n    } else {\n      console.warn(\n        'Error in getFormArrayControls: control is not an instance of ExtendedFormGroupArray'\n      );\n      return [];\n    }\n  }\n\n  controlValueChanged(): void {\n    this.submitted &&= false;\n  }\n\n  get sectionList() {\n    console.log(this.extendedFormGroup)\n    if (this.activeStep !== null) {\n      return [\n        this.extendedFormGroup.controls[\n          Object.keys(this.extendedFormGroup.controls)[this.activeStep]\n        ],\n      ];\n    } else {\n      return this.extendedFormGroup.controls;\n    }\n  }\n\n  validate(): void {\n    console.log(this.extendedFormGroup);\n  }\n\n  cancel(): void {\n    this.cancelEvent.emit();\n  }\n\n  next(): void {\n    this.submitted = true;\n    if (this.formService.validateForm(this.sectionList[0])) {\n      this.confirmationData = this.hasConfirmation(this.sectionList[0].value);\n      if (this.confirmationData) {\n        this.confirmationToggle = true;\n      } else {\n        this.nextEvent?.emit();\n        this.submitted = false;\n      }\n    }\n  }\n\n  /**\n   * Find if the current selected values have a confirmation required\n   * @param value the property value of formGroup\n   */\n  hasConfirmation(value: any): ConfirmInformation {\n    let confirmation: ConfirmInformation = null;\n    if (typeof value === 'object') {\n      Object.keys(value).forEach((key: string) => {\n        if (value[key]?.confirm) {\n          confirmation = value[key].confirm;\n        }\n      });\n    }\n    return confirmation;\n  }\n\n  denyConfirmation(): void {\n    this.confirmationToggle = false;\n    this.confirmationData = null;\n  }\n\n  acceptConfirmation(): void {\n    this.denyConfirmation();\n    this.submitted = false;\n    this.nextEvent?.emit();\n  }\n\n  previous(): void {\n    this.previousEvent.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 112,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "sectionList": {
                    "name": "sectionList",
                    "getSignature": {
                        "name": "sectionList",
                        "type": "",
                        "returnType": "",
                        "line": 411
                    }
                }
            },
            "templateData": "<form\n  *ngIf=\"extendedFormGroup\"\n  #ngForm=\"ngForm\"\n  [formGroup]=\"extendedFormGroup\"\n>\n  <div\n    class=\"dynamic-form-section-item\"\n    *ngFor=\"let section of sectionList | keyvalue: orderForm\"\n  >\n    <ng-container\n      [ngTemplateOutlet]=\"sectionTemplate || internalSectionTemplate\"\n      [ngTemplateOutletContext]=\"{ context: section.value.sectionItem }\"\n    ></ng-container>\n\n    <div\n      [class]=\"section.value.sectionItem?.className\"\n      *ngIf=\"!section.value.sectionItem?.multi; else multi\"\n    >\n      <ng-container\n        *ngFor=\"let control of section.value.controls | keyvalue: orderForm\"\n      >\n        <div\n          [class]=\"control.value.formItem?.className\"\n          *ngIf=\"shouldRenderControl(section.key, control.value.formItem)\"\n        >\n          <ng-container *ngIf=\"control.value.formGroup; else singleItem\">\n            <app-dynamic-form-item\n              [parentFormGroup]=\"extendedFormGroup\"\n              [control]=\"control.value\"\n              [submitted]=\"submitted\"\n              [savedFormData]=\"savedFormData\"\n              [itemTemplate]=\"itemTemplate\"\n              [textAreaTemplate]=\"textAreaTemplate\"\n              [numberTemplate]=\"numberTemplate\"\n              [checkboxTemplate]=\"checkboxTemplate\"\n              [dropdownTemplate]=\"dropdownTemplate\"\n              [datePickerTemplate]=\"datePickerTemplate\"\n              [toggleSelectorTemplate]=\"toggleSelectorTemplate\"\n              [cardTemplate]=\"cardTemplate\"\n              [disclaimerTemplate]=\"disclaimerTemplate\"\n              [radioTemplate]=\"radioTemplate\"\n              [disclaimerTemplate]=\"disclaimerTemplate\"\n              (createFormGroup)=\"createFormGroup($event)\"\n              (controlValueChanged)=\"controlValueChanged()\"\n            ></app-dynamic-form-item>\n            <ng-container\n              [ngSwitch]=\"shouldRenderFollowUpControlsType(control.value)\"\n            >\n              <ng-container *ngSwitchCase=\"'inline'\">\n                <div\n                  *ngFor=\"\n                    let item of control.value.formGroup.controls\n                      | keyvalue: orderForm\n                  \"\n                >\n                  <app-dynamic-form-item\n                    [parentFormGroup]=\"extendedFormGroup\"\n                    [control]=\"item.value\"\n                    [submitted]=\"submitted\"\n                    [savedFormData]=\"savedFormData\"\n                    [itemTemplate]=\"itemTemplate\"\n                    [textAreaTemplate]=\"textAreaTemplate\"\n                    [numberTemplate]=\"numberTemplate\"\n                    [checkboxTemplate]=\"checkboxTemplate\"\n                    [dropdownTemplate]=\"dropdownTemplate\"\n                    [datePickerTemplate]=\"datePickerTemplate\"\n                    [toggleSelectorTemplate]=\"toggleSelectorTemplate\"\n                    [cardTemplate]=\"cardTemplate\"\n                    [radioTemplate]=\"radioTemplate\"\n                    [disclaimerTemplate]=\"disclaimerTemplate\"\n                    (controlValueChanged)=\"controlValueChanged()\"\n                  ></app-dynamic-form-item>\n                </div>\n              </ng-container>\n              <ng-container *ngSwitchDefault>\n                <ng-container\n                  *ngIf=\"radioTableTemplate; else internalRadioTemplate\"\n                  [ngTemplateOutlet]=\"radioTableTemplate\"\n                  [ngTemplateOutletContext]=\"{ context: control }\"\n                ></ng-container>\n                <ng-template #internalRadioTemplate>\n                  <app-dynamic-form-data\n                    [control]=\"control\"\n                    (editControl)=\"editItemFromParent($event)\"\n                    (deleteControl)=\"removeItemFromParent($event)\"\n                  ></app-dynamic-form-data>\n                </ng-template>\n\n                <ng-container *ngIf=\"control.value.value?.followUpItems?.multi\">\n                  <button\n                    class=\"btn btn-sm btn-secondary\"\n                    type=\"button\"\n                    (click)=\"\n                      createFormGroup({items: control.value.value.followUpItems?.items, key: control.key})\n                    \"\n                  >\n                    + Add new\n                  </button>\n                </ng-container>\n                <ng-container\n                  [ngTemplateOutlet]=\"modalTemplate\"\n                  [ngTemplateOutletContext]=\"{ context: control }\"\n                ></ng-container>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n          <ng-template #singleItem>\n            <app-dynamic-form-item\n              [parentFormGroup]=\"extendedFormGroup\"\n              [control]=\"control.value\"\n              [sectionId]=\"section.value.sectionItem.key\"\n              [itemCustomClass]=\"itemCustomClass\"\n              [savedFormData]=\"savedFormData\"\n              [submitted]=\"submitted\"\n              [itemTemplate]=\"itemTemplate\"\n              [textAreaTemplate]=\"textAreaTemplate\"\n              [numberTemplate]=\"numberTemplate\"\n              [checkboxTemplate]=\"checkboxTemplate\"\n              [dropdownTemplate]=\"dropdownTemplate\"\n              [datePickerTemplate]=\"datePickerTemplate\"\n              [toggleSelectorTemplate]=\"toggleSelectorTemplate\"\n              [cardTemplate]=\"cardTemplate\"\n              [radioTemplate]=\"radioTemplate\"\n              [disclaimerTemplate]=\"disclaimerTemplate\"\n              (createFormGroup)=\"createFormGroup($event)\"\n              (itemAddedClicked)=\"\n                addNewItemToFormArrayWithId(section.key, $event)\n              \"\n              (itemRemovedClicked)=\"\n                removeItemAtIndexFromFormArrayWithId(section.key, $event)\n              \"\n              (controlValueChanged)=\"controlValueChanged()\"\n            ></app-dynamic-form-item>\n            <ng-container\n              [ngTemplateOutlet]=\"modalTemplate\"\n              [ngTemplateOutletContext]=\"{ context: control }\"\n            ></ng-container>\n          </ng-template>\n        </div>\n      </ng-container>\n    </div>\n\n    <ng-template #multi>\n      <div\n        class=\"dynamic-form-section-item\"\n        [class]=\"section.value.sectionItem.className\"\n        *ngFor=\"\n          let arrayControl of getFormArrayControls(section.value);\n          let i = index\n        \"\n      >\n        <ng-container\n          *ngFor=\"let control of arrayControl.controls | keyvalue: orderForm\"\n        >\n          <div\n            class=\"form-group\"\n            [class]=\"control.value.formItem.className\"\n            *ngIf=\"\n              shouldRenderControl(\n                section.value.sectionItem.key,\n                control.value.formItem,\n                i\n              )\n            \"\n          >\n            <app-dynamic-form-item\n              [formGroup]=\"extendedFormGroup\"\n              [control]=\"control.value\"\n              [sectionId]=\"section.value.sectionItem.key + control.key + i\"\n              [submitted]=\"submitted\"\n              [savedFormData]=\"savedFormData\"\n              [itemTemplate]=\"itemTemplate\"\n              [textAreaTemplate]=\"textAreaTemplate\"\n              [numberTemplate]=\"numberTemplate\"\n              [checkboxTemplate]=\"checkboxTemplate\"\n              [dropdownTemplate]=\"dropdownTemplate\"\n              [datePickerTemplate]=\"datePickerTemplate\"\n              [toggleSelectorTemplate]=\"toggleSelectorTemplate\"\n              [cardTemplate]=\"cardTemplate\"\n              [radioTemplate]=\"radioTemplate\"\n              [disclaimerTemplate]=\"disclaimerTemplate\"\n              (createFormGroup)=\"createFormGroup($event)\"\n              (itemAddedClicked)=\"\n                addNewItemToFormArrayWithId(section.key, $event, i)\n              \"\n              (itemRemovedClicked)=\"\n                removeItemAtIndexFromFormArrayWithId(section.key, $event, i)\n              \"\n              (controlValueChanged)=\"controlValueChanged()\"\n            ></app-dynamic-form-item>\n            <ng-container\n              [ngSwitch]=\"shouldRenderFollowUpControlsType(control.value)\"\n            >\n              <ng-container *ngSwitchCase=\"'inline'\">\n                <div\n                  *ngFor=\"\n                    let item of control.value.formGroup.controls\n                      | keyvalue: orderForm\n                  \"\n                >\n                  <app-dynamic-form-item\n                    [parentFormGroup]=\"extendedFormGroup\"\n                    [control]=\"item.value\"\n                    [submitted]=\"submitted\"\n                    [savedFormData]=\"savedFormData\"\n                    [itemTemplate]=\"itemTemplate\"\n                    [textAreaTemplate]=\"textAreaTemplate\"\n                    [numberTemplate]=\"numberTemplate\"\n                    [checkboxTemplate]=\"checkboxTemplate\"\n                    [dropdownTemplate]=\"dropdownTemplate\"\n                    [datePickerTemplate]=\"datePickerTemplate\"\n                    [toggleSelectorTemplate]=\"toggleSelectorTemplate\"\n                    [cardTemplate]=\"cardTemplate\"\n                    [radioTemplate]=\"radioTemplate\"\n                    [disclaimerTemplate]=\"disclaimerTemplate\"\n                    (createFormGroup)=\"createFormGroup($event)\"\n                    (controlValueChanged)=\"controlValueChanged()\"\n                  ></app-dynamic-form-item>\n                </div>\n              </ng-container>\n              <ng-container *ngSwitchDefault>\n                <app-dynamic-form-data\n                  [control]=\"control\"\n                  (editControl)=\"editItemFromParent($event)\"\n                  (deleteControl)=\"removeItemFromParent($event)\"\n                ></app-dynamic-form-data>\n                <ng-container *ngIf=\"control.value.value?.followUpItems?.multi\">\n                  <button\n                    class=\"btn btn-sm btn-secondary\"\n                    type=\"button\"\n                    (click)=\"\n                      createFormGroup(control.value.value.followUpItems?.items)\n                    \"\n                  >\n                    + Add new\n                  </button>\n                  <ng-container\n                    [ngTemplateOutlet]=\"modalTemplate\"\n                    [ngTemplateOutletContext]=\"{ context: control }\"\n                  ></ng-container>\n                </ng-container>\n              </ng-container>\n            </ng-container>\n          </div>\n        </ng-container>\n        <button\n          *ngIf=\"getFormArrayControls(section.value).length > 1\"\n          [id]=\"section.value.sectionItem.key + i + '-remove'\"\n          class=\"btn btn-sm btn-outline-danger\"\n          type=\"button\"\n          (click)=\"\n            removeItemAtIndexFromFormArrayWithId(\n              section.value.sectionItem.key,\n              null,\n              i\n            )\n          \"\n        >\n          - Remove {{ section.value.sectionItem.title }}\n        </button>\n      </div>\n\n      <button\n        [id]=\"section.value.sectionItem.key + '-add'\"\n        class=\"btn btn-sm btn-secondary\"\n        type=\"button\"\n        (click)=\"addNewItemToFormArrayWithId(section.value.sectionItem.key)\"\n      >\n        + Add new {{ section.value.sectionItem.title }}\n      </button>\n    </ng-template>\n  </div>\n  <ng-template let-context=\"context\" #modalTemplate>\n    <app-dynamic-form-modal\n      *ngIf=\"modalShouldBeRendered(context?.value)\"\n      [modalToggle]=\"followUpModalToggle\"\n      [control]=\"context\"\n      [form]=\"newFormGroup.form\"\n      [controlIndex]=\"newFormGroup.index\"\n      [saveAction]=\"saveAction\"\n      [cancelAction]=\"cancelAction\"\n      [deleteAction]=\"deleteAction\"\n      (saveControl)=\"saveFollowUpModal($event)\"\n      (cancelControl)=\"dimissFollowUpModal($event)\"\n      (deleteControl)=\"removeItemFromParent($event)\"\n    ></app-dynamic-form-modal>\n  </ng-template>\n  <ng-container\n    *ngIf=\"hasFormActions && actionsTemplate; else internalActionsTemplate\"\n    [ngTemplateOutlet]=\"actionsTemplate\"\n  ></ng-container>\n  <ng-template #internalActionsTemplate>\n    <div *ngIf=\"hasFormActions\" class=\"d-flex justify-content-between\">\n      <div>\n        <button\n          *ngIf=\"cancelAction.hasAction\"\n          class=\"btn btn-secondary\"\n          (click)=\"cancel()\"\n        >\n          {{ cancelAction.label }}\n        </button>\n        <button\n          *ngIf=\"previousAction.hasAction\"\n          class=\"btn btn-outline-primary\"\n          (click)=\"previous()\"\n        >\n          {{ previousAction.label }}\n        </button>\n      </div>\n      <button\n        *ngIf=\"nextAction.hasAction\"\n        class=\"btn btn-primary\"\n        (click)=\"next()\"\n      >\n        {{ nextAction.label }}\n      </button>\n    </div>\n  </ng-template>\n\n  <ng-template let-context=\"context\" #internalSectionTemplate>\n    <span *ngIf=\"context?.category\">{{ context.category }}</span>\n    <h3 *ngIf=\"context?.title\">{{ context.title }}</h3>\n    <!-- <p *ngIf=\"context?.description\">{{ context.description }}</p> -->\n  </ng-template>\n\n  <app-dynamic-form-confirmation\n    *ngIf=\"confirmationData\"\n    [confirmationToggle]=\"confirmationToggle\"\n    [confirmationData]=\"confirmationData\"\n    (acceptConfirmationEvent)=\"acceptConfirmation()\"\n    (denyConfirmationEvent)=\"denyConfirmation()\"\n  ></app-dynamic-form-confirmation>\n</form>\n"
        },
        {
            "name": "DynamicFormConfirmationComponent",
            "id": "component-DynamicFormConfirmationComponent-4ef660211d01d9abdcff7dd73b5524fd",
            "file": "projects/dynamic-form/src/lib/dynamic-form-confirmation/dynamic-form-confirmation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-confirmation",
            "styleUrls": [
                "./dynamic-form-confirmation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-confirmation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "confirmationData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ConfirmInformation"
                },
                {
                    "name": "confirmationToggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "acceptConfirmationEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "denyConfirmationEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "acceptConfirmation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "denyConfirmation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ConfirmInformation } from '../model/models';\n\n@Component({\n  selector: 'app-dynamic-form-confirmation',\n  templateUrl: './dynamic-form-confirmation.component.html',\n  styleUrls: ['./dynamic-form-confirmation.component.css'],\n})\nexport class DynamicFormConfirmationComponent {\n  @Input() confirmationToggle: boolean;\n  @Input() confirmationData: ConfirmInformation;\n\n  @Output() acceptConfirmationEvent: EventEmitter<void> = new EventEmitter();\n  @Output() denyConfirmationEvent: EventEmitter<void> = new EventEmitter();\n\n  constructor() {}\n\n  denyConfirmation(): void {\n    this.denyConfirmationEvent.emit();\n  }\n\n  acceptConfirmation(): void {\n    this.acceptConfirmationEvent.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-form-confirmation.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "templateData": "<sebng-modal\n  *ngIf=\"confirmationData\"\n  [toggle]=\"confirmationToggle\"\n  [centered]=\"true\"\n  [closeButton]=\"false\"\n  (dismiss)=\"denyConfirmation()\"\n>\n  <h3 header>{{ confirmationData?.title }}</h3>\n  <ng-container body>{{ confirmationData?.message }}</ng-container>\n  <ng-container footer>\n    <sebng-button\n      *ngIf=\"confirmationData?.deny\"\n      [theme]=\"confirmationData?.accept ? 'outline-primary' : 'primary'\"\n      (click)=\"denyConfirmation()\"\n    >\n      {{ confirmationData.deny }}\n    </sebng-button>\n    <sebng-button\n      *ngIf=\"confirmationData?.accept\"\n      (click)=\"acceptConfirmation()\"\n    >\n      {{ confirmationData.accept }}\n    </sebng-button>\n  </ng-container>\n</sebng-modal>\n"
        },
        {
            "name": "DynamicFormDataComponent",
            "id": "component-DynamicFormDataComponent-0699b5f188efa78432a085b3e76d3fe4",
            "file": "projects/dynamic-form/src/lib/dynamic-from-data/dynamic-form-data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-data",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-data.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ExtendedFormGroupControl"
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteControl",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "editControl",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "formArray",
                            "type": "ExtendedFormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formArray",
                            "type": "ExtendedFormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "form",
                            "type": "ExtendedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "ExtendedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ExtendedFormArray } from '../model/custom-classes/extended-form-array';\nimport { ExtendedFormControl } from '../model/custom-classes/extended-form-control';\nimport { ExtendedFormGroupControl } from '../model/custom-classes/extended-form-group';\n\n@Component({\n  selector: 'app-dynamic-form-data',\n  templateUrl: './dynamic-form-data.component.html',\n})\nexport class DynamicFormDataComponent {\n  @Input() control: ExtendedFormGroupControl;\n  @Output() editControl: EventEmitter<any> = new EventEmitter();\n  @Output() deleteControl: EventEmitter<any> = new EventEmitter();\n\n  edit(formArray: ExtendedFormArray, index: number): void {\n    this.editControl.emit({\n      formArray,\n      index,\n      parentKey: this.control?.value?.formItem?.key,\n    });\n  }\n\n  remove(form: ExtendedFormControl, index: number): void {\n    this.deleteControl.emit({ form, index });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<table\n  class=\"table table-hover\"\n  *ngIf=\"control.value?.formGroup?.value?.length\"\n>\n  <thead>\n    <tr>\n      <th *ngFor=\"let header of control.value.formGroup.value[0] | keyvalue\">\n        {{ header.key }}\n      </th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let item of control.value.formGroup.value; let i = index\">\n      <td *ngFor=\"let val of item | keyvalue\">\n        {{ val.value }}\n      </td>\n      <td>\n        <button\n          class=\"btn btn-sm btn-secondary\"\n          type=\"button\"\n          (click)=\"edit(control.value.formGroup, i)\"\n        >\n          Edit\n        </button>\n      </td>\n      <td>\n        <button\n          class=\"btn btn-sm btn-secondary btn-danger\"\n          type=\"button\"\n          (click)=\"remove(control.value, i)\"\n        >\n          Delete\n        </button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
        },
        {
            "name": "DynamicFormItemComponent",
            "id": "component-DynamicFormItemComponent-20c0fe60b79be166acec7cb36defe4e0",
            "file": "projects/dynamic-form/src/lib/dynamic-form-item/dynamic-form-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-item",
            "styleUrls": [],
            "styles": [
                "\n      ::ng-deep .dynamic-form-item {\n        margin-bottom: 1.5rem;\n      }\n\n      ::ng-deep .dynamic-form-item-description {\n        margin-bottom: 0.5rem;\n      }\n    "
            ],
            "templateUrl": [
                "./dynamic-form-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "checkboxTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "ExtendedFormControl | ExtendedFormArray"
                },
                {
                    "name": "datePickerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "disclaimerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "dropdownTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "itemCustomClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "numberTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "ExtendedFormGroup | ExtendedFormGroup[]"
                },
                {
                    "name": "radioTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "savedFormData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "literal type[]"
                },
                {
                    "name": "sectionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean"
                },
                {
                    "name": "textAreaTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "TemplateRef<any>"
                },
                {
                    "name": "toggleSelectorTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "TemplateRef<any>"
                }
            ],
            "outputsClass": [
                {
                    "name": "controlValueChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "createFormGroup",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "itemAddedClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "itemRemovedClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter<literal type>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "defaultValue": "DynamicFormType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "methodsClass": [
                {
                    "name": "makeId",
                    "args": [
                        {
                            "name": "info",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "info",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setRules",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output, OnInit, TemplateRef } from '@angular/core';\nimport { ExtendedFormControl } from '../model/custom-classes/extended-form-control';\nimport { ExtendedFormArray } from '../model/custom-classes/extended-form-array';\nimport { DynamicFormType } from '../model/dynamicFormType';\nimport { isEmpty } from '@sebgroup/frontend-tools';\nimport { RuleType, Rule } from '../model/models';\nimport { FormService } from '../form.service';\nimport { ExtendedFormGroup, ExtendedFormGroupControl } from '../model/custom-classes/extended-form-group';\nimport { ValidatorFn } from '@angular/forms';\nimport { formatNumber } from '@angular/common';\n\n@Component({\n  selector: 'app-dynamic-form-item',\n  templateUrl: './dynamic-form-item.component.html',\n  styles: [\n    `\n      ::ng-deep .dynamic-form-item {\n        margin-bottom: 1.5rem;\n      }\n\n      ::ng-deep .dynamic-form-item-description {\n        margin-bottom: 0.5rem;\n      }\n    `,\n  ],\n})\nexport class DynamicFormItemComponent implements OnInit {\n  @Input() control: ExtendedFormControl | ExtendedFormArray;\n  @Input() parentFormGroup: ExtendedFormGroup | ExtendedFormGroup[];\n  @Input() sectionId: string;\n  @Input() itemCustomClass: string = '';\n  @Input() submitted: boolean = false;\n  // used to compare current rules with saved data\n  @Input() savedFormData: { key: string; value: string | number | boolean }[];\n  @Input() itemTemplate: TemplateRef<any>;\n  @Input() textAreaTemplate: TemplateRef<any>;\n  @Input() numberTemplate: TemplateRef<any>;\n  @Input() checkboxTemplate: TemplateRef<any>;\n  @Input() dropdownTemplate: TemplateRef<any>;\n  @Input() datePickerTemplate: TemplateRef<any>;\n  @Input() radioTemplate: TemplateRef<any>;\n  @Input() toggleSelectorTemplate: TemplateRef<any>;\n  @Input() cardTemplate: TemplateRef<any>;\n  @Input() disclaimerTemplate: TemplateRef<any>;\n  @Output() createFormGroup: EventEmitter<any> = new EventEmitter();\n  @Output() itemAddedClicked: EventEmitter<string> = new EventEmitter();\n  @Output() itemRemovedClicked: EventEmitter<{\n    id: string;\n    index: number;\n  }> = new EventEmitter();\n  @Output() controlValueChanged: EventEmitter<boolean> = new EventEmitter();\n  controlType = DynamicFormType;\n\n  constructor(private formService: FormService) {}\n\n  ngOnInit(): void {\n    this.control && this.setRules();\n    this.control.valueChanges?.subscribe((valueChange: any) => {\n      this.controlValueChanged.emit(true);\n      if (valueChange?.followUpItems?.items?.length) {\n        if (valueChange.followUpItems.type === 'modal') {\n          delete (this.control as ExtendedFormControl).formGroup;\n          this.createFormGroup.emit({\n            items: valueChange?.followUpItems?.items,\n            key: this.control.formItem.key,\n          });\n        } else {\n          (this.control as ExtendedFormControl).formGroup = this.formService.dynamicFormItemsToFormGroup(\n            valueChange?.followUpItems?.items\n          );\n        }\n      } else {\n        delete (this.control as ExtendedFormControl).formGroup;\n      }\n      console.log(this.control)\n    });\n  }\n\n  setRules(): void {\n    let validator: ValidatorFn[];\n\n    const rule = this.control?.formItem?.rules?.find(\n      (rule: Rule) =>\n        rule.type === RuleType.minThanReference ||\n        rule.type === RuleType.minThanEqualsReference ||\n        rule.type === RuleType.maxThanReference ||\n        rule.type === RuleType.maxThanEqualReference\n    );\n    if (rule) {\n      \n      if (this.savedFormData.length) {\n        const referenceValue: { key: string; value: string | number | boolean } = this.savedFormData.find(\n          (savedData: { key: string; value: string | number | boolean }) => savedData.key === rule.value\n        );\n        if (referenceValue) {\n          ({ validator } = this.formService.appendValidations(rule, null, referenceValue));\n        }\n      } else if (this.formService.findNestedControl(this.parentFormGroup, rule.value)) {\n        const referenceControl: ExtendedFormGroupControl = this.formService.findNestedControl(\n          this.parentFormGroup,\n          rule.value\n        );\n        ({ validator } = this.formService.appendValidations(rule, referenceControl));\n      }\n      validator && this.control.setValidators([this.control.validator, ...validator]);\n      this.control.updateValueAndValidity();\n    }\n  }\n\n  get formArrayControls(): ExtendedFormArray['controls'] {\n    if (this.control instanceof ExtendedFormArray) {\n      return this.control.controls;\n    } else {\n      console.warn('Error in getFormArrayControls: control is not an instance of ExtendedFormArray');\n      return [];\n    }\n  }\n\n  get error(): string {\n    if (this.submitted) {\n      if (this.control?.errors && !isEmpty(this.control.errors)) {\n        const errorObjKey: string = Object.keys(this.control.errors)[0];\n        switch (errorObjKey) {\n          case 'min':\n            return this.control.formItem.rules.find(\n              (rule: Rule) =>\n                rule.type === RuleType.min ||\n                rule.type === RuleType.minThanEqualsReference ||\n                rule.type === RuleType.minThanReference\n            )?.message + ` ${this.control.errors?.min?.min ? formatNumber(this.control.errors?.min?.min, 'se') : ''}`;\n          case 'max':\n            return this.control.formItem.rules.find(\n              (rule: Rule) =>\n                rule.type === RuleType.max ||\n                rule.type === RuleType.maxThanEqualReference ||\n                rule.type === RuleType.maxThanReference\n            )?.message + ` ${this.control.errors?.max?.max ? formatNumber(this.control.errors?.max?.max, 'se') : ''}`;\n          case 'minlength':\n            return this.control.formItem.rules.find((rule: Rule) => rule.type === RuleType.minLength)?.message;\n          case 'maxlength':\n            return this.control.formItem.rules.find((rule: Rule) => rule.type === RuleType.maxLength)?.message;\n          case 'required':\n            return this.control.formItem.rules.find((rule: Rule) => rule.type === RuleType.required)?.message;\n          default:\n            break;\n        }\n      } else {\n        this.control && this.setRules();\n      }\n    }\n  }\n\n  makeId(info?: string, index?: number): string {\n    return `${this.sectionId}-${this.control.formItem.key}-${this.control.formItem.controlType}${\n      info ? `-${info}` : '' + index ? `-${index}` : ''\n    }`;\n  }\n\n  get hasTemplate(): boolean {\n    switch (this.control?.formItem.controlType) {\n      case this.controlType.TextArea:\n        return !!this.textAreaTemplate;\n      case this.controlType.Number:\n        return !!this.numberTemplate;\n      case this.controlType.Checkbox:\n        return !!this.checkboxTemplate;\n      case this.controlType.Dropdown:\n        return !!this.dropdownTemplate;\n      case this.controlType.Datepicker:\n        return !!this.datePickerTemplate;\n      case this.controlType.Card:\n        return !!this.cardTemplate;\n      case this.controlType.Radio:\n        return !!this.radioTemplate;\n      case this.controlType.Disclaimer:\n        return !!this.disclaimerTemplate;\n      default:\n        return false;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      ::ng-deep .dynamic-form-item {\n        margin-bottom: 1.5rem;\n      }\n\n      ::ng-deep .dynamic-form-item-description {\n        margin-bottom: 0.5rem;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formArrayControls": {
                    "name": "formArrayControls",
                    "getSignature": {
                        "name": "formArrayControls",
                        "type": "",
                        "returnType": "",
                        "line": 110
                    }
                },
                "error": {
                    "name": "error",
                    "getSignature": {
                        "name": "error",
                        "type": "string",
                        "returnType": "string",
                        "line": 119
                    }
                },
                "hasTemplate": {
                    "name": "hasTemplate",
                    "getSignature": {
                        "name": "hasTemplate",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 159
                    }
                }
            },
            "templateData": "<ng-container [ngSwitch]=\"control.formItem?.controlType\">\n  <ng-container\n    *ngIf=\"itemTemplate; else internalItemTemplate\"\n    [ngTemplateOutlet]=\"itemTemplate\"\n    [ngTemplateOutletContext]=\"{ context: control.formItem }\"\n  ></ng-container>\n\n  <div *ngIf=\"!hasTemplate\" class=\"item-wrapper\" [ngClass]=\"itemCustomClass\">\n    <ng-container\n      [ngTemplateOutlet]=\"metadata\"\n      [ngTemplateOutletContext]=\"{\n        context: control.formItem.controlMetaData\n      }\"\n    ></ng-container>\n    <ng-container *ngSwitchCase=\"controlType.Text.toString()\">\n      <sebng-textbox\n        *ngIf=\"!control.formItem.multi; else multi\"\n        [id]=\"makeId()\"\n        className=\"dynamic-form-item\"\n        [name]=\"makeId()\"\n        [placeholder]=\"control.formItem.placeholder\"\n        [formControl]=\"control\"\n        [rightText]=\"control.formItem?.controlMetaData?.inputGroupLabel\"\n        [error]=\"error\"\n      >\n      </sebng-textbox>\n\n      <ng-template #multi>\n        <div *ngFor=\"let arrayControl of formArrayControls; let i = index\">\n          <div class=\"input-group dynamic-form-item\">\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              [id]=\"makeId(null, i)\"\n              [formControl]=\"arrayControl\"\n              [placeholder]=\"\n                control.formItem.placeholder ? control.formItem.placeholder : ''\n              \"\n            />\n            <div\n              *ngIf=\"formArrayControls?.length > 1\"\n              class=\"input-group-append\"\n            >\n              <button\n                [id]=\"makeId('multitextbox-remove', i)\"\n                class=\"btn btn-outline-danger\"\n                type=\"button\"\n                (click)=\"\n                  itemRemovedClicked.emit({\n                    id: control.formItem.key,\n                    index: i\n                  })\n                \"\n              >\n                –\n              </button>\n            </div>\n          </div>\n        </div>\n        <button\n          [id]=\"makeId('multitextbox-add')\"\n          class=\"btn btn-outline-primary\"\n          type=\"button\"\n          (click)=\"itemAddedClicked.emit(control.formItem.key)\"\n        >\n          +\n        </button>\n      </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.TextArea.toString()\">\n      <sebng-textarea\n        className=\"dynamic-form-item\"\n        [id]=\"makeId()\"\n        [placeholder]=\"control.formItem.placeholder\"\n        [formControl]=\"control\"\n        [error]=\"error\"\n      ></sebng-textarea>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Number?.toString()\">\n      <sebng-textbox\n        className=\"dynamic-form-item\"\n        pattern=\"[0-9]*\"\n        inputmode=\"numeric\"\n        type=\"text\"\n        digitsOnly\n        [rightText]=\"control.formItem?.controlMetaData?.inputGroupLabel\"\n        [formControl]=\"control\"\n        [error]=\"error\"\n      ></sebng-textbox>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Checkbox.toString()\">\n      <sebng-checkbox\n        [formControl]=\"control\"\n        [id]=\"makeId()\"\n        [label]=\"control.formItem.label\"\n        [description]=\"control.formItem.description\"\n        [error]=\"error\"\n      ></sebng-checkbox>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Dropdown.toString()\">\n      <sebng-dropdown\n        className=\"dynamic-form-item\"\n        [formControl]=\"control\"\n        [id]=\"makeId()\"\n        [searchable]=\"true\"\n        [multi]=\"control.formItem.multi\"\n        [placeholder]=\"control.formItem.placeholder\"\n        [list]=\"control.formItem.options\"\n        [error]=\"error\"\n      ></sebng-dropdown>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Datepicker.toString()\">\n      <sebng-datepicker\n        className=\"dynamic-form-item\"\n        [formControl]=\"control\"\n        [id]=\"makeId()\"\n        [placeholder]=\"control.formItem.placeholder || 'yyyy-mm-dd'\"\n        [error]=\"error\"\n      ></sebng-datepicker>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Radio.toString()\">\n      <sebng-radio-group\n        *ngIf=\"!radioTemplate\"\n        className=\"dynamic-form-item\"\n        [condensed]=\"true\"\n        [inline]=\"true\"\n        [formControl]=\"control\"\n        [id]=\"makeId()\"\n        [list]=\"control.formItem.options\"\n        [error]=\"error\"\n      ></sebng-radio-group>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.ToggleSelector.toString()\">\n      <sebng-toggle-selector\n        class=\"d-flex\"\n        [formControl]=\"control\"\n        [list]=\"control.formItem.options\"\n        [error]=\"!!error\"\n        [errorMessage]=\"error\"\n      ></sebng-toggle-selector>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Card.toString()\">\n      <sebng-toggle-selector\n        [formControl]=\"control\"\n        [list]=\"control.formItem.options\"\n        [error]=\"!!error\"\n        [errorMessage]=\"error\"\n      ></sebng-toggle-selector>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Disclaimer.toString()\">\n    </ng-container>\n  </div>\n\n  <ng-container *ngIf=\"hasTemplate\">\n    <ng-container\n      *ngSwitchCase=\"controlType.TextArea.toString()\"\n      [ngTemplateOutlet]=\"textAreaTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Number.toString()\"\n      [ngTemplateOutlet]=\"numberTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Checkbox.toString()\"\n      [ngTemplateOutlet]=\"checkboxTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Dropdown.toString()\"\n      [ngTemplateOutlet]=\"dropdownTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Datepicker.toString()\"\n      [ngTemplateOutlet]=\"datePickerTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Radio.toString()\"\n      [ngTemplateOutlet]=\"radioTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.ToggleSelector.toString()\"\n      [ngTemplateOutlet]=\"toggleSelectorTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Card.toString()\"\n      [ngTemplateOutlet]=\"cardTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Disclaimer.toString()\"\n      [ngTemplateOutlet]=\"disclaimerTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template let-context=\"context\" #metadata>\n  <span class=\"d-block font-weight-medium\" *ngIf=\"context?.description\">{{\n    context.description\n  }}</span>\n  <span class=\"d-block\" *ngIf=\"context?.label\">{{ context.label }}</span>\n</ng-template>\n\n<ng-template let-context=\"context\" #internalItemTemplate>\n  <label *ngIf=\"context?.label && context?.controlType !== 'Checkbox'\">{{\n    context.label\n  }}</label>\n  <span *ngIf=\"context?.descriptionHeader\">{{\n    context.descriptionHeader\n  }}</span>\n  <p\n    class=\"dynamic-form-item-description\"\n    *ngIf=\"context?.description && context?.controlType !== 'Checkbox'\"\n  >\n    <small>{{ context.description }}</small>\n  </p>\n</ng-template>\n\n<ng-container [ngTemplateOutlet]=\"metadata\"></ng-container>\n"
        },
        {
            "name": "DynamicFormMediaComponent",
            "id": "component-DynamicFormMediaComponent-a30c72a2c8770d44250765852b92cda7",
            "file": "projects/dynamic-form/src/lib/dynamic-form-media/dynamic-form-media.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-media",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-media.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "media",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Media"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'img'"
                        }
                    ]
                },
                {
                    "name": "imgHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate image height based on the current width, the origin width and the origin height\nheight = currentWidth * naturalHeight / naturalWidth\n",
                    "description": "<p>Calculate image height based on the current width, the origin width and the origin height\nheight = currentWidth * naturalHeight / naturalWidth</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { SafeResourceUrl, SafeUrl } from '@angular/platform-browser';\nimport { Media, MediaKind } from '../model/dynamicFormItem';\n\n@Component({\n  selector: 'app-dynamic-form-media',\n  templateUrl: './dynamic-form-media.component.html',\n})\nexport class DynamicFormMediaComponent {\n  @Input() media: Media;\n  @ViewChild('img') image: ElementRef;\n  imgHeight: number;\n\n  get mediaPath(): SafeResourceUrl | SafeUrl | string | null {\n    if (this.media?.url) {\n      switch (this.media.kind) {\n        case MediaKind.Image:\n          return this.media.url;\n        case MediaKind.Video:\n          return this.media.url;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Calculate image height based on the current width, the origin width and the origin height\n   * height = currentWidth * naturalHeight / naturalWidth\n   */\n  calculateHeight(): void {\n    if (this.image) {\n      this.imgHeight =\n        (this.image.nativeElement.offsetWidth *\n          this.image.nativeElement.naturalHeight) /\n        this.image.nativeElement.naturalWidth;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "mediaPath": {
                    "name": "mediaPath",
                    "getSignature": {
                        "name": "mediaPath",
                        "type": "",
                        "returnType": "SafeResourceUrl | SafeUrl | string | null",
                        "line": 14
                    }
                }
            },
            "templateData": "<ng-container [ngSwitch]=\"media.kind\">\n    <div class=\"media-container\" *ngSwitchCase=\"0\">\n        <img #img [src]=\"mediaPath | safe: 'resourceUrl'\" [alt]=\"media.description\" [height]=\"imgHeight\" (load)=\"calculateHeight()\" />\n    </div>\n    <div class=\"media-container\" *ngSwitchCase=\"1\">\n        <iframe [src]=\"mediaPath | safe: 'resourceUrl'\" allow=\"fullscreen\" frameBorder=\"0\"></iframe>\n    </div>\n    <span *ngIf=\"media?.description && media?.url\">{{ media.description }}</span>\n</ng-container>\n"
        },
        {
            "name": "DynamicFormModalComponent",
            "id": "component-DynamicFormModalComponent-79b2f932f52691f5db0430083641e2d5",
            "file": "projects/dynamic-form/src/lib/dynamic-form-modal/dynamic-form-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-modal",
            "styleUrls": [
                "./dynamic-form-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cancelAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IFormAction"
                },
                {
                    "name": "centered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean"
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "ExtendedFormGroupControl"
                },
                {
                    "name": "controlIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number"
                },
                {
                    "name": "deleteAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "IFormAction"
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ExtendedFormGroup"
                },
                {
                    "name": "modalToggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "position",
                    "defaultValue": "'right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "ModalPosition"
                },
                {
                    "name": "saveAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IFormAction"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ModalSize"
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelControl",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "deleteControl",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "saveControl",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "orderForm",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "controlValueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { KeyValue } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ModalPosition, ModalSize } from '@sebgroup/ng-components';\n\nimport { ExtendedFormControl } from '../model/custom-classes/extended-form-control';\nimport {\n  ExtendedFormGroup,\n  ExtendedFormGroupControl,\n} from '../model/custom-classes/extended-form-group';\nimport { IFormAction } from '../dynamic-form.component';\n\n@Component({\n  selector: 'app-dynamic-form-modal',\n  templateUrl: './dynamic-form-modal.component.html',\n  styleUrls: ['./dynamic-form-modal.component.scss'],\n})\nexport class DynamicFormModalComponent {\n  @Input() control: ExtendedFormGroupControl;\n  @Input() controlIndex: number;\n  @Input() modalToggle: boolean;\n  @Input() form: ExtendedFormGroup;\n  @Input() centered: boolean = false;\n  @Input() position: ModalPosition = 'right';\n  @Input() size: ModalSize;\n  @Input() cancelAction: IFormAction;\n  @Input() saveAction: IFormAction;\n  @Input() deleteAction: IFormAction;\n\n  @Output() saveControl: EventEmitter<any> = new EventEmitter();\n  @Output() cancelControl: EventEmitter<any> = new EventEmitter();\n  @Output() deleteControl: EventEmitter<any> = new EventEmitter();\n\n  submitted: boolean = false;\n\n  dismiss(): void {\n    this.cancelControl.emit(this.control.value);\n  }\n\n  save(): void {\n    this.form.updateValueAndValidity();\n    this.submitted = true;\n    if (this.form.valid) {\n      this.saveControl.emit({ item: this.form, control: this.control.value });\n    }\n  }\n\n  remove(): void {\n    this.deleteControl.emit({\n      form: this.control.value,\n      index: this.controlIndex,\n    });\n  }\n\n  orderForm = (\n    a: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>,\n    b: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>\n  ): number => {\n    if (a.value['sectionItem'] && b.value['sectionItem']) {\n      return (\n        (a.value as ExtendedFormGroup).sectionItem.order -\n        (b.value as ExtendedFormGroup).sectionItem.order\n      );\n    } else if (a.value['formItem'] && b.value['formItem']) {\n      return (\n        (a.value as ExtendedFormControl).formItem.order -\n        (b.value as ExtendedFormControl).formItem.order\n      );\n    }\n    return 0;\n  };\n\n  controlValueChanged(): void {\n    this.submitted &&= false;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".actions {\n  display: flex;\n  flex-direction: row;\n  padding: 0.5rem 0 2rem;\n  column-gap: 1rem;\n}\n",
                    "styleUrl": "./dynamic-form-modal.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<sebng-modal [toggle]=\"modalToggle\" [centered]=\"centered\" [position]=\"position\" [size]=\"size\" (dismiss)=\"dismiss()\">\n  <ng-container header>\n    <h3 class=\"p-3\">{{ control?.value?.value?.followUpItems?.title }}</h3>\n  </ng-container>\n  <ng-container body>\n    <p>{{ control?.value?.value?.followUpItems?.description }}</p>\n\n    <div *ngFor=\"let control of form.controls | keyvalue: orderForm\">\n      \n      <div *ngFor=\"let item of control.value.controls | keyvalue: orderForm\">\n        <ng-container *ngIf=\"item.value.formItem; else controlWrapper\">\n          <app-dynamic-form-item\n            [control]=\"item.value\"\n            [submitted]=\"submitted\"\n            (controlValueChanged)=\"controlValueChanged()\"\n          ></app-dynamic-form-item>\n        </ng-container>\n        <ng-template #controlWrapper>\n          <ng-container *ngFor=\"let key of item.value.controls | objectKeys\">\n            <app-dynamic-form-item\n              [control]=\"item.value.controls[key]\"\n              [submitted]=\"submitted\"\n              (controlValueChanged)=\"controlValueChanged()\"\n            ></app-dynamic-form-item>\n          </ng-container>\n        </ng-template>\n      </div>\n    </div>\n    <div class=\"actions\">\n      <sebng-button\n        *ngIf=\"controlIndex !== null\"\n        theme=\"outline-danger\"\n        className=\"border-transparent\"\n        class=\"remove-action\"\n        (click)=\"remove()\"\n      >\n        {{ deleteAction.label }}\n      </sebng-button>\n      <sebng-button theme=\"outline-primary\" class=\"cancel-action\" (click)=\"dismiss()\">\n        {{ cancelAction?.label }}\n      </sebng-button>\n      <sebng-button theme=\"primary\" class=\"save-action\" (click)=\"save()\">\n        {{ saveAction.label }}\n      </sebng-button>\n    </div>\n  </ng-container>\n</sebng-modal>\n"
        }
    ],
    "modules": [
        {
            "name": "DigitOnlyModule",
            "id": "module-DigitOnlyModule-987a545876aca56dcaffc3cba2fda4c3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/dynamic-form/src/lib/digit-only/digit-only.directive.ts",
            "methods": [],
            "sourceCode": "import { Directive, ElementRef, HostListener, NgModule, AfterViewInit, Input, AfterViewChecked, ChangeDetectorRef } from \"@angular/core\";\nimport { formatNumber } from \"@angular/common\";\nimport { ExtendedFormControl } from \"../model/custom-classes/extended-form-control\";\n\n@Directive({\n    selector: \"[digitsOnly]\",\n})\nexport class DigitOnlyDirective implements AfterViewInit, AfterViewChecked {\n    inputElement: HTMLInputElement;\n    element: ElementRef;\n    @Input() formControl: ExtendedFormControl;\n\n    constructor(public el: ElementRef, private cd: ChangeDetectorRef) {\n        this.element = el;\n    }\n\n    ngAfterViewInit(): void {\n        this.inputElement = this.element.nativeElement.querySelector(\"input\");\n    }\n\n    ngAfterViewChecked(): void {\n        const { formattedValue } = this.formatValue();\n        this.inputElement.value = formattedValue;\n    }\n\n    @HostListener(\"input\", [\"$event\"])\n    onInputChange(event: Event) {\n        const { initialValue, value, formattedValue } = this.formatValue();\n        if (initialValue !== this.inputElement.value) {\n            event?.stopPropagation();\n        }\n        this.formControl.patchValue(value);\n        this.inputElement.value = formattedValue;\n        this.cd.detectChanges();\n    }\n\n    formatValue(): { initialValue: string; value: string; formattedValue: string } {\n        const initialValue: string = this.inputElement.value;\n        const value: string = initialValue\n            .split(/[.,]/)[0]\n            .replace(/[^0-9]*/g, \"\")\n            .replace(/^0+(?!\\.|$)/, \"\");\n        const formattedValue: string = value ? formatNumber(Number(value), \"se\") : value;\n        return {\n            initialValue,\n            value,\n            formattedValue,\n        };\n    }\n}\n\n@NgModule({\n    declarations: [DigitOnlyDirective],\n    exports: [DigitOnlyDirective],\n})\nexport class DigitOnlyModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DigitOnlyDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DigitOnlyDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DynamicFormModule",
            "id": "module-DynamicFormModule-c827f35435575ce52081848940dcceef",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/dynamic-form/src/lib/dynamic-form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule, registerLocaleData } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CheckboxModule,\n  RadioGroupModule,\n  TextboxModule,\n  DatepickerModule,\n  DropdownModule,\n  StepperModule,\n  TextareaModule,\n  ModalModule,\n  ToggleSelectorModule,\n  VideoModule,\n  ButtonModule,\n} from '@sebgroup/ng-components';\nimport { DynamicFormComponent } from './dynamic-form.component';\nimport { DynamicFormItemComponent } from './dynamic-form-item/dynamic-form-item.component';\nimport { DynamicFormModalComponent } from './dynamic-form-modal/dynamic-form-modal.component';\nimport { DynamicFormDataComponent } from './dynamic-from-data/dynamic-form-data.component';\nimport { DynamicFormMediaComponent } from './dynamic-form-media/dynamic-form-media.component';\nimport { SafePipeModule } from './safe.pipe';\nimport { DigitOnlyModule } from './digit-only/digit-only.directive';\nimport localeSe from '@angular/common/locales/se';\nimport { DynamicFormConfirmationComponent } from './dynamic-form-confirmation/dynamic-form-confirmation.component';\nimport { ObjectKeysPipe } from './object-keys.pipe';\n\nregisterLocaleData(localeSe);\n\n@NgModule({\n  declarations: [\n    DynamicFormComponent,\n    DynamicFormItemComponent,\n    DynamicFormModalComponent,\n    DynamicFormDataComponent,\n    DynamicFormMediaComponent,\n    DynamicFormConfirmationComponent,\n    ObjectKeysPipe,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    DropdownModule,\n    CheckboxModule,\n    RadioGroupModule,\n    TextboxModule,\n    TextareaModule,\n    DatepickerModule,\n    StepperModule,\n    ModalModule,\n    ToggleSelectorModule,\n    VideoModule,\n    ButtonModule,\n    SafePipeModule,\n    DigitOnlyModule,\n  ],\n  exports: [\n    // COMPONENTS\n    DynamicFormComponent,\n    DynamicFormItemComponent,\n    DynamicFormModalComponent,\n    DynamicFormDataComponent,\n    DynamicFormMediaComponent,\n    DynamicFormConfirmationComponent,\n    // MODULES\n    DropdownModule,\n    CheckboxModule,\n    RadioGroupModule,\n    TextareaModule,\n    DatepickerModule,\n    StepperModule,\n    ModalModule,\n    ToggleSelectorModule,\n    VideoModule,\n    ButtonModule,\n    DigitOnlyModule,\n  ],\n  bootstrap: [DynamicFormItemComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class DynamicFormModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DynamicFormComponent"
                        },
                        {
                            "name": "DynamicFormConfirmationComponent"
                        },
                        {
                            "name": "DynamicFormDataComponent"
                        },
                        {
                            "name": "DynamicFormItemComponent"
                        },
                        {
                            "name": "DynamicFormMediaComponent"
                        },
                        {
                            "name": "DynamicFormModalComponent"
                        },
                        {
                            "name": "ObjectKeysPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DigitOnlyModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DigitOnlyModule"
                        },
                        {
                            "name": "DynamicFormComponent"
                        },
                        {
                            "name": "DynamicFormConfirmationComponent"
                        },
                        {
                            "name": "DynamicFormDataComponent"
                        },
                        {
                            "name": "DynamicFormItemComponent"
                        },
                        {
                            "name": "DynamicFormMediaComponent"
                        },
                        {
                            "name": "DynamicFormModalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "DynamicFormItemComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SafePipeModule",
            "id": "module-SafePipeModule-7c7c92cd02de52299f1f40086b1a62d5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/dynamic-form/src/lib/safe.pipe.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Pipe, PipeTransform } from \"@angular/core\";\nimport { DomSanitizer, SafeHtml, SafeStyle, SafeScript, SafeUrl, SafeResourceUrl } from \"@angular/platform-browser\";\n\n@Pipe({\n    name: \"safe\",\n})\nexport class SafePipe implements PipeTransform {\n    constructor(protected sanitizer: DomSanitizer) {}\n\n    public transform(value: any, type: string): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\n        switch (type) {\n            case \"html\":\n                return this.sanitizer.bypassSecurityTrustHtml(value);\n            case \"style\":\n                return this.sanitizer.bypassSecurityTrustStyle(value);\n            case \"script\":\n                return this.sanitizer.bypassSecurityTrustScript(value);\n            case \"url\":\n                return this.sanitizer.bypassSecurityTrustUrl(value);\n            case \"resourceUrl\":\n                return this.sanitizer.bypassSecurityTrustResourceUrl(value);\n            default:\n                throw new Error(`Invalid safe type specified: ${type}`);\n        }\n    }\n}\n\n@NgModule({\n    declarations: [SafePipe],\n    exports: [SafePipe],\n})\nexport class SafePipeModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "acqFormData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 'd0be9c91-3211-40a1-84a1-903133b07d7a',\n    name: 'Hög eller låg risk',\n    text:\n      'Hur tänker du om risk och möjlighet till avkastning när det gäller ditt pensionssparande?',\n    description:\n      'Att pensionsspara med högre risk innebär att sparandet har bättre möjligheter att växa, men att värdet kan gå mycket upp och ner fram tills du går i pension. Det finns också en risk att sparandet sjunker i värde.Med lägre risk svänger värdet på sparandet mindre, men du har inte möjlighet till samma avkastning som när du sparar med högre risk. Däremot minskar risken för att sparandet ska sjunka mycket i värde. ',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: 'c2999eba-8d4c-4649-965c-7aacaa9960d0',\n        url: 'https://seb-external.creo.se/i/tgO5DeWBQSjGfaUrPcZyxA',\n        kind: 1,\n        mimeType: null,\n        name: null,\n        description: 'Så kan du tänka om risk (01:39)',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '116469b6-afed-42ff-b697-efecb594ab08',\n        text:\n          'Jag vill få möjlighet till högre pension, även om det innebär högre risk',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: 'fcda0671-bd08-4349-b20a-e13cd200e499',\n        text:\n          'Jag vill att sparandet får möjlighet att växa, men risken får inte vara för hög',\n        reasonLabel: null,\n        category: '',\n        value: null,\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '8a4c0290-608b-4af7-b1a9-af3d7b1d6a57',\n        text:\n          'Jag vill att risken är låg, även om sparandet får sämre möjlighet att växa',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 3,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'a8566d0f-0530-4bb8-96b0-534c3f6a4f2c',\n    name: 'Hur hög risk?',\n    text: 'Hur viktig är möjligheten till högre pension?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [],\n    answerAlternatives: [\n      {\n        id: 'cd6f3d73-1656-4395-834d-10d3d5f250b7',\n        text: 'Mycket viktig och jag är beredd på att spara med hög risk',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '310da37d-c86f-4753-964b-77cf5dcc97da',\n        text: 'Viktigt men risken får inte vara för hög',\n        reasonLabel: null,\n        category: '',\n        value: '',\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '98f8bbd3-3f2c-41e3-a2a0-502806108dd4',\n    name: 'Kortsiktig risk',\n    text:\n      'Tänk dig att du idag har ett pensionssparande som är värt 100 000 kronor. Är du bekväm med att ha hög risk i det sparandet?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: '56798cd4-6dda-4416-9f78-3d30dbb789b0',\n        url:\n          '/api/v1/media/56798cd4-6dda-4416-9f78-3d30dbb789b0/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'main',\n        description:\n          'Här ser du hur det sparandet skulle kunna utvecklas på ett år med tre olika risknivåer. Den markerade raden visar det spann som tror att sparandet skulle hamna inom utifrån hur du har svarat hittills.',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '98a2e0ce-e46b-43e1-8593-7d78a6e954a6',\n        text: 'Ja, jag är bekväm med den risknivån',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Type\": 1}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '2cf8ca43-aeee-4fa7-b3d3-1cd7e2e7a365',\n        text: 'Nej, jag vill ha en annan risknivå',\n        reasonLabel: null,\n        category: '',\n        value: null,\n        order: 2,\n        type: 1,\n        configuration:\n          '{  \"Type\": 1,  \"Control\": {    \"Title\": \"-\",    \"Text\": \"-\",    \"Deny\": \"Close\"}}',\n        media: [],\n        rules: [],\n        confirm: {\n          title: 'Ändra dina svar',\n          message:\n            'Om du vill spara med en annan risknivå behöver du gå tillbaka och se över dina svar.',\n          accept: null,\n          deny: 'Stäng',\n        },\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '8096e8ae-8eb8-4008-ba34-b97404043068',\n    name: 'Olika riskstrategier',\n    text:\n      'Tänk dig att du har 3 år kvar till hela din pension har betalats ut och ett pensionssparande på 100 000 kronor. Vilken strategi skulle du vara mest bekväm med för det här pensionssparandet?',\n    description:\n      '{\"Heading\": \"Läs mer om riskstrategierna\",\"Texts\": [{\"Subheading\": \"Vad är en riskstrategi?\",\"Content\": \"När du sparar med SEB Bot Advisor får du en personlig riskstrategi. Riskstrategin kan var vara låg, medellåg, medel, medelhög eller hög. Det är den här strategin som avgör hur hög risken i sparandet blir och hur snabbt risken sänks. Oavsett strategi är risken högre när du har lång tid kvar till sista utbetalningen från sparandet, men sänks gradvis ju äldre du blir. Vilken riskstrategi som vi tillämpar för ditt sparande beror bland annat på hur du svarar på de här frågorna.\",\"Image\": \"high-risk\"},{\"Subheading\": \"Så funkar prognoserna\",\"Content\": \"&lt;p&gt;När vi räknar på hur sparandet kan utvecklas över tid använder vi oss av avancerade beräkningsmodeller. I frågan utgår vi från ett påhittat sparande och visar ett pessimistiskt, ett optimistiskt och ett förväntat värde för tre olika riskstrategier efter ett visst antal år. Vid den tidpunkten tror vi att värdet på sparandet kommer att ligga nära det förväntade värdet, men&lt;/p&gt;&lt;ul&gt;&lt;li&gt;det är 30 procents sannolikt att sparandet utvecklas till det optimistiska värdet eller mer&lt;/li&gt;&lt;li&gt;det är mindre än 5 procents sannolikhet att sparandet utvecklas till det pessimistiska värdet eller mindre.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I exemplen räknar vi med att värdet på sparandet fortsätter att förändras under spartiden.Däremot räknar vi inte med framtida inbetalningar.&lt;/p&gt;\",\"Image\": null}]}',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: '3164e266-039f-4ac1-8b87-31c2a29ba2e9',\n        url:\n          '/api/v1/media/3164e266-039f-4ac1-8b87-31c2a29ba2e9/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'main',\n        description:\n          'I tabellen ser du hur mycket du skulle kunna få utbetalt per månad med olika strategier.',\n      },\n      {\n        id: 'a6f876e3-000c-4c6b-8f19-af8e548f3439',\n        url:\n          '/api/v1/media/a6f876e3-000c-4c6b-8f19-af8e548f3439/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'high-risk',\n        description: '',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '810ef431-5a37-4adb-90a5-6f0e55b259ca',\n        text: 'Jag är bekväm med en strategi med hög risk',\n        reasonLabel: null,\n        category: 'RISK_WILLINGNESS',\n        value: '5',\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '3f4fd955-f855-41b7-8efd-8847ca54c8fd',\n        text: 'Jag är bekväm med en strategi med medelhög risk',\n        reasonLabel: null,\n        category: 'RISK_WILLINGNESS',\n        value: '4',\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'f404a81a-ad83-47cb-aa36-922c3d7cae52',\n    name: 'Hållbart sparande',\n    text: 'Vill du pensionsspara med hållbart fokus?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription:\n      'När vi väljer fonder till ditt sparande letar vi i första hand efter hållbara fonder. Om du dessutom har en hållbar profil prioriterar vi hållbarhet ännu mer. Hållbara fonder tar hänsyn till olika miljömässiga och sociala aspekter när de investerar i företag.',\n    optionType: 1,\n    media: [\n      {\n        id: 'c5f56e2e-e8f9-4944-83db-13913e4785fe',\n        url: 'https://seb-external.creo.se/i/ve6LxUx7pESgXjKOYyRtmg',\n        kind: 1,\n        mimeType: null,\n        name: null,\n        description: 'Så kan du påverka med ditt sparande (01:33)',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: 'd8be6bcc-1ef3-460c-b58d-b68f73ee5a95',\n        text: 'Ja, jag vill spara med hållbart fokus',\n        reasonLabel: '',\n        category: 'SUSTAINABILITY',\n        value: '1',\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '8b1870cd-2587-4549-8f79-88ba46e3cdd7',\n        text: 'Nej, jag vill inte spara med hållbart fokus',\n        reasonLabel: null,\n        category: 'SUSTAINABILITY',\n        value: '0',\n        order: 2,\n        type: 1,\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '001b2885-4960-4a64-835c-48ff20b3f3d7',\n    name: '',\n    text: 'Vi behöver veta mer om din ekonomi',\n    description:\n      'För att vi ska kunna ge råd som passar dig, behöver vi ställa några frågor om din ekonomi. Ju noggrannare du svarar, desto bättre råd kan du få. Det är viktigt att du svarar på alla frågor så att du inte får råd på felaktiga grunder.',\n    subTitle: '',\n    shortDescription: '',\n    optionType: 0,\n    media: [],\n    answerAlternatives: [],\n    groupQuestionItems: [],\n  },\n  {\n    id: '1b856337-9ba7-4186-a56d-a9c145fd851a',\n    name: 'Inkomst',\n    text: 'Hur stor är din månadsinkomst efter skatt?',\n    description: '',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 2,\n    media: [],\n    answerAlternatives: [\n      {\n        id: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\n        text: 'Din lön eller pension efter skatt en genomsnittlig månad',\n        reasonLabel: 'Räkna även med bidrag och provision.',\n        category: 'MONTHLY_INCOME',\n        value: '',\n        order: 1,\n        type: 5,\n        configuration:\n          '{  \"InputType\": \"Number\",  \"IsRequired\": true,  \"Max\": 1000000000,  \"Min\": 1,  \"Version\": \"1.0.0\",  \"Type\": 2,  \"GroupLabel\": \"kr/mån\",  \"ErrorMessage\": \"Fyll i din månadsinkomst\"}',\n        media: [],\n        rules: [\n          {\n            ruleType: 0,\n            value: null,\n            message: 'Fyll i din månadsinkomst',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '1000000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '53532df5-586f-453b-a1a4-d409b6fd4a9b',\n    name: 'Kvar i månaden',\n    text:\n      'Hur mycket brukar du ha kvar efter att du har betalat alla viktiga utgifter?',\n    description:\n      'Räkna också med sådant som är viktigt för dig, till exempel restaurangbesök och sparande till resor.',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 2,\n    media: [],\n    answerAlternatives: [\n      {\n        id: 'a6e8eabd-2f14-4b23-8a6d-8cb40b9f8a14',\n        text: 'Kvar i månaden',\n        reasonLabel: '',\n        category: 'MONTHLY_AMOUNT_LEFT',\n        value: null,\n        order: 1,\n        type: 5,\n        media: [],\n        rules: [\n          {\n            ruleType: 0,\n            value: null,\n            message: 'Fyll i hur mycket du brukar ha kvar i månaden',\n          },\n          {\n            ruleType: 9,\n            value: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '92e1f6fc-d838-4a6f-9da9-38435f9be5ba',\n    name: 'Tillgångar',\n    visibleInTable: false,\n    text:\n      '&lt;p&gt;Lägg till skulder som du har hos eller utanför SEB.&lt;/p&gt;<br>',\n    description: '[]',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 5,\n    media: [],\n    answerAlternatives: [],\n    groupQuestionItems: [\n      {\n        id: 'fb672a39-3c2d-4b66-88c9-4073f0f17399',\n        name: '',\n        visibleInTable: false,\n        text: 'Har du pengar på konton?',\n        description: '[]',\n        subTitle: '',\n        shortDescription: '',\n        optionType: 3,\n        media: [],\n        answerAlternatives: [\n          {\n            id: '087f742b-a641-4cfd-a452-befc1eac8c41',\n            text: 'Ja',\n            reasonLabel: null,\n            category: 'SAVING_AMOUNT',\n            value: null,\n            order: 1,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Pengar på konton\",\\n    \"Description\": \"Räkna även med pengar som du har på konton hos SEB. Om du har ett konto tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: '2c96f951-67de-4f43-9dd0-716bdfe189de',\n                name: 'Pengar på konton',\n                visibleInTable: false,\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: 2,\n                media: [],\n                answerAlternatives: [\n                  {\n                    id: '2150e645-7f56-4cfe-9296-f7ae04e3535e',\n                    text: 'Värde',\n                    reasonLabel: null,\n                    category: 'SAVING_AMOUNT',\n                    value: null,\n                    order: 1,\n                    type: 5,\n                    configuration:\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 1000000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\n                    media: [],\n                    rules: [\n                      {\n                        ruleType: 0,\n                        value: null,\n                        message: 'Fyll i hur mycket du har på konton',\n                      },\n                      {\n                        ruleType: 2,\n                        value: '1',\n                        message:\n                          'Du behöver fylla i ett värde större än eller lika med',\n                      },\n                      {\n                        ruleType: 3,\n                        value: '1000000000',\n                        message: 'Värdet kan inte vara över',\n                      },\n                    ],\n                    confirm: null,\n                    followupQuestions: [],\n                  },\n                ],\n                groupQuestionItems: [],\n              },\n            ],\n          },\n          {\n            id: 'eafff1c7-2aa8-4493-8efd-8148963902da',\n            text: 'Nej',\n            reasonLabel: null,\n            category: 'SAVING_AMOUNT',\n            value: null,\n            order: 2,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"\",\\n    \"Description\": \"\",\\n    \"Label\": \"\"\\n  },\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n      {\n        id: 'f8c4fde2-eb12-44cb-a893-a5a329f5f8c7',\n        name: '',\n        visibleInTable: false,\n        text: 'Äger du fonder eller värdepapper?',\n        description: '[]',\n        subTitle: '',\n        shortDescription: '',\n        optionType: 3,\n        media: [],\n        answerAlternatives: [\n          {\n            id: '312e28ec-dda8-46d2-b70a-e1e4364b5121',\n            text: 'Ja',\n            reasonLabel: null,\n            category: 'SAVING_AMOUNT',\n            value: null,\n            order: 1,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Fonder och värdepapper\",\\n    \"Description\": \"Räkna även med fonder och värdepapper som du har hos SEB. Räkna inte med fonder och värdepapper som är tänkta till pensionen. Om du har sparandet tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: 'a6c1aaeb-b690-4dc8-af4d-2d08d2cc3f94',\n                name: 'Fonder och värdepapper\\n',\n                visibleInTable: false,\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: 2,\n                media: [],\n                answerAlternatives: [\n                  {\n                    id: '9d5bbc90-19d9-40ad-868a-7f79a1de5d63',\n                    text: 'Värde',\n                    reasonLabel: null,\n                    category: 'SAVING_AMOUNT',\n                    value: null,\n                    order: 1,\n                    type: 5,\n                    configuration:\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 1000000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\n                    media: [],\n                    rules: [\n                      {\n                        ruleType: 0,\n                        value: null,\n                        message: 'Fyll i hur mycket du har på konton',\n                      },\n                      {\n                        ruleType: 3,\n                        value: '1000000000',\n                        message: 'Värdet kan inte vara över',\n                      },\n                      {\n                        ruleType: 2,\n                        value: '1',\n                        message:\n                          'Du behöver fylla i ett värde större än eller lika med',\n                      },\n                    ],\n                    confirm: null,\n                    followupQuestions: [],\n                  },\n                ],\n                groupQuestionItems: [],\n              },\n            ],\n          },\n          {\n            id: '1a832dea-c5ab-42bc-8129-2c00adff9b60',\n            text: 'Nej',\n            reasonLabel: null,\n            category: 'SAVING_AMOUNT',\n            value: null,\n            order: 2,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n      {\n        id: '5c1936ff-4ebb-448a-bd24-872d3169c623',\n        name: '',\n        visibleInTable: false,\n        text: 'Äger du någon fastighet?',\n        description: '[]',\n        subTitle: '',\n        shortDescription: '',\n        optionType: 3,\n        media: [],\n        answerAlternatives: [\n          {\n            id: '1024a005-e0ef-4611-bf2c-579fad7dc20f',\n            text: 'Ja',\n            reasonLabel: null,\n            category: 'HOME_VALUE',\n            value: null,\n            order: 1,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Hint\": \"(Bostadsrätt, villa, skog, etc.)\",\\n  \"Modal\": {\\n    \"Title\": \"Fastigheter\",\\n    \"Description\": \"Fyll i värdet på din bostadsrätt, villa, skog eller liknande. Fyll i det sammanlagda värdet om du har flera fastigheter. Om du äger en fastighet tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: 'e712d59b-e881-4449-ad20-52334aa3f35b',\n                name: 'Äger du någon fastighet?',\n                visibleInTable: false,\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: 2,\n                media: [],\n                answerAlternatives: [\n                  {\n                    id: '3ce2dc91-787b-4ab3-86d0-7b9c0bdd1c88',\n                    text: 'Värde',\n                    reasonLabel: null,\n                    category: 'HOME_VALUE',\n                    value: null,\n                    order: 1,\n                    type: 5,\n                    configuration:\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\n                    media: [],\n                    rules: [\n                      {\n                        ruleType: 0,\n                        value: null,\n                        message: 'Fyll i värdet på dina fastigheter',\n                      },\n                      {\n                        ruleType: 3,\n                        value: '100000000',\n                        message: 'Värdet kan inte vara över',\n                      },\n                      {\n                        ruleType: 2,\n                        value: '1',\n                        message:\n                          'Du behöver fylla i ett värde större än eller lika med',\n                      },\n                    ],\n                    confirm: null,\n                    followupQuestions: [],\n                  },\n                ],\n                groupQuestionItems: [],\n              },\n            ],\n          },\n          {\n            id: '3d1061ee-6f00-42cd-b6a6-3661d36c9e33',\n            text: 'Nej',\n            reasonLabel: null,\n            category: 'HOME_VALUE',\n            value: null,\n            order: 2,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i värdet på dina fastigheter\"\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n      {\n        id: 'f60f7eed-194d-48af-9707-5be418e73952',\n        name: '',\n        visibleInTable: false,\n        text: 'Äger du något företag?',\n        description: '[]',\n        subTitle: '',\n        shortDescription: '',\n        optionType: 3,\n        media: [],\n        answerAlternatives: [\n          {\n            id: 'b617407b-576d-43ab-8458-e3a3d13103df',\n            text: 'Ja',\n            reasonLabel: null,\n            category: 'ASSETS_VALUE',\n            value: null,\n            order: 1,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Företag\",\\n    \"Description\": \"Gör en försiktig uppskattning av värdet på ditt företag. Fyll i det sammanlagda värdet om du har flera företag. Om du äger ett företag tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: '8b41e306-b493-467d-bd66-8ee93660bd5d',\n                name: 'Äger du något företag?',\n                visibleInTable: false,\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: 2,\n                media: [],\n                answerAlternatives: [\n                  {\n                    id: '8cc40776-82ae-44d8-a213-c244b84e31c4',\n                    text: 'Värde',\n                    reasonLabel: null,\n                    category: 'ASSETS_VALUE',\n                    value: null,\n                    order: 1,\n                    type: 5,\n                    configuration:\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\n                    media: [],\n                    rules: [\n                      { ruleType: 2, value: '1', message: null },\n                      { ruleType: 3, value: '100000000', message: null },\n                      {\n                        ruleType: 0,\n                        value: null,\n                        message:\n                          'Fyll i hur mycket du brukar ha kvar i månaden',\n                      },\n                    ],\n                    confirm: null,\n                    followupQuestions: [],\n                  },\n                ],\n                groupQuestionItems: [],\n              },\n            ],\n          },\n          {\n            id: '82a6f7c9-90fd-47fc-abe5-9cb018912274',\n            text: 'Nej',\n            reasonLabel: null,\n            category: 'ASSETS_VALUE',\n            value: null,\n            order: 2,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i värdet på dina fastigheter\"\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n      {\n        id: '8492212e-e37c-4c9d-bdf4-c884cf3ad2b6',\n        name: '',\n        visibleInTable: false,\n        text: 'Har du andra tillgångar?',\n        description: '[]',\n        subTitle: '',\n        shortDescription: '',\n        optionType: 3,\n        media: [],\n        answerAlternatives: [\n          {\n            id: 'cbb8d3e4-22bd-4b0e-9703-3375e1ebb1a6',\n            text: 'Ja',\n            reasonLabel: null,\n            category: 'ASSETS_VALUE',\n            value: null,\n            order: 1,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Andra tillgångar\",\\n    \"Description\": \"Om du har en tillgång tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: 'd328ecad-2756-4f3a-9040-26235994e51c',\n                name: 'Andra tillgångar',\n                visibleInTable: false,\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: 2,\n                media: [],\n                answerAlternatives: [\n                  {\n                    id: '097a6001-d895-42b1-92bb-4a991aaf6fc5',\n                    text: 'Värde',\n                    reasonLabel: null,\n                    category: 'ASSETS_VALUE',\n                    value: null,\n                    order: 1,\n                    type: 5,\n                    configuration:\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\n                    media: [],\n                    rules: [\n                      {\n                        ruleType: 0,\n                        value: null,\n                        message: 'Fyll i värdet på dina andra tillgångar',\n                      },\n                      {\n                        ruleType: 3,\n                        value: '100000000',\n                        message: 'Värdet kan inte vara över',\n                      },\n                      {\n                        ruleType: 2,\n                        value: '1',\n                        message:\n                          'Du behöver fylla i ett värde större än eller lika med',\n                      },\n                    ],\n                    confirm: null,\n                    followupQuestions: [],\n                  },\n                ],\n                groupQuestionItems: [],\n              },\n            ],\n          },\n          {\n            id: 'b69ba899-df22-42b4-a74a-4601afa75ffa',\n            text: 'Nej',\n            reasonLabel: null,\n            category: 'ASSETS_VALUE',\n            value: null,\n            order: 2,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n      {\n        id: '3ad4a393-09ad-4eae-b910-c3ce84935b00',\n        name: null,\n        text: 'Are you on mediciation',\n        description: 'Are you sick',\n        subTitle: '',\n        shortDescription: '',\n        optionType: QuestionOptionType.Radio,\n        media: [],\n        answerAlternatives: [\n          {\n            id: '18edeccd-f19b-437d-aa76-4e1e37da72f0',\n            text: 'yes',\n            reasonLabel: null,\n            category: null,\n            value: null,\n            order: 1,\n            type: ComponentType.RadioTextBox,\n            configuration:\n              '{\"Modal\":{\"Title\": \"What Medicine you take\", \"Description\": \"please tell us what medicine you take and how much does it cost\"}}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: 'bd620ae8-ccf1-46c4-842d-ef3bd26491e7',\n                name: 'Medicine Table',\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: QuestionOptionType.Table,\n                media: [],\n                answerAlternatives: [],\n                groupQuestionItems: [\n                  {\n                    id: '8d8e60ed-ddc0-4864-a302-4c7e01239d03',\n                    name: 'Medicine Name',\n                    text: '&nbsp;',\n                    description: '[]',\n                    subTitle: '',\n                    shortDescription: '',\n                    optionType: QuestionOptionType.Input,\n                    media: [],\n                    answerAlternatives: [\n                      {\n                        id: '21be4801-e7bf-4b83-a66c-c84a4e770449',\n                        text: 'Medicine Name',\n                        reasonLabel: null,\n                        category: null,\n                        value: null,\n                        order: 1,\n                        type: ComponentType.Text,\n                        configuration:\n                          '{\\n  \"InputType\": \"Text\",\\n  \"IsRequired\": true,\\n  \"Type\": 2\\n}',\n                        media: [],\n                        rules: [\n                          {\n                            ruleType: RuleType.required,\n                            value: null,\n                            message: 'medicine name is required',\n                          },\n                        ],\n                        confirm: null,\n                        followupQuestions: [],\n                      },\n                    ],\n                    groupQuestionItems: [],\n                  },\n                  {\n                    id: 'd03c8d5e-ba30-41a6-b836-0f7d3f69f002',\n                    name: 'Medicine Brand',\n                    text: '&nbsp;',\n                    description: '[]',\n                    subTitle: '',\n                    shortDescription: '',\n                    optionType: QuestionOptionType.Input,\n                    media: [],\n                    answerAlternatives: [\n                      {\n                        id: '39779d7e-9d05-4c3b-8683-a1096081aa1a',\n                        text: 'Medicine Brand',\n                        reasonLabel: null,\n                        category: null,\n                        value: null,\n                        order: 1,\n                        type: ComponentType.Text,\n                        configuration:\n                          '{\\n  \"InputType\": \"Text\",\\n  \"IsRequired\": true,\\n  \"Type\": 2\\n}',\n                        media: [],\n                        rules: [\n                          {\n                            ruleType: RuleType.required,\n                            value: null,\n                            message: 'medicine brand is required',\n                          },\n                        ],\n                        confirm: null,\n                        followupQuestions: [],\n                      },\n                    ],\n                    groupQuestionItems: [],\n                  },\n                  {\n                    id: 'ec613a5b-8678-47d2-a68e-c94f56378cf6',\n                    name: 'Medicine Price',\n                    text: '&nbsp;',\n                    description: '[]',\n                    subTitle: '',\n                    shortDescription: '',\n                    optionType: QuestionOptionType.Input,\n                    media: [],\n                    answerAlternatives: [\n                      {\n                        id: '81526ffe-bad8-47e3-b87e-096885131fe2',\n                        text: 'Medicine Price',\n                        reasonLabel: null,\n                        category: null,\n                        value: null,\n                        order: 1,\n                        type: ComponentType.Number,\n                        configuration:\n                          '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Type\": 5\\n}',\n                        media: [],\n                        rules: [\n                          {\n                            ruleType: RuleType.required,\n                            value: null,\n                            message: 'medicine price is required',\n                          },\n                        ],\n                        confirm: null,\n                        followupQuestions: [],\n                      },\n                    ],\n                    groupQuestionItems: [],\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            id: '7999d0b1-d4a4-4bb3-97c4-624b1122c818',\n            text: 'no',\n            reasonLabel: null,\n            category: null,\n            value: null,\n            order: 2,\n            type: ComponentType.RadioTextBox,\n            configuration: '{\\n  \"Type\": 3,\\n  \"Modal\": {}\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n    ],\n  },\n  \n]"
            },
            {
                "name": "AcquisitionForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "attributeTypeMapDynamicFormItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n]"
            },
            {
                "name": "attributeTypeMapDynamicFormOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n]"
            },
            {
                "name": "attributeTypeMapDynamicFormResponseItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"sectionId\", type: \"string\" },\n    { name: \"sectionIndex\", type: \"number\" },\n    { name: \"formItem\", type: \"DynamicFormItem\" },\n]"
            },
            {
                "name": "attributeTypeMapDynamicFormSection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\n  { name: 'title', type: 'string' },\n  { name: 'category', type: 'string' },\n  { name: 'description', type: 'string' },\n  { name: 'className', type: 'string' },\n  { name: 'key', type: 'string' },\n  { name: 'order', type: 'number' },\n  { name: 'multi', type: 'boolean' },\n  { name: 'sectionType', type: 'any' },\n  { name: 'items', type: 'Array<DynamicFormItem>' },\n]"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ComplexForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DynamicFormType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    Text: \"Text\" as DynamicFormType,\n    TextArea: \"TextArea\" as DynamicFormType,\n    Checkbox: \"Checkbox\" as DynamicFormType,\n    Dropdown: \"Dropdown\" as DynamicFormType,\n    Datepicker: \"Datepicker\" as DynamicFormType,\n    Radio: \"Radio\" as DynamicFormType,\n    Number: \"Number\" as DynamicFormType,\n    Card: \"Card\" as DynamicFormType,\n    ToggleSelector: \"ToggleSelector\" as DynamicFormType,\n    Disclaimer: \"Disclaimer\" as DynamicFormType,\n    None: \"None\" as DynamicFormType,\n}"
            },
            {
                "name": "familyFollowup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FollowUpItem",
                "defaultValue": "{\n  type: 'inline',\n  items: [\n    {\n      key: 'partner-birth-date',\n      controlType: 'Datepicker',\n      value: '',\n      controlMetaData: {\n        label: 'Dina partners födelsedatum:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-name',\n      controlType: 'Text',\n      value: '',\n      controlMetaData: {\n        label: 'Din partners för-och efternamn:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'Din partners månadsinkomst:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-more-than-equal',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-more-than-equal',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'more than or equal partner monthly income',\n          type: RuleType.minThanEqualsReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-more-than',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-more-than',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'more than partner monthly income',\n          type: RuleType.minThanReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-less-than',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-less-than',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'less than partner monthly income',\n          type: RuleType.maxThanReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-less-than-equal',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-less-than-equal',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'less than equal partner monthly income',\n          type: RuleType.maxThanEqualReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-radio',\n      controlType: 'Radio',\n      label: '',\n      options: [\n        {\n          id: '1',\n          value: '1',\n          label: 'Före skatt',\n        },\n        {\n          id: '2',\n          value: '2',\n          label: 'Efter skatt',\n        },\n      ],\n    },\n    {\n      key: 'then-maried',\n      controlType: 'Text',\n      label: 'Gift sedan',\n    },\n  ],\n}"
            },
            {
                "name": "FormValidation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "InlineConditionalRendering",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "InlineMultipleRecords",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mapControlType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(controlType: ComponentType): DynamicFormType => {\n  switch (controlType) {\n    case ComponentType.Text:\n      return DynamicFormType.Text;\n    case ComponentType.Number:\n      return DynamicFormType.Number;\n    case ComponentType.CheckBox:\n      return DynamicFormType.Checkbox;\n    case ComponentType.Date:\n      return DynamicFormType.Datepicker;\n    case ComponentType.RadioTextBox:\n      return DynamicFormType.Radio;\n    case ComponentType.Card:\n      return DynamicFormType.Card;\n    case ComponentType.None:\n      return DynamicFormType.None;\n    default:\n      return DynamicFormType.Text;\n  }\n}"
            },
            {
                "name": "mapRules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(rules): Rule[] => {\n  return rules.map((rule) => {\n    switch (rule.ruleType) {\n      case 0:\n      default:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.required,\n        };\n      case 1:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.pattern,\n        };\n      case 2:\n        return { value: rule.value, message: rule.message, type: RuleType.min };\n      case 3:\n        return { value: rule.value, message: rule.message, type: RuleType.max };\n      case 4:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minLength,\n        };\n      case 5:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxLength,\n        };\n      case 6:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minThanReference,\n        };\n      case 7:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minThanEqualsReference,\n        };\n      case 8:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxThanReference,\n        };\n      case 9:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxThanEqualReference,\n        };\n      case 10:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.confirm,\n        };\n    }\n  });\n}"
            },
            {
                "name": "ModalConditionalRendering",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MultipleRecords",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MultiStepForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "parseConfiguration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: string): { [key: string]: any } => {\n  let parsedConfig: { [key: string]: any } = {};\n  if (configuration) {\n    try {\n      parsedConfig = JSON.parse(configuration);\n    } catch (e) {}\n  }\n  return parsedConfig;\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DemoComponent>",
                "defaultValue": "(args: DemoComponent) => ({\n  props: args,\n})"
            }
        ],
        "functions": [
            {
                "name": "mapToDynamicForm",
                "file": "stories/map.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "arr",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "DynamicFormSection[]",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "DynamicFormType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Text\" | \"TextArea\" | \"Checkbox\" | \"Dropdown\" | \"Datepicker\" | \"Radio\" | \"Number\" | \"Card\" | \"ToggleSelector\" | \"Disclaimer\" | \"None\"",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "ExtendedFormGroupControl",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ExtendedFormControl | ExtendedFormArray | ExtendedFormGroup | ExtendedFormGroupArray",
                "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [
            {
                "name": "ComponentType",
                "childs": [
                    {
                        "name": "None",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Card",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Text",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RadioTextBox",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CheckBox",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "stories/map.ts"
            },
            {
                "name": "MediaKind",
                "childs": [
                    {
                        "name": "Image",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Video",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
            },
            {
                "name": "QuestionOptionType",
                "childs": [
                    {
                        "name": "None",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Card",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Input",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Radio",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CheckBox",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Group",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Table",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "stories/map.ts"
            },
            {
                "name": "RuleType",
                "childs": [
                    {
                        "name": "required",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "min",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "minLength",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maxLength",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pattern",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "minThanReference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "minThanEqualsReference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maxThanReference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maxThanEqualReference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirm",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
            }
        ],
        "groupedVariables": {
            "stories/Demo.stories.ts": [
                {
                    "name": "acqFormData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 'd0be9c91-3211-40a1-84a1-903133b07d7a',\n    name: 'Hög eller låg risk',\n    text:\n      'Hur tänker du om risk och möjlighet till avkastning när det gäller ditt pensionssparande?',\n    description:\n      'Att pensionsspara med högre risk innebär att sparandet har bättre möjligheter att växa, men att värdet kan gå mycket upp och ner fram tills du går i pension. Det finns också en risk att sparandet sjunker i värde.Med lägre risk svänger värdet på sparandet mindre, men du har inte möjlighet till samma avkastning som när du sparar med högre risk. Däremot minskar risken för att sparandet ska sjunka mycket i värde. ',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: 'c2999eba-8d4c-4649-965c-7aacaa9960d0',\n        url: 'https://seb-external.creo.se/i/tgO5DeWBQSjGfaUrPcZyxA',\n        kind: 1,\n        mimeType: null,\n        name: null,\n        description: 'Så kan du tänka om risk (01:39)',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '116469b6-afed-42ff-b697-efecb594ab08',\n        text:\n          'Jag vill få möjlighet till högre pension, även om det innebär högre risk',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: 'fcda0671-bd08-4349-b20a-e13cd200e499',\n        text:\n          'Jag vill att sparandet får möjlighet att växa, men risken får inte vara för hög',\n        reasonLabel: null,\n        category: '',\n        value: null,\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '8a4c0290-608b-4af7-b1a9-af3d7b1d6a57',\n        text:\n          'Jag vill att risken är låg, även om sparandet får sämre möjlighet att växa',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 3,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'a8566d0f-0530-4bb8-96b0-534c3f6a4f2c',\n    name: 'Hur hög risk?',\n    text: 'Hur viktig är möjligheten till högre pension?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [],\n    answerAlternatives: [\n      {\n        id: 'cd6f3d73-1656-4395-834d-10d3d5f250b7',\n        text: 'Mycket viktig och jag är beredd på att spara med hög risk',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '310da37d-c86f-4753-964b-77cf5dcc97da',\n        text: 'Viktigt men risken får inte vara för hög',\n        reasonLabel: null,\n        category: '',\n        value: '',\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '98f8bbd3-3f2c-41e3-a2a0-502806108dd4',\n    name: 'Kortsiktig risk',\n    text:\n      'Tänk dig att du idag har ett pensionssparande som är värt 100 000 kronor. Är du bekväm med att ha hög risk i det sparandet?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: '56798cd4-6dda-4416-9f78-3d30dbb789b0',\n        url:\n          '/api/v1/media/56798cd4-6dda-4416-9f78-3d30dbb789b0/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'main',\n        description:\n          'Här ser du hur det sparandet skulle kunna utvecklas på ett år med tre olika risknivåer. Den markerade raden visar det spann som tror att sparandet skulle hamna inom utifrån hur du har svarat hittills.',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '98a2e0ce-e46b-43e1-8593-7d78a6e954a6',\n        text: 'Ja, jag är bekväm med den risknivån',\n        reasonLabel: null,\n        category: null,\n        value: null,\n        order: 1,\n        type: 1,\n        configuration: '{  \"Type\": 1}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '2cf8ca43-aeee-4fa7-b3d3-1cd7e2e7a365',\n        text: 'Nej, jag vill ha en annan risknivå',\n        reasonLabel: null,\n        category: '',\n        value: null,\n        order: 2,\n        type: 1,\n        configuration:\n          '{  \"Type\": 1,  \"Control\": {    \"Title\": \"-\",    \"Text\": \"-\",    \"Deny\": \"Close\"}}',\n        media: [],\n        rules: [],\n        confirm: {\n          title: 'Ändra dina svar',\n          message:\n            'Om du vill spara med en annan risknivå behöver du gå tillbaka och se över dina svar.',\n          accept: null,\n          deny: 'Stäng',\n        },\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '8096e8ae-8eb8-4008-ba34-b97404043068',\n    name: 'Olika riskstrategier',\n    text:\n      'Tänk dig att du har 3 år kvar till hela din pension har betalats ut och ett pensionssparande på 100 000 kronor. Vilken strategi skulle du vara mest bekväm med för det här pensionssparandet?',\n    description:\n      '{\"Heading\": \"Läs mer om riskstrategierna\",\"Texts\": [{\"Subheading\": \"Vad är en riskstrategi?\",\"Content\": \"När du sparar med SEB Bot Advisor får du en personlig riskstrategi. Riskstrategin kan var vara låg, medellåg, medel, medelhög eller hög. Det är den här strategin som avgör hur hög risken i sparandet blir och hur snabbt risken sänks. Oavsett strategi är risken högre när du har lång tid kvar till sista utbetalningen från sparandet, men sänks gradvis ju äldre du blir. Vilken riskstrategi som vi tillämpar för ditt sparande beror bland annat på hur du svarar på de här frågorna.\",\"Image\": \"high-risk\"},{\"Subheading\": \"Så funkar prognoserna\",\"Content\": \"&lt;p&gt;När vi räknar på hur sparandet kan utvecklas över tid använder vi oss av avancerade beräkningsmodeller. I frågan utgår vi från ett påhittat sparande och visar ett pessimistiskt, ett optimistiskt och ett förväntat värde för tre olika riskstrategier efter ett visst antal år. Vid den tidpunkten tror vi att värdet på sparandet kommer att ligga nära det förväntade värdet, men&lt;/p&gt;&lt;ul&gt;&lt;li&gt;det är 30 procents sannolikt att sparandet utvecklas till det optimistiska värdet eller mer&lt;/li&gt;&lt;li&gt;det är mindre än 5 procents sannolikhet att sparandet utvecklas till det pessimistiska värdet eller mindre.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I exemplen räknar vi med att värdet på sparandet fortsätter att förändras under spartiden.Däremot räknar vi inte med framtida inbetalningar.&lt;/p&gt;\",\"Image\": null}]}',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription: '',\n    optionType: 1,\n    media: [\n      {\n        id: '3164e266-039f-4ac1-8b87-31c2a29ba2e9',\n        url:\n          '/api/v1/media/3164e266-039f-4ac1-8b87-31c2a29ba2e9/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'main',\n        description:\n          'I tabellen ser du hur mycket du skulle kunna få utbetalt per månad med olika strategier.',\n      },\n      {\n        id: 'a6f876e3-000c-4c6b-8f19-af8e548f3439',\n        url:\n          '/api/v1/media/a6f876e3-000c-4c6b-8f19-af8e548f3439/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\n        kind: 0,\n        mimeType: 'image/png',\n        name: 'high-risk',\n        description: '',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: '810ef431-5a37-4adb-90a5-6f0e55b259ca',\n        text: 'Jag är bekväm med en strategi med hög risk',\n        reasonLabel: null,\n        category: 'RISK_WILLINGNESS',\n        value: '5',\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '3f4fd955-f855-41b7-8efd-8847ca54c8fd',\n        text: 'Jag är bekväm med en strategi med medelhög risk',\n        reasonLabel: null,\n        category: 'RISK_WILLINGNESS',\n        value: '4',\n        order: 2,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: 'f404a81a-ad83-47cb-aa36-922c3d7cae52',\n    name: 'Hållbart sparande',\n    text: 'Vill du pensionsspara med hållbart fokus?',\n    description: '',\n    subTitle: 'Placeringsrådgivning',\n    shortDescription:\n      'När vi väljer fonder till ditt sparande letar vi i första hand efter hållbara fonder. Om du dessutom har en hållbar profil prioriterar vi hållbarhet ännu mer. Hållbara fonder tar hänsyn till olika miljömässiga och sociala aspekter när de investerar i företag.',\n    optionType: 1,\n    media: [\n      {\n        id: 'c5f56e2e-e8f9-4944-83db-13913e4785fe',\n        url: 'https://seb-external.creo.se/i/ve6LxUx7pESgXjKOYyRtmg',\n        kind: 1,\n        mimeType: null,\n        name: null,\n        description: 'Så kan du påverka med ditt sparande (01:33)',\n      },\n    ],\n    answerAlternatives: [\n      {\n        id: 'd8be6bcc-1ef3-460c-b58d-b68f73ee5a95',\n        text: 'Ja, jag vill spara med hållbart fokus',\n        reasonLabel: '',\n        category: 'SUSTAINABILITY',\n        value: '1',\n        order: 1,\n        type: 1,\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n      {\n        id: '8b1870cd-2587-4549-8f79-88ba46e3cdd7',\n        text: 'Nej, jag vill inte spara med hållbart fokus',\n        reasonLabel: null,\n        category: 'SUSTAINABILITY',\n        value: '0',\n        order: 2,\n        type: 1,\n        media: [],\n        rules: [],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '001b2885-4960-4a64-835c-48ff20b3f3d7',\n    name: '',\n    text: 'Vi behöver veta mer om din ekonomi',\n    description:\n      'För att vi ska kunna ge råd som passar dig, behöver vi ställa några frågor om din ekonomi. Ju noggrannare du svarar, desto bättre råd kan du få. Det är viktigt att du svarar på alla frågor så att du inte får råd på felaktiga grunder.',\n    subTitle: '',\n    shortDescription: '',\n    optionType: 0,\n    media: [],\n    answerAlternatives: [],\n    groupQuestionItems: [],\n  },\n  {\n    id: '1b856337-9ba7-4186-a56d-a9c145fd851a',\n    name: 'Inkomst',\n    text: 'Hur stor är din månadsinkomst efter skatt?',\n    description: '',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 2,\n    media: [],\n    answerAlternatives: [\n      {\n        id: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\n        text: 'Din lön eller pension efter skatt en genomsnittlig månad',\n        reasonLabel: 'Räkna även med bidrag och provision.',\n        category: 'MONTHLY_INCOME',\n        value: '',\n        order: 1,\n        type: 5,\n        configuration:\n          '{  \"InputType\": \"Number\",  \"IsRequired\": true,  \"Max\": 1000000000,  \"Min\": 1,  \"Version\": \"1.0.0\",  \"Type\": 2,  \"GroupLabel\": \"kr/mån\",  \"ErrorMessage\": \"Fyll i din månadsinkomst\"}',\n        media: [],\n        rules: [\n          {\n            ruleType: 0,\n            value: null,\n            message: 'Fyll i din månadsinkomst',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '1000000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '53532df5-586f-453b-a1a4-d409b6fd4a9b',\n    name: 'Kvar i månaden',\n    text:\n      'Hur mycket brukar du ha kvar efter att du har betalat alla viktiga utgifter?',\n    description:\n      'Räkna också med sådant som är viktigt för dig, till exempel restaurangbesök och sparande till resor.',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 2,\n    media: [],\n    answerAlternatives: [\n      {\n        id: 'a6e8eabd-2f14-4b23-8a6d-8cb40b9f8a14',\n        text: 'Kvar i månaden',\n        reasonLabel: '',\n        category: 'MONTHLY_AMOUNT_LEFT',\n        value: null,\n        order: 1,\n        type: 5,\n        media: [],\n        rules: [\n          {\n            ruleType: 0,\n            value: null,\n            message: 'Fyll i hur mycket du brukar ha kvar i månaden',\n          },\n          {\n            ruleType: 9,\n            value: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\n            message: 'Värdet kan inte vara över',\n          },\n          {\n            ruleType: 2,\n            value: '1',\n            message: 'Du behöver fylla i ett värde större än eller lika med',\n          },\n          {\n            ruleType: 3,\n            value: '100000000',\n            message: 'Värdet kan inte vara över',\n          },\n        ],\n        confirm: null,\n        followupQuestions: [],\n      },\n    ],\n    groupQuestionItems: [],\n  },\n  {\n    id: '92e1f6fc-d838-4a6f-9da9-38435f9be5ba',\n    name: 'Tillgångar',\n    visibleInTable: false,\n    text:\n      '&lt;p&gt;Lägg till skulder som du har hos eller utanför SEB.&lt;/p&gt;<br>',\n    description: '[]',\n    subTitle: 'Din ekonomi',\n    shortDescription: '',\n    optionType: 5,\n    media: [],\n    answerAlternatives: [],\n    groupQuestionItems: [\n      {\n        id: 'fb672a39-3c2d-4b66-88c9-4073f0f17399',\n        name: '',\n        visibleInTable: false,\n        text: 'Har du pengar på konton?',\n        description: '[]',\n        subTitle: '',\n        shortDescription: '',\n        optionType: 3,\n        media: [],\n        answerAlternatives: [\n          {\n            id: '087f742b-a641-4cfd-a452-befc1eac8c41',\n            text: 'Ja',\n            reasonLabel: null,\n            category: 'SAVING_AMOUNT',\n            value: null,\n            order: 1,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Pengar på konton\",\\n    \"Description\": \"Räkna även med pengar som du har på konton hos SEB. Om du har ett konto tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: '2c96f951-67de-4f43-9dd0-716bdfe189de',\n                name: 'Pengar på konton',\n                visibleInTable: false,\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: 2,\n                media: [],\n                answerAlternatives: [\n                  {\n                    id: '2150e645-7f56-4cfe-9296-f7ae04e3535e',\n                    text: 'Värde',\n                    reasonLabel: null,\n                    category: 'SAVING_AMOUNT',\n                    value: null,\n                    order: 1,\n                    type: 5,\n                    configuration:\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 1000000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\n                    media: [],\n                    rules: [\n                      {\n                        ruleType: 0,\n                        value: null,\n                        message: 'Fyll i hur mycket du har på konton',\n                      },\n                      {\n                        ruleType: 2,\n                        value: '1',\n                        message:\n                          'Du behöver fylla i ett värde större än eller lika med',\n                      },\n                      {\n                        ruleType: 3,\n                        value: '1000000000',\n                        message: 'Värdet kan inte vara över',\n                      },\n                    ],\n                    confirm: null,\n                    followupQuestions: [],\n                  },\n                ],\n                groupQuestionItems: [],\n              },\n            ],\n          },\n          {\n            id: 'eafff1c7-2aa8-4493-8efd-8148963902da',\n            text: 'Nej',\n            reasonLabel: null,\n            category: 'SAVING_AMOUNT',\n            value: null,\n            order: 2,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"\",\\n    \"Description\": \"\",\\n    \"Label\": \"\"\\n  },\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n      {\n        id: 'f8c4fde2-eb12-44cb-a893-a5a329f5f8c7',\n        name: '',\n        visibleInTable: false,\n        text: 'Äger du fonder eller värdepapper?',\n        description: '[]',\n        subTitle: '',\n        shortDescription: '',\n        optionType: 3,\n        media: [],\n        answerAlternatives: [\n          {\n            id: '312e28ec-dda8-46d2-b70a-e1e4364b5121',\n            text: 'Ja',\n            reasonLabel: null,\n            category: 'SAVING_AMOUNT',\n            value: null,\n            order: 1,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Fonder och värdepapper\",\\n    \"Description\": \"Räkna även med fonder och värdepapper som du har hos SEB. Räkna inte med fonder och värdepapper som är tänkta till pensionen. Om du har sparandet tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: 'a6c1aaeb-b690-4dc8-af4d-2d08d2cc3f94',\n                name: 'Fonder och värdepapper\\n',\n                visibleInTable: false,\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: 2,\n                media: [],\n                answerAlternatives: [\n                  {\n                    id: '9d5bbc90-19d9-40ad-868a-7f79a1de5d63',\n                    text: 'Värde',\n                    reasonLabel: null,\n                    category: 'SAVING_AMOUNT',\n                    value: null,\n                    order: 1,\n                    type: 5,\n                    configuration:\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 1000000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\n                    media: [],\n                    rules: [\n                      {\n                        ruleType: 0,\n                        value: null,\n                        message: 'Fyll i hur mycket du har på konton',\n                      },\n                      {\n                        ruleType: 3,\n                        value: '1000000000',\n                        message: 'Värdet kan inte vara över',\n                      },\n                      {\n                        ruleType: 2,\n                        value: '1',\n                        message:\n                          'Du behöver fylla i ett värde större än eller lika med',\n                      },\n                    ],\n                    confirm: null,\n                    followupQuestions: [],\n                  },\n                ],\n                groupQuestionItems: [],\n              },\n            ],\n          },\n          {\n            id: '1a832dea-c5ab-42bc-8129-2c00adff9b60',\n            text: 'Nej',\n            reasonLabel: null,\n            category: 'SAVING_AMOUNT',\n            value: null,\n            order: 2,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n      {\n        id: '5c1936ff-4ebb-448a-bd24-872d3169c623',\n        name: '',\n        visibleInTable: false,\n        text: 'Äger du någon fastighet?',\n        description: '[]',\n        subTitle: '',\n        shortDescription: '',\n        optionType: 3,\n        media: [],\n        answerAlternatives: [\n          {\n            id: '1024a005-e0ef-4611-bf2c-579fad7dc20f',\n            text: 'Ja',\n            reasonLabel: null,\n            category: 'HOME_VALUE',\n            value: null,\n            order: 1,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Hint\": \"(Bostadsrätt, villa, skog, etc.)\",\\n  \"Modal\": {\\n    \"Title\": \"Fastigheter\",\\n    \"Description\": \"Fyll i värdet på din bostadsrätt, villa, skog eller liknande. Fyll i det sammanlagda värdet om du har flera fastigheter. Om du äger en fastighet tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: 'e712d59b-e881-4449-ad20-52334aa3f35b',\n                name: 'Äger du någon fastighet?',\n                visibleInTable: false,\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: 2,\n                media: [],\n                answerAlternatives: [\n                  {\n                    id: '3ce2dc91-787b-4ab3-86d0-7b9c0bdd1c88',\n                    text: 'Värde',\n                    reasonLabel: null,\n                    category: 'HOME_VALUE',\n                    value: null,\n                    order: 1,\n                    type: 5,\n                    configuration:\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\n                    media: [],\n                    rules: [\n                      {\n                        ruleType: 0,\n                        value: null,\n                        message: 'Fyll i värdet på dina fastigheter',\n                      },\n                      {\n                        ruleType: 3,\n                        value: '100000000',\n                        message: 'Värdet kan inte vara över',\n                      },\n                      {\n                        ruleType: 2,\n                        value: '1',\n                        message:\n                          'Du behöver fylla i ett värde större än eller lika med',\n                      },\n                    ],\n                    confirm: null,\n                    followupQuestions: [],\n                  },\n                ],\n                groupQuestionItems: [],\n              },\n            ],\n          },\n          {\n            id: '3d1061ee-6f00-42cd-b6a6-3661d36c9e33',\n            text: 'Nej',\n            reasonLabel: null,\n            category: 'HOME_VALUE',\n            value: null,\n            order: 2,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i värdet på dina fastigheter\"\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n      {\n        id: 'f60f7eed-194d-48af-9707-5be418e73952',\n        name: '',\n        visibleInTable: false,\n        text: 'Äger du något företag?',\n        description: '[]',\n        subTitle: '',\n        shortDescription: '',\n        optionType: 3,\n        media: [],\n        answerAlternatives: [\n          {\n            id: 'b617407b-576d-43ab-8458-e3a3d13103df',\n            text: 'Ja',\n            reasonLabel: null,\n            category: 'ASSETS_VALUE',\n            value: null,\n            order: 1,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Företag\",\\n    \"Description\": \"Gör en försiktig uppskattning av värdet på ditt företag. Fyll i det sammanlagda värdet om du har flera företag. Om du äger ett företag tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: '8b41e306-b493-467d-bd66-8ee93660bd5d',\n                name: 'Äger du något företag?',\n                visibleInTable: false,\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: 2,\n                media: [],\n                answerAlternatives: [\n                  {\n                    id: '8cc40776-82ae-44d8-a213-c244b84e31c4',\n                    text: 'Värde',\n                    reasonLabel: null,\n                    category: 'ASSETS_VALUE',\n                    value: null,\n                    order: 1,\n                    type: 5,\n                    configuration:\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\n                    media: [],\n                    rules: [\n                      { ruleType: 2, value: '1', message: null },\n                      { ruleType: 3, value: '100000000', message: null },\n                      {\n                        ruleType: 0,\n                        value: null,\n                        message:\n                          'Fyll i hur mycket du brukar ha kvar i månaden',\n                      },\n                    ],\n                    confirm: null,\n                    followupQuestions: [],\n                  },\n                ],\n                groupQuestionItems: [],\n              },\n            ],\n          },\n          {\n            id: '82a6f7c9-90fd-47fc-abe5-9cb018912274',\n            text: 'Nej',\n            reasonLabel: null,\n            category: 'ASSETS_VALUE',\n            value: null,\n            order: 2,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i värdet på dina fastigheter\"\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n      {\n        id: '8492212e-e37c-4c9d-bdf4-c884cf3ad2b6',\n        name: '',\n        visibleInTable: false,\n        text: 'Har du andra tillgångar?',\n        description: '[]',\n        subTitle: '',\n        shortDescription: '',\n        optionType: 3,\n        media: [],\n        answerAlternatives: [\n          {\n            id: 'cbb8d3e4-22bd-4b0e-9703-3375e1ebb1a6',\n            text: 'Ja',\n            reasonLabel: null,\n            category: 'ASSETS_VALUE',\n            value: null,\n            order: 1,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Andra tillgångar\",\\n    \"Description\": \"Om du har en tillgång tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: 'd328ecad-2756-4f3a-9040-26235994e51c',\n                name: 'Andra tillgångar',\n                visibleInTable: false,\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: 2,\n                media: [],\n                answerAlternatives: [\n                  {\n                    id: '097a6001-d895-42b1-92bb-4a991aaf6fc5',\n                    text: 'Värde',\n                    reasonLabel: null,\n                    category: 'ASSETS_VALUE',\n                    value: null,\n                    order: 1,\n                    type: 5,\n                    configuration:\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\n                    media: [],\n                    rules: [\n                      {\n                        ruleType: 0,\n                        value: null,\n                        message: 'Fyll i värdet på dina andra tillgångar',\n                      },\n                      {\n                        ruleType: 3,\n                        value: '100000000',\n                        message: 'Värdet kan inte vara över',\n                      },\n                      {\n                        ruleType: 2,\n                        value: '1',\n                        message:\n                          'Du behöver fylla i ett värde större än eller lika med',\n                      },\n                    ],\n                    confirm: null,\n                    followupQuestions: [],\n                  },\n                ],\n                groupQuestionItems: [],\n              },\n            ],\n          },\n          {\n            id: 'b69ba899-df22-42b4-a74a-4601afa75ffa',\n            text: 'Nej',\n            reasonLabel: null,\n            category: 'ASSETS_VALUE',\n            value: null,\n            order: 2,\n            type: 3,\n            configuration:\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n      {\n        id: '3ad4a393-09ad-4eae-b910-c3ce84935b00',\n        name: null,\n        text: 'Are you on mediciation',\n        description: 'Are you sick',\n        subTitle: '',\n        shortDescription: '',\n        optionType: QuestionOptionType.Radio,\n        media: [],\n        answerAlternatives: [\n          {\n            id: '18edeccd-f19b-437d-aa76-4e1e37da72f0',\n            text: 'yes',\n            reasonLabel: null,\n            category: null,\n            value: null,\n            order: 1,\n            type: ComponentType.RadioTextBox,\n            configuration:\n              '{\"Modal\":{\"Title\": \"What Medicine you take\", \"Description\": \"please tell us what medicine you take and how much does it cost\"}}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [\n              {\n                id: 'bd620ae8-ccf1-46c4-842d-ef3bd26491e7',\n                name: 'Medicine Table',\n                text: '&nbsp;',\n                description: '[]',\n                subTitle: '',\n                shortDescription: '',\n                optionType: QuestionOptionType.Table,\n                media: [],\n                answerAlternatives: [],\n                groupQuestionItems: [\n                  {\n                    id: '8d8e60ed-ddc0-4864-a302-4c7e01239d03',\n                    name: 'Medicine Name',\n                    text: '&nbsp;',\n                    description: '[]',\n                    subTitle: '',\n                    shortDescription: '',\n                    optionType: QuestionOptionType.Input,\n                    media: [],\n                    answerAlternatives: [\n                      {\n                        id: '21be4801-e7bf-4b83-a66c-c84a4e770449',\n                        text: 'Medicine Name',\n                        reasonLabel: null,\n                        category: null,\n                        value: null,\n                        order: 1,\n                        type: ComponentType.Text,\n                        configuration:\n                          '{\\n  \"InputType\": \"Text\",\\n  \"IsRequired\": true,\\n  \"Type\": 2\\n}',\n                        media: [],\n                        rules: [\n                          {\n                            ruleType: RuleType.required,\n                            value: null,\n                            message: 'medicine name is required',\n                          },\n                        ],\n                        confirm: null,\n                        followupQuestions: [],\n                      },\n                    ],\n                    groupQuestionItems: [],\n                  },\n                  {\n                    id: 'd03c8d5e-ba30-41a6-b836-0f7d3f69f002',\n                    name: 'Medicine Brand',\n                    text: '&nbsp;',\n                    description: '[]',\n                    subTitle: '',\n                    shortDescription: '',\n                    optionType: QuestionOptionType.Input,\n                    media: [],\n                    answerAlternatives: [\n                      {\n                        id: '39779d7e-9d05-4c3b-8683-a1096081aa1a',\n                        text: 'Medicine Brand',\n                        reasonLabel: null,\n                        category: null,\n                        value: null,\n                        order: 1,\n                        type: ComponentType.Text,\n                        configuration:\n                          '{\\n  \"InputType\": \"Text\",\\n  \"IsRequired\": true,\\n  \"Type\": 2\\n}',\n                        media: [],\n                        rules: [\n                          {\n                            ruleType: RuleType.required,\n                            value: null,\n                            message: 'medicine brand is required',\n                          },\n                        ],\n                        confirm: null,\n                        followupQuestions: [],\n                      },\n                    ],\n                    groupQuestionItems: [],\n                  },\n                  {\n                    id: 'ec613a5b-8678-47d2-a68e-c94f56378cf6',\n                    name: 'Medicine Price',\n                    text: '&nbsp;',\n                    description: '[]',\n                    subTitle: '',\n                    shortDescription: '',\n                    optionType: QuestionOptionType.Input,\n                    media: [],\n                    answerAlternatives: [\n                      {\n                        id: '81526ffe-bad8-47e3-b87e-096885131fe2',\n                        text: 'Medicine Price',\n                        reasonLabel: null,\n                        category: null,\n                        value: null,\n                        order: 1,\n                        type: ComponentType.Number,\n                        configuration:\n                          '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Type\": 5\\n}',\n                        media: [],\n                        rules: [\n                          {\n                            ruleType: RuleType.required,\n                            value: null,\n                            message: 'medicine price is required',\n                          },\n                        ],\n                        confirm: null,\n                        followupQuestions: [],\n                      },\n                    ],\n                    groupQuestionItems: [],\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            id: '7999d0b1-d4a4-4bb3-97c4-624b1122c818',\n            text: 'no',\n            reasonLabel: null,\n            category: null,\n            value: null,\n            order: 2,\n            type: ComponentType.RadioTextBox,\n            configuration: '{\\n  \"Type\": 3,\\n  \"Modal\": {}\\n}',\n            media: [],\n            rules: [],\n            confirm: null,\n            followupQuestions: [],\n          },\n        ],\n        groupQuestionItems: [],\n      },\n    ],\n  },\n  \n]"
                },
                {
                    "name": "AcquisitionForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ComplexForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "familyFollowup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowUpItem",
                    "defaultValue": "{\n  type: 'inline',\n  items: [\n    {\n      key: 'partner-birth-date',\n      controlType: 'Datepicker',\n      value: '',\n      controlMetaData: {\n        label: 'Dina partners födelsedatum:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-name',\n      controlType: 'Text',\n      value: '',\n      controlMetaData: {\n        label: 'Din partners för-och efternamn:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'Din partners månadsinkomst:',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-more-than-equal',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-more-than-equal',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'more than or equal partner monthly income',\n          type: RuleType.minThanEqualsReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-more-than',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-more-than',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'more than partner monthly income',\n          type: RuleType.minThanReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-less-than',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-less-than',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'less than partner monthly income',\n          type: RuleType.maxThanReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-less-than-equal',\n      controlType: 'Number',\n      value: '',\n      controlMetaData: {\n        label: 'partner-monthly-income-less-than-equal',\n      },\n      rules: [\n        {\n          message: 'field is required',\n          type: RuleType.required,\n        },\n        {\n          message: 'less than equal partner monthly income',\n          type: RuleType.maxThanEqualReference,\n          value: 'partner-monthly-income',\n        },\n      ],\n    },\n    {\n      key: 'partner-monthly-income-radio',\n      controlType: 'Radio',\n      label: '',\n      options: [\n        {\n          id: '1',\n          value: '1',\n          label: 'Före skatt',\n        },\n        {\n          id: '2',\n          value: '2',\n          label: 'Efter skatt',\n        },\n      ],\n    },\n    {\n      key: 'then-maried',\n      controlType: 'Text',\n      label: 'Gift sedan',\n    },\n  ],\n}"
                },
                {
                    "name": "FormValidation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "InlineConditionalRendering",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "InlineMultipleRecords",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ModalConditionalRendering",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MultipleRecords",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MultiStepForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DemoComponent>",
                    "defaultValue": "(args: DemoComponent) => ({\n  props: args,\n})"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormItem.ts": [
                {
                    "name": "attributeTypeMapDynamicFormItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"label\", type: \"string\" },\n    { name: \"description\", type: \"string\" },\n    { name: \"className\", type: \"string\" },\n    { name: \"required\", type: \"boolean\" },\n    { name: \"multi\", type: \"boolean\" },\n    { name: \"min\", type: \"object\" },\n    { name: \"max\", type: \"object\" },\n    { name: \"order\", type: \"number\" },\n    { name: \"placeholder\", type: \"string\" },\n    { name: \"options\", type: \"Array<DynamicFormOption>\" },\n    { name: \"rulerKey\", type: \"string\" },\n    { name: \"condition\", type: \"object\" },\n    { name: \"controlType\", type: \"DynamicFormType\" },\n    { name: \"controlMetaData\", type: \"object\" },\n]"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormOption.ts": [
                {
                    "name": "attributeTypeMapDynamicFormOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n]"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts": [
                {
                    "name": "attributeTypeMapDynamicFormResponseItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\n    { name: \"key\", type: \"string\" },\n    { name: \"value\", type: \"object\" },\n    { name: \"sectionId\", type: \"string\" },\n    { name: \"sectionIndex\", type: \"number\" },\n    { name: \"formItem\", type: \"DynamicFormItem\" },\n]"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormSection.ts": [
                {
                    "name": "attributeTypeMapDynamicFormSection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\n  { name: 'title', type: 'string' },\n  { name: 'category', type: 'string' },\n  { name: 'description', type: 'string' },\n  { name: 'className', type: 'string' },\n  { name: 'key', type: 'string' },\n  { name: 'order', type: 'number' },\n  { name: 'multi', type: 'boolean' },\n  { name: 'sectionType', type: 'any' },\n  { name: 'items', type: 'Array<DynamicFormItem>' },\n]"
                }
            ],
            "projects/dynamic-form/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormType.ts": [
                {
                    "name": "DynamicFormType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    Text: \"Text\" as DynamicFormType,\n    TextArea: \"TextArea\" as DynamicFormType,\n    Checkbox: \"Checkbox\" as DynamicFormType,\n    Dropdown: \"Dropdown\" as DynamicFormType,\n    Datepicker: \"Datepicker\" as DynamicFormType,\n    Radio: \"Radio\" as DynamicFormType,\n    Number: \"Number\" as DynamicFormType,\n    Card: \"Card\" as DynamicFormType,\n    ToggleSelector: \"ToggleSelector\" as DynamicFormType,\n    Disclaimer: \"Disclaimer\" as DynamicFormType,\n    None: \"None\" as DynamicFormType,\n}"
                }
            ],
            "stories/map.ts": [
                {
                    "name": "mapControlType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(controlType: ComponentType): DynamicFormType => {\n  switch (controlType) {\n    case ComponentType.Text:\n      return DynamicFormType.Text;\n    case ComponentType.Number:\n      return DynamicFormType.Number;\n    case ComponentType.CheckBox:\n      return DynamicFormType.Checkbox;\n    case ComponentType.Date:\n      return DynamicFormType.Datepicker;\n    case ComponentType.RadioTextBox:\n      return DynamicFormType.Radio;\n    case ComponentType.Card:\n      return DynamicFormType.Card;\n    case ComponentType.None:\n      return DynamicFormType.None;\n    default:\n      return DynamicFormType.Text;\n  }\n}"
                },
                {
                    "name": "mapRules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(rules): Rule[] => {\n  return rules.map((rule) => {\n    switch (rule.ruleType) {\n      case 0:\n      default:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.required,\n        };\n      case 1:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.pattern,\n        };\n      case 2:\n        return { value: rule.value, message: rule.message, type: RuleType.min };\n      case 3:\n        return { value: rule.value, message: rule.message, type: RuleType.max };\n      case 4:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minLength,\n        };\n      case 5:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxLength,\n        };\n      case 6:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minThanReference,\n        };\n      case 7:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.minThanEqualsReference,\n        };\n      case 8:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxThanReference,\n        };\n      case 9:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.maxThanEqualReference,\n        };\n      case 10:\n        return {\n          value: rule.value,\n          message: rule.message,\n          type: RuleType.confirm,\n        };\n    }\n  });\n}"
                },
                {
                    "name": "parseConfiguration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: string): { [key: string]: any } => {\n  let parsedConfig: { [key: string]: any } = {};\n  if (configuration) {\n    try {\n      parsedConfig = JSON.parse(configuration);\n    } catch (e) {}\n  }\n  return parsedConfig;\n}"
                }
            ]
        },
        "groupedFunctions": {
            "stories/map.ts": [
                {
                    "name": "mapToDynamicForm",
                    "file": "stories/map.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "arr",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "DynamicFormSection[]",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "stories/map.ts": [
                {
                    "name": "ComponentType",
                    "childs": [
                        {
                            "name": "None",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Text",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "RadioTextBox",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CheckBox",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "stories/map.ts"
                },
                {
                    "name": "QuestionOptionType",
                    "childs": [
                        {
                            "name": "None",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Input",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Radio",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CheckBox",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Group",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Table",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "stories/map.ts"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormItem.ts": [
                {
                    "name": "MediaKind",
                    "childs": [
                        {
                            "name": "Image",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Video",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
                },
                {
                    "name": "RuleType",
                    "childs": [
                        {
                            "name": "required",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minLength",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxLength",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pattern",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minThanReference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minThanEqualsReference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxThanReference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxThanEqualReference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "confirm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/dynamic-form/src/lib/model/dynamicFormType.ts": [
                {
                    "name": "DynamicFormType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Text\" | \"TextArea\" | \"Checkbox\" | \"Dropdown\" | \"Datepicker\" | \"Radio\" | \"Number\" | \"Card\" | \"ToggleSelector\" | \"Disclaimer\" | \"None\"",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts": [
                {
                    "name": "ExtendedFormGroupControl",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ExtendedFormControl | ExtendedFormArray | ExtendedFormGroup | ExtendedFormGroupArray",
                    "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/dynamic-form/src/lib/digit-only/digit-only.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DigitOnlyDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form-confirmation/dynamic-form-confirmation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormConfirmationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form-item/dynamic-form-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form-media/dynamic-form-media.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormMediaComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form-modal/dynamic-form-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormComponent",
                "coveragePercent": 9,
                "coverageCount": "5/54",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicFormValidationError",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-from-data/dynamic-form-data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormDataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-array.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormArray",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-control.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group-array.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormGroupArray",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExtendedFormGroupControls",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormItem",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "formItemValidation",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Media",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Rule",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmInformation",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormOption",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FollowUpItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormResponseItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormResponseItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormSection",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormSection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DynamicFormType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AttributeTypeMap",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/object-keys.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ObjectKeysPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/safe.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "acqFormData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AcquisitionForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComplexForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "familyFollowup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormValidation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InlineConditionalRendering",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InlineMultipleRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ModalConditionalRendering",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiStepForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mapToDynamicForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapControlType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapRules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parseConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}