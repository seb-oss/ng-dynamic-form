{
    "pipes": [
        {
            "name": "ObjectKeysPipe",
            "id": "pipe-ObjectKeysPipe-51d9a0a6dd364063647a6e2a5a5481775a97650a566207d9a7e3ef4ef0c0b32cc9d9565067e23f34a890ce0610f588b5799ceee0ad0c22471e47da5531425a60",
            "file": "projects/dynamic-form/src/lib/object-keys.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "objectKeys",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'objectKeys',\n})\nexport class ObjectKeysPipe implements PipeTransform {\n  transform(param: { [key: string]: any }): string[] {\n    return Object.keys(param);\n  }\n}\n"
        },
        {
            "name": "SafePipe",
            "id": "pipe-SafePipe-5217f09e2ca8dda5ef25c400e9d41624ba1475b1070e1510bc94b0513e62b8a63159b65f69b54e4daffe6d54f16d6eff75986ca9a7d0ce424cdef9b9532aa917",
            "file": "projects/dynamic-form/src/lib/safe.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safe",
            "sourceCode": "import { NgModule, Pipe, PipeTransform } from '@angular/core';\r\nimport {\r\n  DomSanitizer,\r\n  SafeHtml,\r\n  SafeStyle,\r\n  SafeScript,\r\n  SafeUrl,\r\n  SafeResourceUrl,\r\n} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safe',\r\n})\r\nexport class SafePipe implements PipeTransform {\r\n  constructor(protected sanitizer: DomSanitizer) {}\r\n\r\n  public transform(\r\n    value: any,\r\n    type: string\r\n  ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\r\n    switch (type) {\r\n      case 'html':\r\n        return this.sanitizer.bypassSecurityTrustHtml(value);\r\n      case 'style':\r\n        return this.sanitizer.bypassSecurityTrustStyle(value);\r\n      case 'script':\r\n        return this.sanitizer.bypassSecurityTrustScript(value);\r\n      case 'url':\r\n        return this.sanitizer.bypassSecurityTrustUrl(value);\r\n      case 'resourceUrl':\r\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n      default:\r\n        throw new Error(`Invalid safe type specified: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [SafePipe],\r\n  exports: [SafePipe],\r\n})\r\nexport class SafePipeModule {}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "AttributeTypeMap",
            "id": "interface-AttributeTypeMap-cfd79e7666efd83ad9f64f0d815034a11723309a0cff1052d35ce0ae9c7b296b5e4b3ed6f598dc9cf896223b24cefa837b821cbb360b2cde58c42c08506cb193",
            "file": "projects/dynamic-form/src/lib/model/models.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export * from './dynamicFormItem';\nexport * from './dynamicFormOption';\nexport * from './dynamicFormResponseItem';\nexport * from './dynamicFormSection';\nexport * from './dynamicFormType';\nexport * from './custom-classes/extended-form-array';\nexport * from './custom-classes/extended-form-control';\nexport * from './custom-classes/extended-form-group';\nexport * from './custom-classes/extended-form-group-array';\n\nexport interface AttributeTypeMap {\n  name: string;\n  type: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ConfirmInformation",
            "id": "interface-ConfirmInformation-edb6d0fd3a9f982d8fa2c4fe3bf1c832e53ce7417eae8c4ca1b87b2ffe15da68e1715389e4f06209b914fab600d41e941bf653f75c7a42232f25842b902ee293",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AttributeTypeMap } from './models';\nimport { DynamicFormItem, Media } from './dynamicFormItem';\nimport { DynamicFormSection } from './dynamicFormSection';\n\nexport interface ConfirmInformation {\n  title?: string;\n  message?: string;\n  accept?: string;\n  deny?: string;\n}\n\nexport interface FollowUpItem {\n  type: string;\n  title?: string;\n  subTitle?: string;\n  description?: string;\n  items: DynamicFormItem[] | DynamicFormSection[];\n  multi?: boolean;\n}\n\nexport interface DynamicFormOption<T = any> {\n  id?: string;\n  value?: T;\n  label?: string | null;\n  disabled?: boolean | null;\n  category?: string;\n  order?: number;\n  confirm?: ConfirmInformation;\n  media?: Media[];\n  followUpItems?: FollowUpItem;\n}\n\nexport const attributeTypeMapDynamicFormOption: AttributeTypeMap[] = [\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n];\n",
            "properties": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "deny",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DynamicFormItem",
            "id": "interface-DynamicFormItem-86932eac9e12c11c984312e01e42699c6298dd1300e5e3b2f603803ab8a8d3f1d1c1083d61b599bdafdf59de2ad30428f7580133188892893758e209dded5b4b",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from './dynamicFormType';\r\nimport { DynamicFormOption } from './dynamicFormOption';\r\nimport { AttributeTypeMap } from './models';\r\n\r\nexport enum RuleType {\r\n  required,\r\n  min,\r\n  max,\r\n  minLength,\r\n  maxLength,\r\n  pattern,\r\n  minThanReference,\r\n  minThanEqualsReference,\r\n  maxThanReference,\r\n  maxThanEqualReference,\r\n  confirm,\r\n}\r\n\r\nexport enum MediaKind {\r\n  Image,\r\n  Video,\r\n}\r\n\r\nexport interface formItemValidation {\r\n  required?: boolean;\r\n  min?: number | string;\r\n  max?: number | string;\r\n  minLength?: number | string;\r\n  maxLength?: number | string;\r\n}\r\n\r\nexport interface Rule {\r\n  value?: any;\r\n  message?: string;\r\n  type: RuleType;\r\n}\r\n\r\nexport interface Media {\r\n  id: string;\r\n  url: string;\r\n  kind: MediaKind;\r\n  mimeType: string;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nexport interface DynamicFormItem {\r\n  key: string | null;\r\n  category?: string | null; //subTitle\r\n  title?: string | null; //name\r\n  value?: any;\r\n  label?: string | null;\r\n  descriptionHeader?: string | null; //text\r\n  description?: string | null;\r\n  media?: Media[];\r\n  className?: string | null;\r\n  multi?: boolean;\r\n  order?: number;\r\n  placeholder?: string | null;\r\n  options?: Array<DynamicFormOption> | null;\r\n  rulerKey?: string | null;\r\n  condition?: any;\r\n  controlType: DynamicFormType;\r\n  rules?: Rule[];\r\n  controlMetaData?: {\r\n    label?: string;\r\n    description?: string;\r\n    inputGroupLabel?: string;\r\n    inputGroupPosition?: 'left' | 'right';\r\n  };\r\n}\r\n\r\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\r\n  { name: 'key', type: 'string' },\r\n  { name: 'value', type: 'object' },\r\n  { name: 'label', type: 'string' },\r\n  { name: 'description', type: 'string' },\r\n  { name: 'className', type: 'string' },\r\n  { name: 'required', type: 'boolean' },\r\n  { name: 'multi', type: 'boolean' },\r\n  { name: 'min', type: 'object' },\r\n  { name: 'max', type: 'object' },\r\n  { name: 'order', type: 'number' },\r\n  { name: 'placeholder', type: 'string' },\r\n  { name: 'options', type: 'Array<DynamicFormOption>' },\r\n  { name: 'rulerKey', type: 'string' },\r\n  { name: 'condition', type: 'object' },\r\n  { name: 'controlType', type: 'DynamicFormType' },\r\n  { name: 'controlMetaData', type: 'object' },\r\n];\r\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "condition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "controlMetaData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "controlType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormType",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "descriptionHeader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "media",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Media[]",
                    "optional": true,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "multi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<DynamicFormOption> | null",
                    "optional": true,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "rulerKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "rules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Rule[]",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DynamicFormOption",
            "id": "interface-DynamicFormOption-edb6d0fd3a9f982d8fa2c4fe3bf1c832e53ce7417eae8c4ca1b87b2ffe15da68e1715389e4f06209b914fab600d41e941bf653f75c7a42232f25842b902ee293",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AttributeTypeMap } from './models';\nimport { DynamicFormItem, Media } from './dynamicFormItem';\nimport { DynamicFormSection } from './dynamicFormSection';\n\nexport interface ConfirmInformation {\n  title?: string;\n  message?: string;\n  accept?: string;\n  deny?: string;\n}\n\nexport interface FollowUpItem {\n  type: string;\n  title?: string;\n  subTitle?: string;\n  description?: string;\n  items: DynamicFormItem[] | DynamicFormSection[];\n  multi?: boolean;\n}\n\nexport interface DynamicFormOption<T = any> {\n  id?: string;\n  value?: T;\n  label?: string | null;\n  disabled?: boolean | null;\n  category?: string;\n  order?: number;\n  confirm?: ConfirmInformation;\n  media?: Media[];\n  followUpItems?: FollowUpItem;\n}\n\nexport const attributeTypeMapDynamicFormOption: AttributeTypeMap[] = [\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n];\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "confirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmInformation",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "followUpItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowUpItem",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "media",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Media[]",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": true,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DynamicFormResponseItem",
            "id": "interface-DynamicFormResponseItem-e0f09fe58a32d44e3d6a566ca3125780880bcde6963a60c6b1b72aafc437beb4d2cb67fb54ff3f241837a58877cde037e5ad25665dc630cd960fb0b6aa7bffc1",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormItem } from './dynamicFormItem';\r\nimport { AttributeTypeMap } from './models';\r\n\r\nexport interface DynamicFormResponseItem {\r\n  key?: string | null;\r\n  value?: object | null;\r\n  sectionId?: string | null;\r\n  sectionIndex?: number;\r\n  formItem?: DynamicFormItem | null;\r\n}\r\n\r\nexport const attributeTypeMapDynamicFormResponseItem: AttributeTypeMap[] = [\r\n  { name: 'key', type: 'string' },\r\n  { name: 'value', type: 'object' },\r\n  { name: 'sectionId', type: 'string' },\r\n  { name: 'sectionIndex', type: 'number' },\r\n  { name: 'formItem', type: 'DynamicFormItem' },\r\n];\r\n",
            "properties": [
                {
                    "name": "formItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormItem | null",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sectionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "sectionIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object | null",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DynamicFormSection",
            "id": "interface-DynamicFormSection-b52f17df6511e826ad508a6943ea761d68763ba7525008ce1e66bb18d5f15857825ea6efba0aa8c15dcfcffca98af0fae4dca83e8c8c9120d223ca5d024010bf",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormItem } from './dynamicFormItem';\nimport { AttributeTypeMap } from './models';\n\nexport interface DynamicFormSection {\n  title?: string | null;\n  category?: string | null;\n  description?: string | null;\n  text?: string | null;\n  className?: string | null;\n  key?: string | null;\n  order?: number;\n  multi?: boolean;\n  sectionType?: any;\n  sections?: DynamicFormSection[];\n  items?: DynamicFormItem[] | null;\n}\n\nexport const attributeTypeMapDynamicFormSection: AttributeTypeMap[] = [\n  { name: 'title', type: 'string' },\n  { name: 'category', type: 'string' },\n  { name: 'description', type: 'string' },\n  { name: 'className', type: 'string' },\n  { name: 'key', type: 'string' },\n  { name: 'order', type: 'number' },\n  { name: 'multi', type: 'boolean' },\n  { name: 'sectionType', type: 'any' },\n  { name: 'items', type: 'Array<DynamicFormItem>' },\n];\n",
            "properties": [
                {
                    "name": "category",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "className",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormItem[] | null",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "multi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "sections",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormSection[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "sectionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ExtendedFormGroupControls",
            "id": "interface-ExtendedFormGroupControls-2d6a59a035eea978e77cdd04aab570779786ca9f074b4660aed62e79ad5ffb6e4e67f4fd153786ecdd2e50b54a6aebc50beecebc5e83ce2b1cc57d48fa4cafb2",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  FormGroup,\n  ValidatorFn,\n  AbstractControlOptions,\n  AsyncValidatorFn,\n} from '@angular/forms';\nimport { DynamicFormSection } from '../../model/dynamicFormSection';\nimport { ExtendedFormControl } from './extended-form-control';\nimport { ExtendedFormArray } from './extended-form-array';\nimport { ExtendedFormGroupArray } from './extended-form-group-array';\nexport interface ExtendedFormGroupControls {\n  [key: string]: ExtendedFormGroupControl | ExtendedFormGroup;\n}\n\nexport type ExtendedFormGroupControl =\n  | ExtendedFormControl\n  | ExtendedFormArray\n  | ExtendedFormGroup\n  | ExtendedFormGroupArray;\n\nexport class ExtendedFormGroup extends FormGroup {\n  sectionItem: DynamicFormSection;\n\n  constructor(\n    controls: ExtendedFormGroupControls,\n    item?: DynamicFormSection,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.sectionItem = item;\n  }\n\n  get(path: string | (string | number)[]): ExtendedFormGroupControl {\n    return super.get(path) as ExtendedFormGroupControl;\n  }\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-2d6a59a035eea978e77cdd04aab570779786ca9f074b4660aed62e79ad5ffb6e4e67f4fd153786ecdd2e50b54a6aebc50beecebc5e83ce2b1cc57d48fa4cafb2",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ExtendedFormGroupControl | ExtendedFormGroup",
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "FollowUpItem",
            "id": "interface-FollowUpItem-edb6d0fd3a9f982d8fa2c4fe3bf1c832e53ce7417eae8c4ca1b87b2ffe15da68e1715389e4f06209b914fab600d41e941bf653f75c7a42232f25842b902ee293",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AttributeTypeMap } from './models';\nimport { DynamicFormItem, Media } from './dynamicFormItem';\nimport { DynamicFormSection } from './dynamicFormSection';\n\nexport interface ConfirmInformation {\n  title?: string;\n  message?: string;\n  accept?: string;\n  deny?: string;\n}\n\nexport interface FollowUpItem {\n  type: string;\n  title?: string;\n  subTitle?: string;\n  description?: string;\n  items: DynamicFormItem[] | DynamicFormSection[];\n  multi?: boolean;\n}\n\nexport interface DynamicFormOption<T = any> {\n  id?: string;\n  value?: T;\n  label?: string | null;\n  disabled?: boolean | null;\n  category?: string;\n  order?: number;\n  confirm?: ConfirmInformation;\n  media?: Media[];\n  followUpItems?: FollowUpItem;\n}\n\nexport const attributeTypeMapDynamicFormOption: AttributeTypeMap[] = [\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n];\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormItem[] | DynamicFormSection[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "multi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "subTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "formItemValidation",
            "id": "interface-formItemValidation-86932eac9e12c11c984312e01e42699c6298dd1300e5e3b2f603803ab8a8d3f1d1c1083d61b599bdafdf59de2ad30428f7580133188892893758e209dded5b4b",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from './dynamicFormType';\r\nimport { DynamicFormOption } from './dynamicFormOption';\r\nimport { AttributeTypeMap } from './models';\r\n\r\nexport enum RuleType {\r\n  required,\r\n  min,\r\n  max,\r\n  minLength,\r\n  maxLength,\r\n  pattern,\r\n  minThanReference,\r\n  minThanEqualsReference,\r\n  maxThanReference,\r\n  maxThanEqualReference,\r\n  confirm,\r\n}\r\n\r\nexport enum MediaKind {\r\n  Image,\r\n  Video,\r\n}\r\n\r\nexport interface formItemValidation {\r\n  required?: boolean;\r\n  min?: number | string;\r\n  max?: number | string;\r\n  minLength?: number | string;\r\n  maxLength?: number | string;\r\n}\r\n\r\nexport interface Rule {\r\n  value?: any;\r\n  message?: string;\r\n  type: RuleType;\r\n}\r\n\r\nexport interface Media {\r\n  id: string;\r\n  url: string;\r\n  kind: MediaKind;\r\n  mimeType: string;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nexport interface DynamicFormItem {\r\n  key: string | null;\r\n  category?: string | null; //subTitle\r\n  title?: string | null; //name\r\n  value?: any;\r\n  label?: string | null;\r\n  descriptionHeader?: string | null; //text\r\n  description?: string | null;\r\n  media?: Media[];\r\n  className?: string | null;\r\n  multi?: boolean;\r\n  order?: number;\r\n  placeholder?: string | null;\r\n  options?: Array<DynamicFormOption> | null;\r\n  rulerKey?: string | null;\r\n  condition?: any;\r\n  controlType: DynamicFormType;\r\n  rules?: Rule[];\r\n  controlMetaData?: {\r\n    label?: string;\r\n    description?: string;\r\n    inputGroupLabel?: string;\r\n    inputGroupPosition?: 'left' | 'right';\r\n  };\r\n}\r\n\r\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\r\n  { name: 'key', type: 'string' },\r\n  { name: 'value', type: 'object' },\r\n  { name: 'label', type: 'string' },\r\n  { name: 'description', type: 'string' },\r\n  { name: 'className', type: 'string' },\r\n  { name: 'required', type: 'boolean' },\r\n  { name: 'multi', type: 'boolean' },\r\n  { name: 'min', type: 'object' },\r\n  { name: 'max', type: 'object' },\r\n  { name: 'order', type: 'number' },\r\n  { name: 'placeholder', type: 'string' },\r\n  { name: 'options', type: 'Array<DynamicFormOption>' },\r\n  { name: 'rulerKey', type: 'string' },\r\n  { name: 'condition', type: 'object' },\r\n  { name: 'controlType', type: 'DynamicFormType' },\r\n  { name: 'controlMetaData', type: 'object' },\r\n];\r\n",
            "properties": [
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "minLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IDynamicFormValidationError",
            "id": "interface-IDynamicFormValidationError-e1075222483c398a4eb8fc550fde0b18601d761439389c3321c77050c68221c751919ffa2b5cab2603f3f00b46f9a52ea7394b3be7b0871ffbd1e5479468fb83",
            "file": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { KeyValue } from '@angular/common';\r\nimport {\r\n  DynamicFormItem,\r\n  DynamicFormOption,\r\n  ConfirmInformation,\r\n} from './model/models';\r\nimport {\r\n  ExtendedFormGroup,\r\n  ExtendedFormGroupControls,\r\n} from './model/custom-classes/extended-form-group';\r\nimport { ExtendedFormControl } from './model/custom-classes/extended-form-control';\r\nimport { ExtendedFormArray } from './model/custom-classes/extended-form-array';\r\nimport { ExtendedFormGroupArray } from './model/custom-classes/extended-form-group-array';\r\nimport { FormService } from './form.service';\r\nimport { IFormAction } from './i-form-action.enum';\r\n\r\ninterface IDynamicFormValidationError {\r\n  key: string;\r\n  errorMessage: string;\r\n  sectionId: string;\r\n  sectionIndex: number;\r\n  formItem: Partial<DynamicFormItem>;\r\n}\r\n\r\n/** some comment */\r\n@Component({\r\n  selector: 'app-dynamic-form',\r\n  templateUrl: './dynamic-form.component.html',\r\n  providers: [FormService],\r\n  styles: [\r\n    `\r\n      ::ng-deep .dynamic-form-section-item {\r\n        margin-bottom: 1.5rem;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class DynamicFormComponent {\r\n  @Input() extendedFormGroup: ExtendedFormGroup;\r\n  @Input() activeStep: number;\r\n  @Input() sectionTemplate: TemplateRef<any>;\r\n  @Input() itemTemplate: TemplateRef<any>;\r\n  @Input() actionsTemplate: TemplateRef<any>;\r\n  @Input() disclaimerTemplate: TemplateRef<any>;\r\n  @Input() inputMetadataTemplate: TemplateRef<any>;\r\n  @Input() textAreaTemplate: TemplateRef<any>;\r\n  @Input() numberTemplate: TemplateRef<any>;\r\n  @Input() checkboxTemplate: TemplateRef<any>;\r\n  @Input() dropdownTemplate: TemplateRef<any>;\r\n  @Input() datePickerTemplate: TemplateRef<any>;\r\n  @Input() radioTemplate: TemplateRef<any>;\r\n  @Input() radioTableTemplate: TemplateRef<any>;\r\n  @Input() toggleSelectorTemplate: TemplateRef<any>;\r\n  @Input() cardTemplate: TemplateRef<any>;\r\n  @Input() itemCustomClass: string;\r\n  @Input() hasFormActions: boolean = true;\r\n  // used to compare current rules with saved data\r\n  @Input() savedFormData: { key: string; value: string | number | boolean }[] =\r\n    [];\r\n  @Input() nextAction: IFormAction = {\r\n    hasAction: true,\r\n    label: 'Next',\r\n  };\r\n  @Input() previousAction: IFormAction = {\r\n    hasAction: true,\r\n    label: 'Previous',\r\n  };\r\n  @Input() cancelAction: IFormAction = {\r\n    hasAction: true,\r\n    label: 'Cancel',\r\n  };\r\n\r\n  @Input() saveAction: IFormAction = {\r\n    hasAction: true,\r\n    label: 'Save',\r\n  };\r\n  @Input() deleteAction: IFormAction = {\r\n    hasAction: true,\r\n    label: 'Delete',\r\n  };\r\n  @Output() previousEvent: EventEmitter<any> = new EventEmitter();\r\n  @Output() nextEvent: EventEmitter<any> = new EventEmitter();\r\n  @Output() cancelEvent: EventEmitter<any> = new EventEmitter();\r\n\r\n  submitted: boolean = false;\r\n  confirmationToggle: boolean = false;\r\n  confirmationData: ConfirmInformation = null;\r\n\r\n  newFormGroup: {\r\n    form: ExtendedFormGroup;\r\n    index: number;\r\n    parentKey: string;\r\n  } = {\r\n    form: null,\r\n    index: null,\r\n    parentKey: null,\r\n  };\r\n\r\n  followUpModalToggle: boolean = false;\r\n\r\n  constructor(\r\n    private formService: FormService,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  shouldRenderFollowUpControlsType(key: any): string {\r\n    if (key.value?.followUpItems) {\r\n      return key.value?.followUpItems.type;\r\n    }\r\n  }\r\n\r\n  dimissFollowUpModal(item: ExtendedFormControl): void {\r\n    this.followUpModalToggle = false;\r\n    !item.formGroup && item?.reset();\r\n  }\r\n\r\n  saveFollowUpModal(param: {\r\n    item: ExtendedFormGroup;\r\n    control: ExtendedFormControl;\r\n  }): void {\r\n    const { item, control } = param;\r\n    if (item.valid) {\r\n      if (this.newFormGroup.index !== null) {\r\n        (control.formGroup as ExtendedFormGroupArray).setControl(\r\n          this.newFormGroup.index,\r\n          item\r\n        );\r\n      } else {\r\n        if (!control.formGroup?.controls?.length) {\r\n          control.formGroup = new ExtendedFormGroupArray([item]);\r\n        } else {\r\n          (control.formGroup as ExtendedFormGroupArray).push(item);\r\n        }\r\n      }\r\n      this.followUpModalToggle = false;\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n\r\n  createFormGroup(param: { items: any; key: string }) {\r\n    this.newFormGroup = {\r\n      form: this.formService.dynamicFormSectionsToFormGroup(param.items),\r\n      index: null,\r\n      parentKey: param.key,\r\n    };\r\n    this.followUpModalToggle = true;\r\n  }\r\n\r\n  modalShouldBeRendered(control): boolean {\r\n    if (\r\n      control.value?.followUpItems?.items?.length &&\r\n      control.formItem.key === this.newFormGroup.parentKey\r\n    ) {\r\n      return !!this.newFormGroup.form;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * SHOULD RENDER CONTROL:\r\n   * Determines if the form control should be rendered or not.\r\n   * @param key section key\r\n   * @param formItem the target form item that should or should not be displayed\r\n   * @param index if the formgroup is an array this is the index of the formgroup item\r\n   */\r\n  shouldRenderControl(\r\n    key: string,\r\n    formItem: DynamicFormItem,\r\n    index?: number\r\n  ): boolean {\r\n    if (this.extendedFormGroup.controls)\r\n      if (formItem?.rulerKey) {\r\n        // It has a ruler key, trying to find the ruler and it's value\r\n        let ruler: ExtendedFormControl;\r\n        if (index > -1) {\r\n          // the form control where the ruler should be is an array\r\n          const target: ExtendedFormControl = (\r\n            this.extendedFormGroup.get(key) as ExtendedFormGroupArray\r\n          )\r\n            .at(index)\r\n            .get(formItem.rulerKey) as ExtendedFormControl;\r\n          if (target) {\r\n            ruler = target;\r\n          }\r\n        } else {\r\n          // no array index: the form control where the ruler should be is a regular form\r\n          ruler = this.extendedFormGroup\r\n            ?.get(key)\r\n            ?.get(formItem.rulerKey) as ExtendedFormControl;\r\n        }\r\n        const rulerValue: any = ruler.value;\r\n        const { condition }: DynamicFormItem = formItem;\r\n        if (rulerValue === undefined || condition === undefined) {\r\n          console.warn(\r\n            'Something went wrong in shouldRenderControl: Ruler value or condition could not be found.'\r\n          );\r\n          return false;\r\n        }\r\n        if (\r\n          typeof rulerValue === 'string' &&\r\n          rulerValue === (condition as any)\r\n        ) {\r\n          return this.shouldRenderControl(key, ruler.formItem, index);\r\n        } else if (\r\n          rulerValue &&\r\n          condition &&\r\n          typeof condition === 'object' &&\r\n          Array.isArray(condition)\r\n        ) {\r\n          for (const conditionItem of condition as Array<any>) {\r\n            if (conditionItem) {\r\n              if (typeof rulerValue === 'object' && Array.isArray(rulerValue)) {\r\n                for (const rulerValueItem of rulerValue as Array<any>) {\r\n                  if (\r\n                    rulerValueItem &&\r\n                    rulerValueItem.value === conditionItem.value\r\n                  ) {\r\n                    return this.shouldRenderControl(key, ruler.formItem, index);\r\n                  }\r\n                }\r\n              } else if (\r\n                typeof rulerValue === 'object' &&\r\n                !Array.isArray(rulerValue)\r\n              ) {\r\n                if (rulerValue && rulerValue.value === conditionItem.value) {\r\n                  return this.shouldRenderControl(key, ruler.formItem, index);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else if (\r\n          rulerValue &&\r\n          typeof rulerValue === 'object' &&\r\n          !Array.isArray(rulerValue) &&\r\n          rulerValue.value === (condition as DynamicFormOption).value\r\n        ) {\r\n          return this.shouldRenderControl(key, ruler.formItem, index);\r\n        } else if (\r\n          rulerValue &&\r\n          typeof rulerValue === 'boolean' &&\r\n          rulerValue === condition\r\n        ) {\r\n          return this.shouldRenderControl(key, ruler.formItem, index);\r\n        }\r\n        return false;\r\n      }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ADD NEW ITEM TO FORM ARRAY WITH ID:\r\n   * Duplicates the whole section or a form item within a section\r\n   * @param key section key\r\n   * @param id the id of the form item which should be duplicated\r\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\r\n   */\r\n  addNewItemToFormArrayWithId(\r\n    key: string,\r\n    id?: string,\r\n    sectionIndex?: number\r\n  ): void {\r\n    if (id) {\r\n      // There is an id which means we want to duplicate a form item within a section\r\n      if (sectionIndex > -1) {\r\n        // the form control where the item to duplicate should be is an array\r\n        const target: ExtendedFormArray = (\r\n          this.extendedFormGroup.get(key) as ExtendedFormGroupArray\r\n        ).at(sectionIndex) as ExtendedFormArray;\r\n        (target.get(id) as ExtendedFormArray).push(new FormControl(''));\r\n      } else {\r\n        // the form control is not an array since there is no section index\r\n        (this.extendedFormGroup.get(key).get(id) as ExtendedFormArray).push(\r\n          new FormControl('')\r\n        );\r\n      }\r\n    } else {\r\n      // There is no id which means we want to duplicate the entire section\r\n      const target: ExtendedFormGroupArray = this.extendedFormGroup.get(\r\n        key\r\n      ) as ExtendedFormGroupArray;\r\n      const childControls: ExtendedFormGroupControls =\r\n        this.formService.dynamicFormItemsToControls(target.sectionItem.items);\r\n      const formGroup: ExtendedFormGroup = new ExtendedFormGroup(\r\n        childControls,\r\n        target.sectionItem\r\n      );\r\n      target.push(formGroup);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * REMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\r\n   * Removes the whole section or a form item within a section\r\n   * @param key section key\r\n   * @param info the id of the form item which should be removed and the index of where to remove it\r\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\r\n   */\r\n  removeItemAtIndexFromFormArrayWithId(\r\n    key: string,\r\n    info?: { id: string; index: number },\r\n    sectionIndex?: number\r\n  ): void {\r\n    if (info && info.id) {\r\n      // There is info which means we want to remove a form item within a section\r\n      if (sectionIndex > -1) {\r\n        // the form control where the item to remove should be is an array\r\n        const target: ExtendedFormArray = (\r\n          this.extendedFormGroup.get(key) as ExtendedFormGroupArray\r\n        ).at(sectionIndex) as ExtendedFormArray;\r\n        (target.get(info.id) as ExtendedFormArray).removeAt(info.index);\r\n      } else {\r\n        // the form control is not an array since there is no section index\r\n        (\r\n          this.extendedFormGroup.get(key).get(info.id) as ExtendedFormArray\r\n        ).removeAt(info.index);\r\n      }\r\n    } else {\r\n      // there is no info indicating we should use the section index to remove the section itself\r\n      if (sectionIndex > -1) {\r\n        (this.extendedFormGroup.get(key) as ExtendedFormGroupArray).removeAt(\r\n          sectionIndex\r\n        );\r\n      } else {\r\n        console.warn(\r\n          'Error at removeItemAtIndexFromFormArrayWithId: Tried to remove section but no section index was provided'\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  removeItemFromParent(param: {\r\n    form: ExtendedFormControl;\r\n    index: number;\r\n  }): void {\r\n    const { form, index } = param;\r\n    (form.formGroup as ExtendedFormGroupArray).removeAt(index);\r\n    // reset parent control if the formGroup property doesn't have controls\r\n    if (!(form.formGroup as ExtendedFormGroupArray).controls?.length) {\r\n      form.reset();\r\n    }\r\n    this.followUpModalToggle = false;\r\n  }\r\n\r\n  editItemFromParent(param: {\r\n    formArray: ExtendedFormArray;\r\n    index: number;\r\n    parentKey: string;\r\n  }): void {\r\n    const { formArray, index, parentKey } = param;\r\n\r\n    this.newFormGroup = {\r\n      form: new ExtendedFormGroup(\r\n        (formArray.at(index) as ExtendedFormGroup)\r\n          .controls as ExtendedFormGroupControls\r\n      ),\r\n      index,\r\n      parentKey,\r\n    };\r\n\r\n    this.followUpModalToggle = true;\r\n  }\r\n\r\n  orderForm = (\r\n    a: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>,\r\n    b: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>\r\n  ): number => {\r\n    if (a.value['sectionItem'] && b.value['sectionItem']) {\r\n      return (\r\n        (a.value as ExtendedFormGroup).sectionItem.order -\r\n        (b.value as ExtendedFormGroup).sectionItem.order\r\n      );\r\n    } else if (a.value['formItem'] && b.value['formItem']) {\r\n      return (\r\n        (a.value as ExtendedFormControl).formItem.order -\r\n        (b.value as ExtendedFormControl).formItem.order\r\n      );\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  getFormArrayControls(\r\n    control: ExtendedFormGroupArray\r\n  ): Array<ExtendedFormGroup> {\r\n    if (control instanceof ExtendedFormGroupArray) {\r\n      return control.controls as Array<ExtendedFormGroup>;\r\n    } else {\r\n      console.warn(\r\n        'Error in getFormArrayControls: control is not an instance of ExtendedFormGroupArray'\r\n      );\r\n      return [];\r\n    }\r\n  }\r\n\r\n  controlValueChanged(): void {\r\n    this.submitted &&= false;\r\n  }\r\n\r\n  get sectionList() {\r\n    if (this.activeStep !== null) {\r\n      return [\r\n        this.extendedFormGroup.controls[\r\n          Object.keys(this.extendedFormGroup.controls)[this.activeStep]\r\n        ],\r\n      ];\r\n    } else {\r\n      return this.extendedFormGroup.controls;\r\n    }\r\n  }\r\n\r\n  validate(): void {\r\n    console.log(this.extendedFormGroup);\r\n  }\r\n\r\n  cancel(): void {\r\n    this.cancelEvent.emit();\r\n  }\r\n\r\n  next(): void {\r\n    this.submitted = true;\r\n    if (this.formService.validateForm(this.sectionList[0])) {\r\n      this.confirmationData = this.hasConfirmation(this.sectionList[0].value);\r\n      if (this.confirmationData) {\r\n        this.confirmationToggle = true;\r\n      } else {\r\n        this.nextEvent?.emit();\r\n        this.submitted = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find if the current selected values have a confirmation required\r\n   * @param value the property value of formGroup\r\n   */\r\n  hasConfirmation(value: any): ConfirmInformation {\r\n    let confirmation: ConfirmInformation = null;\r\n    if (typeof value === 'object') {\r\n      Object.keys(value).forEach((key: string) => {\r\n        if (value[key]?.confirm) {\r\n          confirmation = value[key].confirm;\r\n        }\r\n      });\r\n    }\r\n    return confirmation;\r\n  }\r\n\r\n  denyConfirmation(): void {\r\n    this.confirmationToggle = false;\r\n    this.confirmationData = null;\r\n  }\r\n\r\n  acceptConfirmation(): void {\r\n    this.denyConfirmation();\r\n    this.submitted = false;\r\n    this.nextEvent?.emit();\r\n  }\r\n\r\n  previous(): void {\r\n    this.previousEvent.emit();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "formItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Partial<DynamicFormItem>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "sectionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "sectionIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "IFormAction",
            "id": "interface-IFormAction-0d71a3aff2a7343e138db282f234731a1752f1d5eb531f2fa0cfc648c259b8c5caaf0a8180278bb6c621311d77a9af9cf5fe41e18cee2353fe0669be20fe412a",
            "file": "projects/dynamic-form/src/lib/i-form-action.enum.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFormAction {\r\n  hasAction: boolean;\r\n  label?: string;\r\n  theme?: string;\r\n  icon?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "hasAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Media",
            "id": "interface-Media-86932eac9e12c11c984312e01e42699c6298dd1300e5e3b2f603803ab8a8d3f1d1c1083d61b599bdafdf59de2ad30428f7580133188892893758e209dded5b4b",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from './dynamicFormType';\r\nimport { DynamicFormOption } from './dynamicFormOption';\r\nimport { AttributeTypeMap } from './models';\r\n\r\nexport enum RuleType {\r\n  required,\r\n  min,\r\n  max,\r\n  minLength,\r\n  maxLength,\r\n  pattern,\r\n  minThanReference,\r\n  minThanEqualsReference,\r\n  maxThanReference,\r\n  maxThanEqualReference,\r\n  confirm,\r\n}\r\n\r\nexport enum MediaKind {\r\n  Image,\r\n  Video,\r\n}\r\n\r\nexport interface formItemValidation {\r\n  required?: boolean;\r\n  min?: number | string;\r\n  max?: number | string;\r\n  minLength?: number | string;\r\n  maxLength?: number | string;\r\n}\r\n\r\nexport interface Rule {\r\n  value?: any;\r\n  message?: string;\r\n  type: RuleType;\r\n}\r\n\r\nexport interface Media {\r\n  id: string;\r\n  url: string;\r\n  kind: MediaKind;\r\n  mimeType: string;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nexport interface DynamicFormItem {\r\n  key: string | null;\r\n  category?: string | null; //subTitle\r\n  title?: string | null; //name\r\n  value?: any;\r\n  label?: string | null;\r\n  descriptionHeader?: string | null; //text\r\n  description?: string | null;\r\n  media?: Media[];\r\n  className?: string | null;\r\n  multi?: boolean;\r\n  order?: number;\r\n  placeholder?: string | null;\r\n  options?: Array<DynamicFormOption> | null;\r\n  rulerKey?: string | null;\r\n  condition?: any;\r\n  controlType: DynamicFormType;\r\n  rules?: Rule[];\r\n  controlMetaData?: {\r\n    label?: string;\r\n    description?: string;\r\n    inputGroupLabel?: string;\r\n    inputGroupPosition?: 'left' | 'right';\r\n  };\r\n}\r\n\r\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\r\n  { name: 'key', type: 'string' },\r\n  { name: 'value', type: 'object' },\r\n  { name: 'label', type: 'string' },\r\n  { name: 'description', type: 'string' },\r\n  { name: 'className', type: 'string' },\r\n  { name: 'required', type: 'boolean' },\r\n  { name: 'multi', type: 'boolean' },\r\n  { name: 'min', type: 'object' },\r\n  { name: 'max', type: 'object' },\r\n  { name: 'order', type: 'number' },\r\n  { name: 'placeholder', type: 'string' },\r\n  { name: 'options', type: 'Array<DynamicFormOption>' },\r\n  { name: 'rulerKey', type: 'string' },\r\n  { name: 'condition', type: 'object' },\r\n  { name: 'controlType', type: 'DynamicFormType' },\r\n  { name: 'controlMetaData', type: 'object' },\r\n];\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "kind",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaKind",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "mimeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Rule",
            "id": "interface-Rule-86932eac9e12c11c984312e01e42699c6298dd1300e5e3b2f603803ab8a8d3f1d1c1083d61b599bdafdf59de2ad30428f7580133188892893758e209dded5b4b",
            "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicFormType } from './dynamicFormType';\r\nimport { DynamicFormOption } from './dynamicFormOption';\r\nimport { AttributeTypeMap } from './models';\r\n\r\nexport enum RuleType {\r\n  required,\r\n  min,\r\n  max,\r\n  minLength,\r\n  maxLength,\r\n  pattern,\r\n  minThanReference,\r\n  minThanEqualsReference,\r\n  maxThanReference,\r\n  maxThanEqualReference,\r\n  confirm,\r\n}\r\n\r\nexport enum MediaKind {\r\n  Image,\r\n  Video,\r\n}\r\n\r\nexport interface formItemValidation {\r\n  required?: boolean;\r\n  min?: number | string;\r\n  max?: number | string;\r\n  minLength?: number | string;\r\n  maxLength?: number | string;\r\n}\r\n\r\nexport interface Rule {\r\n  value?: any;\r\n  message?: string;\r\n  type: RuleType;\r\n}\r\n\r\nexport interface Media {\r\n  id: string;\r\n  url: string;\r\n  kind: MediaKind;\r\n  mimeType: string;\r\n  name: string;\r\n  description: string;\r\n}\r\n\r\nexport interface DynamicFormItem {\r\n  key: string | null;\r\n  category?: string | null; //subTitle\r\n  title?: string | null; //name\r\n  value?: any;\r\n  label?: string | null;\r\n  descriptionHeader?: string | null; //text\r\n  description?: string | null;\r\n  media?: Media[];\r\n  className?: string | null;\r\n  multi?: boolean;\r\n  order?: number;\r\n  placeholder?: string | null;\r\n  options?: Array<DynamicFormOption> | null;\r\n  rulerKey?: string | null;\r\n  condition?: any;\r\n  controlType: DynamicFormType;\r\n  rules?: Rule[];\r\n  controlMetaData?: {\r\n    label?: string;\r\n    description?: string;\r\n    inputGroupLabel?: string;\r\n    inputGroupPosition?: 'left' | 'right';\r\n  };\r\n}\r\n\r\nexport const attributeTypeMapDynamicFormItem: AttributeTypeMap[] = [\r\n  { name: 'key', type: 'string' },\r\n  { name: 'value', type: 'object' },\r\n  { name: 'label', type: 'string' },\r\n  { name: 'description', type: 'string' },\r\n  { name: 'className', type: 'string' },\r\n  { name: 'required', type: 'boolean' },\r\n  { name: 'multi', type: 'boolean' },\r\n  { name: 'min', type: 'object' },\r\n  { name: 'max', type: 'object' },\r\n  { name: 'order', type: 'number' },\r\n  { name: 'placeholder', type: 'string' },\r\n  { name: 'options', type: 'Array<DynamicFormOption>' },\r\n  { name: 'rulerKey', type: 'string' },\r\n  { name: 'condition', type: 'object' },\r\n  { name: 'controlType', type: 'DynamicFormType' },\r\n  { name: 'controlMetaData', type: 'object' },\r\n];\r\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RuleType",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "FormService",
            "id": "injectable-FormService-b1e85db0fb8a058fa840794bc749ecda5a42493f38bbbc11e45a2dc0a510e3974e39a239511e092c3e82ab98c6c7218aaf2f548b2c29da3c244ef4e4e9f3d7b9",
            "file": "projects/dynamic-form/src/lib/form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "appendValidations",
                    "args": [
                        {
                            "name": "rule",
                            "type": "Rule",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "referenceControl",
                            "type": "ExtendedFormGroupControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "referenceValue",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rule",
                            "type": "Rule",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "referenceControl",
                            "type": "ExtendedFormGroupControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "referenceValue",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormItemsToArrayFormGroup",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupArray",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormItemsToControls",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupControls",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormItemsToFormGroup",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroup",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormItem>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dynamicFormSectionsToFormGroup",
                    "args": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormSection>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "original",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "config",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ keepForwardHistory: true }"
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroup",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Array<DynamicFormSection>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "original",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "{ keepForwardHistory: true }",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findNestedControl",
                    "args": [
                        {
                            "name": "forms",
                            "type": "ExtendedFormGroup | ExtendedFormGroup[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "controlKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupControl",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "forms",
                            "type": "ExtendedFormGroup | ExtendedFormGroup[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "controlKey",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formToDynamicFormResponseItems",
                    "args": [
                        {
                            "name": "data",
                            "type": "KeyValue<string | any> | Array<KeyValue<string, any>>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formGroup",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<DynamicFormResponseItem>",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "KeyValue<string | any> | Array<KeyValue<string, any>>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formGroup",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateControlValidator",
                    "args": [
                        {
                            "name": "validators",
                            "type": "formItemValidation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidatorFn[]",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "validators",
                            "type": "formItemValidation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateValidations",
                    "args": [
                        {
                            "name": "rules",
                            "type": "Rule[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rules",
                            "type": "Rule[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNestedFormInvalid",
                    "args": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 312,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateForm",
                    "args": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 396,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "ExtendedFormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormControl, ValidatorFn, Validators } from '@angular/forms';\r\nimport {\r\n  DynamicFormItem,\r\n  DynamicFormSection,\r\n  DynamicFormResponseItem,\r\n  DynamicFormType,\r\n  formItemValidation,\r\n  Rule,\r\n  RuleType,\r\n} from './model/models';\r\nimport {\r\n  ExtendedFormGroup,\r\n  ExtendedFormGroupControls,\r\n  ExtendedFormGroupControl,\r\n} from './model/custom-classes/extended-form-group';\r\nimport { ExtendedFormControl } from './model/custom-classes/extended-form-control';\r\nimport { ExtendedFormArray } from './model/custom-classes/extended-form-array';\r\nimport { ExtendedFormGroupArray } from './model/custom-classes/extended-form-group-array';\r\nimport { KeyValue } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class FormService {\r\n  constructor() {}\r\n\r\n  dynamicFormSectionsToFormGroup(\r\n    items: Array<DynamicFormSection>,\r\n    original?: ExtendedFormGroup,\r\n    config: { keepForwardHistory: boolean } = { keepForwardHistory: true }\r\n  ): ExtendedFormGroup {\r\n    const controls: ExtendedFormGroupControls = {};\r\n    const orderedItems = items.sort(\r\n      (a: DynamicFormSection, b: DynamicFormSection) => a.order - b.order\r\n    );\r\n    const existingKeys: boolean =\r\n      config.keepForwardHistory &&\r\n      original &&\r\n      orderedItems.every((item) => {\r\n        return original.get(item.key);\r\n      });\r\n    if (existingKeys) {\r\n      return original;\r\n    }\r\n    orderedItems.forEach((item: DynamicFormSection) => {\r\n      if (!!item.multi) {\r\n        const childControls: ExtendedFormGroupControls =\r\n          this.dynamicFormItemsToControls(item.items);\r\n        const formGroup: ExtendedFormGroup = new ExtendedFormGroup(\r\n          childControls,\r\n          item\r\n        );\r\n        const controlsArray: ExtendedFormGroup[] = [formGroup];\r\n        controls[item.key] = new ExtendedFormGroupArray(controlsArray, item);\r\n      } else {\r\n        // if section has an inner section call dynamicFormSectionsToFormGroup recursively\r\n        if (item.sections) {\r\n          controls[item.key] = this.dynamicFormSectionsToFormGroup(\r\n            item.sections\r\n          );\r\n        } else {\r\n          const childControls: ExtendedFormGroupControls =\r\n            this.dynamicFormItemsToControls(item.items);\r\n          controls[item.key] = new ExtendedFormGroup(childControls, item);\r\n          if (original) {\r\n            original.controls[item.key] = new ExtendedFormGroup(\r\n              childControls,\r\n              item\r\n            );\r\n          }\r\n        }\r\n      }\r\n    });\r\n    if (original) {\r\n      return original;\r\n    }\r\n    return new ExtendedFormGroup(controls);\r\n  }\r\n\r\n  dynamicFormItemsToControls(\r\n    items: Array<DynamicFormItem>\r\n  ): ExtendedFormGroupControls {\r\n    const controls: ExtendedFormGroupControls = {};\r\n    const orderedItems: Array<DynamicFormItem> = items?.sort(\r\n      (a: DynamicFormItem, b: DynamicFormItem) => a.order - b.order\r\n    );\r\n\r\n    orderedItems?.forEach((item: DynamicFormItem) => {\r\n      if (item.controlType === DynamicFormType.Text && item.multi) {\r\n        const controlsArray: FormControl[] = item.value\r\n          ? (item.value as Array<string>).map(\r\n              (val: string) => new FormControl(val)\r\n            )\r\n          : [new FormControl('')];\r\n        controls[item.key] = new ExtendedFormArray(item, controlsArray);\r\n      } else {\r\n        controls[item.key] = new ExtendedFormControl(\r\n          item,\r\n          item.value,\r\n          this.generateControlValidator(this.generateValidations(item.rules))\r\n        );\r\n      }\r\n    });\r\n    return controls;\r\n  }\r\n\r\n  dynamicFormItemsToFormGroup(\r\n    items: Array<DynamicFormItem>\r\n  ): ExtendedFormGroup {\r\n    const controls: ExtendedFormGroupControls =\r\n      this.dynamicFormItemsToControls(items);\r\n    const formGroup: ExtendedFormGroup = new ExtendedFormGroup(controls);\r\n    return formGroup;\r\n  }\r\n\r\n  dynamicFormItemsToArrayFormGroup(\r\n    items: Array<DynamicFormItem>\r\n  ): ExtendedFormGroupArray {\r\n    const formGroup: ExtendedFormGroup =\r\n      this.dynamicFormItemsToFormGroup(items);\r\n    return new ExtendedFormGroupArray([formGroup]);\r\n  }\r\n\r\n  formToDynamicFormResponseItems(\r\n    data: KeyValue<string, any> | Array<KeyValue<string, any>>,\r\n    formGroup: ExtendedFormGroup\r\n  ): Array<DynamicFormResponseItem> {\r\n    const dynamicFormSubmitValues: Array<DynamicFormResponseItem> = [];\r\n\r\n    for (const section of Object.keys(data)) {\r\n      const targetSection: ExtendedFormGroupControl = formGroup.get(section);\r\n      if (targetSection) {\r\n        if (targetSection instanceof ExtendedFormGroupArray) {\r\n          (targetSection as ExtendedFormGroupArray).controls.map(\r\n            (item: ExtendedFormGroup, sectionIndex: number) => {\r\n              for (const key of Object.keys(data[section][sectionIndex])) {\r\n                const target: ExtendedFormControl | ExtendedFormArray =\r\n                  (item.get(key) as ExtendedFormControl | ExtendedFormArray) ||\r\n                  null;\r\n                if (target) {\r\n                  const {\r\n                    value,\r\n                    formItem,\r\n                  }: ExtendedFormControl | ExtendedFormArray = target;\r\n                  dynamicFormSubmitValues.push({\r\n                    key,\r\n                    formItem,\r\n                    value,\r\n                    sectionId: section,\r\n                    sectionIndex,\r\n                  });\r\n                }\r\n              }\r\n            }\r\n          );\r\n        } else {\r\n          for (const key of Object.keys(data[section])) {\r\n            const target: ExtendedFormControl | ExtendedFormArray =\r\n              (targetSection.get(key) as\r\n                | ExtendedFormControl\r\n                | ExtendedFormArray) || null;\r\n            if (target) {\r\n              const {\r\n                value,\r\n                formItem,\r\n              }: ExtendedFormControl | ExtendedFormArray = target;\r\n              dynamicFormSubmitValues.push({\r\n                key,\r\n                formItem,\r\n                value,\r\n                sectionId: section,\r\n                sectionIndex: 0,\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return dynamicFormSubmitValues;\r\n  }\r\n\r\n  generateValidations(rules: Rule[]): { [key: string]: any } {\r\n    let validations: { [key: string]: any } = {};\r\n    rules\r\n      ?.sort((a: Rule, b: Rule) => a.type - b.type)\r\n      .forEach((rule: Rule) => {\r\n        switch (rule.type) {\r\n          case RuleType.required:\r\n            validations = { ...validations, ...{ required: true } };\r\n            break;\r\n          case RuleType.min:\r\n            validations = { ...validations, ...{ min: rule.value } };\r\n            break;\r\n          case RuleType.max:\r\n            validations = { ...validations, ...{ max: rule.value } };\r\n            break;\r\n          case RuleType.maxLength:\r\n            validations = { ...validations, ...{ maxLength: rule.value } };\r\n            break;\r\n          case RuleType.minLength:\r\n            validations = { ...validations, ...{ minLength: rule.value } };\r\n            break;\r\n          case RuleType.pattern:\r\n            validations = { ...validations, ...{ pattern: rule.value } };\r\n            break;\r\n          case RuleType.minThanEqualsReference:\r\n            validations = { ...validations, ...{ min: rule.value } };\r\n            break;\r\n          case RuleType.minThanReference:\r\n            validations = { ...validations, ...{ min: rule.value } };\r\n            break;\r\n          case RuleType.maxThanReference:\r\n            validations = { ...validations, ...{ max: rule.value } };\r\n            break;\r\n          case RuleType.maxThanEqualReference:\r\n            validations = { ...validations, ...{ max: rule.value } };\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n    return validations;\r\n  }\r\n\r\n  appendValidations(\r\n    rule: Rule,\r\n    referenceControl?: ExtendedFormGroupControl,\r\n    referenceValue?: { key: string; value: string | number | boolean }\r\n  ): { validator: ValidatorFn[]; customRule: Rule } {\r\n    let customRule: Rule;\r\n    switch (rule.type) {\r\n      case RuleType.maxThanReference:\r\n        customRule = {\r\n          ...rule,\r\n          ...{\r\n            value: referenceControl\r\n              ? Number(referenceControl.value) - 1\r\n              : Number(referenceValue.value) - 1,\r\n          },\r\n        };\r\n        break;\r\n      case RuleType.maxThanEqualReference:\r\n        customRule = {\r\n          ...rule,\r\n          ...{\r\n            value: referenceControl\r\n              ? referenceControl.value\r\n              : referenceValue.value,\r\n          },\r\n        };\r\n        break;\r\n      case RuleType.minThanReference:\r\n        customRule = {\r\n          ...rule,\r\n          ...{\r\n            value: referenceControl\r\n              ? Number(referenceControl.value) + 1\r\n              : Number(referenceValue.value) + 1,\r\n          },\r\n        };\r\n        break;\r\n      case RuleType.minThanEqualsReference:\r\n        customRule = {\r\n          ...rule,\r\n          ...{\r\n            value: referenceControl\r\n              ? referenceControl.value\r\n              : referenceValue.value,\r\n          },\r\n        };\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return {\r\n      validator: this.generateControlValidator(\r\n        this.generateValidations([customRule])\r\n      ),\r\n      customRule,\r\n    };\r\n  }\r\n\r\n  generateControlValidator(validators: formItemValidation): ValidatorFn[] {\r\n    const validations: ValidatorFn[] = [];\r\n    Object.keys(validators).forEach((validator: string) => {\r\n      switch (validator) {\r\n        case 'min':\r\n          validations.push(Validators.min(Number(validators[validator])));\r\n          break;\r\n        case 'max':\r\n          validations.push(Validators.max(Number(validators[validator])));\r\n          break;\r\n        case 'minLength':\r\n          validations.push(Validators.minLength(Number(validators[validator])));\r\n          break;\r\n        case 'maxLength':\r\n          validations.push(Validators.maxLength(Number(validators[validator])));\r\n          break;\r\n        case 'required':\r\n          validators.required && validations.push(Validators.required);\r\n          break;\r\n        case 'pattern':\r\n          validations.push(Validators.pattern(validators[validator]));\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    return validations;\r\n  }\r\n\r\n  isNestedFormInvalid(form: ExtendedFormGroup): boolean {\r\n    return Object.keys(form.controls).some((key: string) => {\r\n      if (form.controls[key]?.valid) {\r\n        const formGroup: ExtendedFormGroup = (\r\n          form.controls[key] as ExtendedFormControl\r\n        )?.formGroup as ExtendedFormGroup;\r\n        if (formGroup && !formGroup.valid) {\r\n          return true;\r\n        }\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  findNestedControl(\r\n    forms: ExtendedFormGroup | ExtendedFormGroup[],\r\n    controlKey: string\r\n  ): ExtendedFormGroupControl {\r\n    let existingControl: ExtendedFormGroupControl;\r\n\r\n    if (Array.isArray(forms)) {\r\n      forms.some((form: ExtendedFormGroup) => {\r\n        this.findNestedControl(form, controlKey);\r\n      });\r\n    } else {\r\n      if (forms.controls[controlKey]) {\r\n        existingControl = forms.controls[\r\n          controlKey\r\n        ] as ExtendedFormGroupControl;\r\n      } else {\r\n        Object.keys(forms.controls).forEach((key: string) => {\r\n          if ((forms.controls[key] as ExtendedFormGroup).controls) {\r\n            if (\r\n              (forms.controls[key] as ExtendedFormGroup).controls[controlKey]\r\n            ) {\r\n              existingControl = (forms.controls[key] as ExtendedFormGroup)\r\n                .controls[controlKey] as ExtendedFormGroupControl;\r\n            } else {\r\n              Object.keys(\r\n                (forms.controls[key] as ExtendedFormGroup).controls\r\n              ).forEach((control: string) => {\r\n                (forms.controls[key] as ExtendedFormGroup).controls[control];\r\n                if (\r\n                  (\r\n                    (forms.controls[key] as ExtendedFormGroup).controls[\r\n                      control\r\n                    ] as ExtendedFormControl\r\n                  ).formGroup\r\n                ) {\r\n                  if (\r\n                    (\r\n                      (forms.controls[key] as ExtendedFormGroup).controls[\r\n                        control\r\n                      ] as ExtendedFormControl\r\n                    ).formGroup.controls[controlKey]\r\n                  ) {\r\n                    existingControl = (\r\n                      (forms.controls[key] as ExtendedFormGroup).controls[\r\n                        control\r\n                      ] as ExtendedFormControl\r\n                    ).formGroup.controls[controlKey];\r\n                  }\r\n                }\r\n              });\r\n            }\r\n          }\r\n          if ((forms.controls[key] as ExtendedFormControl).formGroup) {\r\n            if (\r\n              (forms.controls[key] as ExtendedFormControl).formGroup.controls[\r\n                controlKey\r\n              ]\r\n            ) {\r\n              existingControl = (forms.controls[key] as ExtendedFormControl)\r\n                .formGroup.controls[controlKey];\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    return existingControl;\r\n  }\r\n\r\n  validateForm(form: ExtendedFormGroup): boolean {\r\n    form.updateValueAndValidity();\r\n    if (!form.valid) {\r\n      return form.valid;\r\n    }\r\n    return !this.isNestedFormInvalid(form);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ExtendedFormArray",
            "id": "class-ExtendedFormArray-5c162ec5bf0a1be803565564028e15d02e32cc315e849291bf00d2e109d7aec483c22ab93b57f3ba49772267938c8d154b6010dcf7f76d97abb6b756cc566105",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-array.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormArray, FormControl } from '@angular/forms';\r\nimport { DynamicFormItem } from '../../model/dynamicFormItem';\r\n\r\nexport class ExtendedFormArray extends FormArray {\r\n  formItem: DynamicFormItem;\r\n\r\n  constructor(formItem: DynamicFormItem, controls: Array<FormControl>) {\r\n    super(controls);\r\n    this.formItem = formItem;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "controls",
                        "type": "Array<FormControl>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "controls",
                        "type": "Array<FormControl>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "formItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormItem",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormArray",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExtendedFormControl",
            "id": "class-ExtendedFormControl-9b3497432c25ffba2d2e361a7a3222fa82f74c13a462f0ee2dbb5a4fc06c856c675bfe3d3c0b427582ca63a1f33da2c53bfa3805d9288bb3feafc1b0a9c74f2d",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-control.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormControl, AsyncValidatorFn, ValidatorFn } from '@angular/forms';\r\nimport { DynamicFormItem } from '../../model/dynamicFormItem';\r\nimport { ExtendedFormGroup } from './extended-form-group';\r\nimport { ExtendedFormGroupArray } from './extended-form-group-array';\r\n\r\nexport class ExtendedFormControl extends FormControl {\r\n  formItem: DynamicFormItem;\r\n  options: DynamicFormItem['options'] = [];\r\n  formGroup: ExtendedFormGroup | ExtendedFormGroupArray;\r\n\r\n  constructor(\r\n    formItem: DynamicFormItem,\r\n    value: any,\r\n    validator?:\r\n      | ValidatorFn\r\n      | ValidatorFn[]\r\n      | AsyncValidatorFn\r\n      | AsyncValidatorFn[]\r\n      | null\r\n  ) {\r\n    super(value, validator);\r\n    this.formItem = formItem;\r\n    this.options = formItem.options ? formItem.options : null;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "validator",
                        "type": "ValidatorFn | ValidatorFn[] | AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "formItem",
                        "type": "DynamicFormItem",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validator",
                        "type": "ValidatorFn | ValidatorFn[] | AsyncValidatorFn | AsyncValidatorFn[] | null",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "formGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedFormGroup | ExtendedFormGroupArray",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "formItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormItem",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormControl",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExtendedFormGroup",
            "id": "class-ExtendedFormGroup-2d6a59a035eea978e77cdd04aab570779786ca9f074b4660aed62e79ad5ffb6e4e67f4fd153786ecdd2e50b54a6aebc50beecebc5e83ce2b1cc57d48fa4cafb2",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {\n  FormGroup,\n  ValidatorFn,\n  AbstractControlOptions,\n  AsyncValidatorFn,\n} from '@angular/forms';\nimport { DynamicFormSection } from '../../model/dynamicFormSection';\nimport { ExtendedFormControl } from './extended-form-control';\nimport { ExtendedFormArray } from './extended-form-array';\nimport { ExtendedFormGroupArray } from './extended-form-group-array';\nexport interface ExtendedFormGroupControls {\n  [key: string]: ExtendedFormGroupControl | ExtendedFormGroup;\n}\n\nexport type ExtendedFormGroupControl =\n  | ExtendedFormControl\n  | ExtendedFormArray\n  | ExtendedFormGroup\n  | ExtendedFormGroupArray;\n\nexport class ExtendedFormGroup extends FormGroup {\n  sectionItem: DynamicFormSection;\n\n  constructor(\n    controls: ExtendedFormGroupControls,\n    item?: DynamicFormSection,\n    validatorOrOpts?: ValidatorFn | ValidatorFn[] | AbstractControlOptions,\n    asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[]\n  ) {\n    super(controls, validatorOrOpts, asyncValidator);\n    this.sectionItem = item;\n  }\n\n  get(path: string | (string | number)[]): ExtendedFormGroupControl {\n    return super.get(path) as ExtendedFormGroupControl;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controls",
                        "type": "ExtendedFormGroupControls",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "controls",
                        "type": "ExtendedFormGroupControls",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "validatorOrOpts",
                        "type": "ValidatorFn | ValidatorFn[] | AbstractControlOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "asyncValidator",
                        "type": "AsyncValidatorFn | AsyncValidatorFn[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "sectionItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormSection",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "path",
                            "type": "string | (string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ExtendedFormGroupControl",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string | (string | number)[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "FormGroup",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ExtendedFormGroupArray",
            "id": "class-ExtendedFormGroupArray-a263731f769763efffbe78b0d9406c3ea2a64b9afb5101561b22706073fbc284396f2800b5764b318ce328c4b885894fba48b5db6cc79ed77f7530accef451d5",
            "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group-array.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormArray } from '@angular/forms';\r\nimport { DynamicFormSection } from '../../model/dynamicFormSection';\r\nimport { ExtendedFormGroup } from './extended-form-group';\r\n\r\nexport class ExtendedFormGroupArray extends FormArray {\r\n  sectionItem: DynamicFormSection;\r\n\r\n  constructor(controls: Array<ExtendedFormGroup>, item?: DynamicFormSection) {\r\n    super(controls);\r\n    this.sectionItem = item;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "controls",
                        "type": "Array<ExtendedFormGroup>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "controls",
                        "type": "Array<ExtendedFormGroup>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "item",
                        "type": "DynamicFormSection",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "sectionItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormSection",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "FormArray",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "DigitOnlyDirective",
            "id": "directive-DigitOnlyDirective-33f8cf8fa5538f870ef6484727ae6f5894d22c89f867f4bba8d27ea336b974df4c5e2bff3e9ce684b419944e011e2a227a15bb81d229450462e8f456d39978f5",
            "file": "projects/dynamic-form/src/lib/digit-only/digit-only.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  NgModule,\r\n  AfterViewInit,\r\n  Input,\r\n  AfterViewChecked,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport { formatNumber } from '@angular/common';\r\nimport { ExtendedFormControl } from '../model/custom-classes/extended-form-control';\r\n\r\n@Directive({\r\n  selector: '[digitsOnly]',\r\n})\r\nexport class DigitOnlyDirective implements AfterViewInit, AfterViewChecked {\r\n  inputElement: HTMLInputElement;\r\n  element: ElementRef;\r\n  @Input() formControl: ExtendedFormControl;\r\n\r\n  constructor(public el: ElementRef, private cd: ChangeDetectorRef) {\r\n    this.element = el;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.inputElement = this.element.nativeElement.querySelector('input');\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    const { formattedValue } = this.formatValue();\r\n    this.inputElement.value = formattedValue;\r\n  }\r\n\r\n  @HostListener('input', ['$event'])\r\n  onInputChange(event: Event) {\r\n    const { initialValue, value, formattedValue } = this.formatValue();\r\n    if (initialValue !== this.inputElement.value) {\r\n      event?.stopPropagation();\r\n    }\r\n    this.formControl.patchValue(value);\r\n    this.inputElement.value = formattedValue;\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  formatValue(): {\r\n    initialValue: string;\r\n    value: string;\r\n    formattedValue: string;\r\n  } {\r\n    const initialValue: string = this.inputElement.value;\r\n    const value: string = initialValue\r\n      .split(/[.,]/)[0]\r\n      .replace(/[^0-9]*/g, '')\r\n      .replace(/^0+(?!\\.|$)/, '');\r\n    const formattedValue: string = value\r\n      ? formatNumber(Number(value), 'se')\r\n      : value;\r\n    return {\r\n      initialValue,\r\n      value,\r\n      formattedValue,\r\n    };\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [DigitOnlyDirective],\r\n  exports: [DigitOnlyDirective],\r\n})\r\nexport class DigitOnlyModule {}\r\n",
            "selector": "[digitsOnly]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "ExtendedFormControl",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "input",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36
                }
            ],
            "propertiesClass": [
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLInputElement",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "formatValue",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'input', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "AfterViewInit",
                "AfterViewChecked"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "DemoComponent",
            "id": "component-DemoComponent-5278c085e9d2a8af1d447a0a5286fb7a71986b1a267c23ce155386d0ac5a98ab7cb11037307bd543da546068c2baca4fe79b23d567604435884ed28066e775cc",
            "file": "stories/demo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-dynamic-form",
            "styleUrls": [
                "./demo.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./demo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "cancelAction",
                    "defaultValue": "{ hasAction: false, label: 'Cancel' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "IFormAction",
                    "decorators": []
                },
                {
                    "name": "formSection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "DynamicFormSection[]",
                    "decorators": []
                },
                {
                    "name": "hasFormActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "nextAction",
                    "defaultValue": "{ hasAction: false, label: 'Next' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "IFormAction",
                    "decorators": []
                },
                {
                    "name": "previousAction",
                    "defaultValue": "{ hasAction: false, label: 'Previous' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "IFormAction",
                    "decorators": []
                },
                {
                    "name": "saveAction",
                    "defaultValue": "{ hasAction: false, label: 'Save' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "IFormAction",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dynamicForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DynamicFormComponent",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dynamicForm'"
                        }
                    ]
                },
                {
                    "name": "extendedFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExtendedFormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "param",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "param",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatNumberLocale",
                    "args": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNestedControlValue",
                    "args": [
                        {
                            "name": "control",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getObjectKeys",
                    "args": [
                        {
                            "name": "obj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToNextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "gotToPreviousStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { formatNumber } from '@angular/common';\nimport {\n  Component,\n  Input,\n  OnInit,\n  OnChanges,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport {\n  DynamicFormSection,\n  FormService,\n  ExtendedFormGroup,\n  DynamicFormComponent,\n} from 'projects/dynamic-form/src/lib';\nimport { IFormAction } from 'projects/dynamic-form/src/lib/i-form-action.enum';\n\n@Component({\n  selector: 'storybook-dynamic-form',\n  templateUrl: './demo.component.html',\n  styleUrls: ['./demo.scss'],\n})\nexport class DemoComponent implements OnInit, OnChanges {\n  extendedFormGroup: ExtendedFormGroup;\n  @ViewChild('dynamicForm') dynamicForm: DynamicFormComponent;\n  constructor(private formService: FormService) { }\n\n  ngOnInit(): void {\n    this.extendedFormGroup = this.formService.dynamicFormSectionsToFormGroup([\n      this.formSection[this.activeStep],\n    ]);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void { }\n\n  @Input()\n  activeStep: number;\n\n  @Input()\n  formSection: DynamicFormSection[];\n\n  @Input()\n  hasFormActions: boolean;\n\n  @Input()\n  nextAction: IFormAction = { hasAction: false, label: 'Next' };\n\n  @Input()\n  previousAction: IFormAction = { hasAction: false, label: 'Previous' };\n\n  @Input()\n  cancelAction: IFormAction = { hasAction: false, label: 'Cancel' };\n\n  @Input()\n  saveAction: IFormAction = { hasAction: false, label: 'Save' };\n\n  goToNextStep(): void {\n    this.activeStep += 1;\n    this.extendedFormGroup = this.formService.dynamicFormSectionsToFormGroup(\n      [this.formSection[this.activeStep]],\n      this.extendedFormGroup\n    );\n  }\n\n  gotToPreviousStep(): void {\n    this.activeStep -= 1;\n  }\n\n  getObjectKeys(obj: { [key: string]: any }): string[] {\n    return Object.keys(obj);\n  }\n\n  edit(param): void {\n    this.dynamicForm.editItemFromParent(param);\n  }\n\n  delete(param): void {\n    this.dynamicForm.removeItemFromParent(param);\n  }\n\n  getNestedControlValue(control): string[] {\n    return Object.values(Object.values(control)[0]);\n  }\n\n  formatNumberLocale(value): string {\n    return Number(value) ? formatNumber(value, 'se') : value;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep {\r\n  @import \"~@sebgroup/bootstrap/scss/bootstrap\";\r\n  .radio.card {\r\n    margin-bottom: 1rem;\r\n    display: flex;\r\n    padding: 0.75rem 1rem;\r\n    flex-direction: column;\r\n    min-height: 68px;\r\n    flex-wrap: wrap;\r\n    .title {\r\n      display: flex;\r\n      align-items: center;\r\n      flex-wrap: wrap;\r\n      white-space: nowrap;\r\n    }\r\n    .options {\r\n      padding: 0;\r\n    }\r\n    &.error {\r\n      outline: 1px solid $danger;\r\n    }\r\n    sebng-radio-group {\r\n      ::ng-deep {\r\n        .radio-group {\r\n          margin-bottom: 0;\r\n        }\r\n        .custom-radio {\r\n          margin-left: 0.25rem;\r\n          .row {\r\n            .col {\r\n              min-width: 80px;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    label {\r\n      margin-bottom: 0;\r\n      margin-right: 0.25rem;\r\n    }\r\n    span {\r\n      font-size: $font-size-sm;\r\n      font-weight: $font-weight-normal;\r\n    }\r\n    &.data {\r\n      padding: 0 1rem;\r\n      flex-direction: column;\r\n      align-items: flex-start;\r\n      .title {\r\n        width: 100%;\r\n        border-bottom: 1px solid $gray-200;\r\n        padding: 1.5rem 1rem 1rem;\r\n      }\r\n\r\n      table.radio-group-data {\r\n        width: 35%;\r\n        margin: 1rem 0;\r\n        tr {\r\n          padding-left: 1rem;\r\n          td {\r\n            height: 3rem;\r\n            vertical-align: middle;\r\n            padding-left: 1rem;\r\n            &:nth-child(2) {\r\n              text-align: right;\r\n              font-weight: $font-weight-medium;\r\n              padding-right: 1rem;\r\n            }\r\n            &:last-child {\r\n              width: 6%;\r\n              padding: 0;\r\n              &.picto {\r\n                ::ng-deep {\r\n                  svg,\r\n                  img {\r\n                    width: 1.5rem;\r\n                    height: 1.5rem;\r\n                    fill: $primary;\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        @include media-breakpoint-down(md) {\r\n          width: 100%;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./demo.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<ng-container *ngIf=\"extendedFormGroup\">\r\n  <app-dynamic-form\r\n    #dynamicForm\r\n    [extendedFormGroup]=\"extendedFormGroup\"\r\n    [radioTableTemplate]=\"radioTableTmpl\"\r\n    [radioTemplate]=\"radioTmpl\"\r\n    [disclaimerTemplate]=\"disclaimerTmpl\"\r\n    [activeStep]=\"activeStep\"\r\n    [hasFormActions]=\"hasFormActions\"\r\n    [nextAction]=\"nextAction\"\r\n    [previousAction]=\"previousAction\"\r\n    [saveAction]=\"saveAction\"\r\n    [cancelAction]=\"cancelAction\"\r\n    (nextEvent)=\"goToNextStep()\"\r\n    (previousEvent)=\"gotToPreviousStep()\"\r\n  ></app-dynamic-form>\r\n</ng-container>\r\n\r\n<ng-template #numberTmpl let-context=\"context\" let-error=\"error\">\r\n  <div class=\"card px-3 py-4\" [formGroup]=\"extendedFormGroup\">\r\n    <div class=\"input-metadata mb-3\" style=\"max-width: 75%\">\r\n      <h3>{{ context?.formItem?.descriptionHeader }}</h3>\r\n      <p class=\"mt-3\">{{ context?.formItem?.description }}</p>\r\n    </div>\r\n    <div class=\"input\" style=\"max-width: 75%\">\r\n      <span class=\"font-weight-bold d-block\">{{\r\n        context?.formItem?.controlMetaData?.description\r\n      }}</span>\r\n      <span>{{ context?.formItem?.controlMetaData?.label }}</span>\r\n      <sebng-textbox\r\n        className=\"dynamic-form-item\"\r\n        pattern=\"[0-9]*\"\r\n        inputmode=\"numeric\"\r\n        type=\"text\"\r\n        digitsOnly\r\n        [rightText]=\"context?.formItem?.controlMetaData?.inputGroupLabel\"\r\n        [formControl]=\"context\"\r\n        [error]=\"error\"\r\n      ></sebng-textbox>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #disclaimerTmpl let-context=\"context\">\r\n  <div class=\"card px-3 py-4\">\r\n    <h3>{{ context?.formItem?.descriptionHeader }}</h3>\r\n    <p>{{ context?.formItem?.description }}</p>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #itemTmpl>\r\n  <h3>{{ context?.descriptionHeader }}</h3>\r\n  <p>{{ context?.description }}</p>\r\n</ng-template>\r\n\r\n<ng-template #radioTmpl let-context=\"context\" let-error=\"error\">\r\n  <div class=\"radio\" [formGroup]=\"extendedFormGroup\">\r\n    <div class=\"col-12 p-0\">\r\n      <sebng-radio-group\r\n        className=\"dynamic-form-item\"\r\n        [label]=\"\r\n          context?.formItem?.label ||\r\n          context?.formItem?.controlMetaData?.description\r\n        \"\r\n        [condensed]=\"true\"\r\n        [inline]=\"true\"\r\n        [formControl]=\"context\"\r\n        [list]=\"context.formItem.options\"\r\n        [error]=\"error\"\r\n      ></sebng-radio-group>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #cardTmpl let-context=\"context\" let-error=\"error\">\r\n  <div class=\"card px-3 py-4\">\r\n    <h3>{{ context?.formItem?.descriptionHeader }}</h3>\r\n    <p>{{ context?.formItem?.description }}</p>\r\n    <div class=\"row\" [formGroup]=\"extendedFormGroup\">\r\n      <div class=\"col-6\">\r\n        <sebng-toggle-selector\r\n          [formControl]=\"context\"\r\n          [list]=\"context.formItem.options\"\r\n          [error]=\"!!error\"\r\n          [errorMessage]=\"error\"\r\n        ></sebng-toggle-selector>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n\r\n<ng-template #radioTableTmpl let-context=\"context\" let-error=\"error\">\r\n  <ng-container *ngIf=\"context.value.value.followUpItems?.multi; else single\">\r\n    <table\r\n      class=\"table table-hover\"\r\n      *ngIf=\"context.value?.formGroup.value?.length\"\r\n    >\r\n      <thead>\r\n        <tr>\r\n          <th\r\n            *ngFor=\"\r\n              let section of context.value.value.followUpItems.items[0].sections\r\n            \"\r\n          >\r\n            {{ section.title }}\r\n          </th>\r\n          <th></th>\r\n          <th></th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr *ngFor=\"let item of context.value.formGroup.value; index as i\">\r\n          <ng-container *ngFor=\"let key of getObjectKeys(item)\">\r\n            <ng-container *ngFor=\"let itemKey of getObjectKeys(item[key])\">\r\n              <td *ngFor=\"let val of getObjectKeys(item[key][itemKey])\">\r\n                {{ item[key][itemKey][val] }}\r\n              </td>\r\n            </ng-container>\r\n          </ng-container>\r\n          <td>\r\n            <button\r\n              class=\"btn btn-sm btn-secondary\"\r\n              type=\"button\"\r\n              (click)=\"\r\n                edit({\r\n                  formArray: context.value.formGroup,\r\n                  index: i,\r\n                  parentKey: context.value.formItem.key\r\n                })\r\n              \"\r\n            >\r\n              Edit\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button\r\n              class=\"btn btn-sm btn-secondary btn-danger\"\r\n              type=\"button\"\r\n              (click)=\"delete({ form: context.value, index: i })\"\r\n            >\r\n              Delete\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </ng-container>\r\n  <ng-template #single>\r\n    <div class=\"radio card data\">\r\n      <div class=\"title\">\r\n        <label *ngIf=\"context?.value?.formItem?.controlMetaData?.label\">\r\n          {{ context.value.formItem.controlMetaData.label }}\r\n        </label>\r\n        <span\r\n          *ngIf=\"context?.value?.formItem?.controlMetaData?.description\"\r\n        ></span>\r\n      </div>\r\n      <table class=\"radio-group-data cursor-pointer\">\r\n        <tbody>\r\n          <tr\r\n            *ngFor=\"\r\n              let control of context.value.formGroup.controls;\r\n              index as i;\r\n              trackBy: trackByFn\r\n            \"\r\n            (click)=\"\r\n              edit({\r\n                formArray: context.value.formGroup,\r\n                index: i,\r\n                parentKey: context.value.formItem.key\r\n              })\r\n            \"\r\n          >\r\n            <td>value</td>\r\n            <ng-container\r\n              *ngFor=\"let item of getNestedControlValue(control.value)\"\r\n            >\r\n              <td class=\"pr-0\">{{ formatNumberLocale(item) }}</td>\r\n            </ng-container>\r\n            <td class=\"picto\">\r\n              <sebng-button theme=\"link\" className=\"p-0 font-weight-bold\">\r\n                <svg\r\n                  id=\"PIKTO_REGULAR\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  viewBox=\"0 0 192 512\"\r\n                  width=\"32px\"\r\n                  height=\"32px\"\r\n                >\r\n                  <path\r\n                    d=\"M166.9 264.5l-117.8 116c-4.7 4.7-12.3 4.7-17 0l-7.1-7.1c-4.7-4.7-4.7-12.3 0-17L127.3 256 25.1 155.6c-4.7-4.7-4.7-12.3 0-17l7.1-7.1c4.7-4.7 12.3-4.7 17 0l117.8 116c4.6 4.7 4.6 12.3-.1 17z\"\r\n                  />\r\n                </svg>\r\n              </sebng-button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </ng-template>\r\n</ng-template>\r\n"
        },
        {
            "name": "DynamicFormComponent",
            "id": "component-DynamicFormComponent-e1075222483c398a4eb8fc550fde0b18601d761439389c3321c77050c68221c751919ffa2b5cab2603f3f00b46f9a52ea7394b3be7b0871ffbd1e5479468fb83",
            "file": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "FormService"
                }
            ],
            "selector": "app-dynamic-form",
            "styleUrls": [],
            "styles": [
                "\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    "
            ],
            "templateUrl": [
                "./dynamic-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "actionsTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "activeStep",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "cancelAction",
                    "defaultValue": "{\r\n    hasAction: true,\r\n    label: 'Cancel',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "IFormAction",
                    "decorators": []
                },
                {
                    "name": "cardTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "checkboxTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "datePickerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "deleteAction",
                    "defaultValue": "{\r\n    hasAction: true,\r\n    label: 'Delete',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "IFormAction",
                    "decorators": []
                },
                {
                    "name": "disclaimerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "dropdownTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "extendedFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "ExtendedFormGroup",
                    "decorators": []
                },
                {
                    "name": "hasFormActions",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "inputMetadataTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "itemCustomClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "nextAction",
                    "defaultValue": "{\r\n    hasAction: true,\r\n    label: 'Next',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "IFormAction",
                    "decorators": []
                },
                {
                    "name": "numberTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "previousAction",
                    "defaultValue": "{\r\n    hasAction: true,\r\n    label: 'Previous',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "IFormAction",
                    "decorators": []
                },
                {
                    "name": "radioTableTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "radioTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "saveAction",
                    "defaultValue": "{\r\n    hasAction: true,\r\n    label: 'Save',\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "IFormAction",
                    "decorators": []
                },
                {
                    "name": "savedFormData",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "sectionTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "textAreaTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "toggleSelectorTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "nextEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "previousEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "confirmationData",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfirmInformation",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "confirmationToggle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "followUpModalToggle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 108
                },
                {
                    "name": "newFormGroup",
                    "defaultValue": "{\r\n    form: null,\r\n    index: null,\r\n    parentKey: null,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "orderForm",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 371
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 94
                }
            ],
            "methodsClass": [
                {
                    "name": "acceptConfirmation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 460,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addNewItemToFormArrayWithId",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "sectionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 265,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nADD NEW ITEM TO FORM ARRAY WITH ID:\nDuplicates the whole section or a form item within a section\n",
                    "description": "<p>ADD NEW ITEM TO FORM ARRAY WITH ID:\nDuplicates the whole section or a form item within a section</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8337,
                                "end": 8340,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8331,
                                "end": 8336,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>section key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8366,
                                "end": 8368,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "id"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 8360,
                                "end": 8365,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the id of the form item which should be duplicated</p>\n"
                        },
                        {
                            "name": {
                                "pos": 8433,
                                "end": 8445,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "sectionIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 8427,
                                "end": 8432,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>if the formgroup is an array this is the index of the formgroup item</p>\n"
                        }
                    ]
                },
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 422,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "controlValueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 402,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createFormGroup",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "denyConfirmation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 455,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dimissFollowUpModal",
                    "args": [
                        {
                            "name": "item",
                            "type": "ExtendedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ExtendedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editItemFromParent",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 352,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormArrayControls",
                    "args": [
                        {
                            "name": "control",
                            "type": "ExtendedFormGroupArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<ExtendedFormGroup>",
                    "typeParameters": [],
                    "line": 389,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "ExtendedFormGroupArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasConfirmation",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ConfirmInformation",
                    "typeParameters": [],
                    "line": 443,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFind if the current selected values have a confirmation required\n",
                    "description": "<p>Find if the current selected values have a confirmation required</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14259,
                                "end": 14264,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14253,
                                "end": 14258,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the property value of formGroup</p>\n"
                        }
                    ]
                },
                {
                    "name": "modalShouldBeRendered",
                    "args": [
                        {
                            "name": "control",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 426,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previous",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 466,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeItemAtIndexFromFormArrayWithId",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "info",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "sectionIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 306,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nREMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\nRemoves the whole section or a form item within a section\n",
                    "description": "<p>REMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\nRemoves the whole section or a form item within a section</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9964,
                                "end": 9967,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9958,
                                "end": 9963,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>section key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 9993,
                                "end": 9997,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "info"
                            },
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 9987,
                                "end": 9992,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the id of the form item which should be removed and the index of where to remove it</p>\n"
                        },
                        {
                            "name": {
                                "pos": 10095,
                                "end": 10107,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "sectionIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 10089,
                                "end": 10094,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>if the formgroup is an array this is the index of the formgroup item</p>\n"
                        }
                    ]
                },
                {
                    "name": "removeItemFromParent",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 339,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveFollowUpModal",
                    "args": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldRenderControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formItem",
                            "type": "DynamicFormItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSHOULD RENDER CONTROL:\nDetermines if the form control should be rendered or not.\n",
                    "description": "<p>SHOULD RENDER CONTROL:\nDetermines if the form control should be rendered or not.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4921,
                                "end": 4924,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "key"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4915,
                                "end": 4920,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>section key</p>\n"
                        },
                        {
                            "name": {
                                "pos": 4950,
                                "end": 4958,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "formItem"
                            },
                            "type": "DynamicFormItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4944,
                                "end": 4949,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>the target form item that should or should not be displayed</p>\n"
                        },
                        {
                            "name": {
                                "pos": 5032,
                                "end": 5037,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 5026,
                                "end": 5031,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>if the formgroup is an array this is the index of the formgroup item</p>\n"
                        }
                    ]
                },
                {
                    "name": "shouldRenderFollowUpControlsType",
                    "args": [
                        {
                            "name": "key",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 418,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>some comment</p>\n",
            "rawdescription": "\nsome comment",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { KeyValue } from '@angular/common';\r\nimport {\r\n  DynamicFormItem,\r\n  DynamicFormOption,\r\n  ConfirmInformation,\r\n} from './model/models';\r\nimport {\r\n  ExtendedFormGroup,\r\n  ExtendedFormGroupControls,\r\n} from './model/custom-classes/extended-form-group';\r\nimport { ExtendedFormControl } from './model/custom-classes/extended-form-control';\r\nimport { ExtendedFormArray } from './model/custom-classes/extended-form-array';\r\nimport { ExtendedFormGroupArray } from './model/custom-classes/extended-form-group-array';\r\nimport { FormService } from './form.service';\r\nimport { IFormAction } from './i-form-action.enum';\r\n\r\ninterface IDynamicFormValidationError {\r\n  key: string;\r\n  errorMessage: string;\r\n  sectionId: string;\r\n  sectionIndex: number;\r\n  formItem: Partial<DynamicFormItem>;\r\n}\r\n\r\n/** some comment */\r\n@Component({\r\n  selector: 'app-dynamic-form',\r\n  templateUrl: './dynamic-form.component.html',\r\n  providers: [FormService],\r\n  styles: [\r\n    `\r\n      ::ng-deep .dynamic-form-section-item {\r\n        margin-bottom: 1.5rem;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class DynamicFormComponent {\r\n  @Input() extendedFormGroup: ExtendedFormGroup;\r\n  @Input() activeStep: number;\r\n  @Input() sectionTemplate: TemplateRef<any>;\r\n  @Input() itemTemplate: TemplateRef<any>;\r\n  @Input() actionsTemplate: TemplateRef<any>;\r\n  @Input() disclaimerTemplate: TemplateRef<any>;\r\n  @Input() inputMetadataTemplate: TemplateRef<any>;\r\n  @Input() textAreaTemplate: TemplateRef<any>;\r\n  @Input() numberTemplate: TemplateRef<any>;\r\n  @Input() checkboxTemplate: TemplateRef<any>;\r\n  @Input() dropdownTemplate: TemplateRef<any>;\r\n  @Input() datePickerTemplate: TemplateRef<any>;\r\n  @Input() radioTemplate: TemplateRef<any>;\r\n  @Input() radioTableTemplate: TemplateRef<any>;\r\n  @Input() toggleSelectorTemplate: TemplateRef<any>;\r\n  @Input() cardTemplate: TemplateRef<any>;\r\n  @Input() itemCustomClass: string;\r\n  @Input() hasFormActions: boolean = true;\r\n  // used to compare current rules with saved data\r\n  @Input() savedFormData: { key: string; value: string | number | boolean }[] =\r\n    [];\r\n  @Input() nextAction: IFormAction = {\r\n    hasAction: true,\r\n    label: 'Next',\r\n  };\r\n  @Input() previousAction: IFormAction = {\r\n    hasAction: true,\r\n    label: 'Previous',\r\n  };\r\n  @Input() cancelAction: IFormAction = {\r\n    hasAction: true,\r\n    label: 'Cancel',\r\n  };\r\n\r\n  @Input() saveAction: IFormAction = {\r\n    hasAction: true,\r\n    label: 'Save',\r\n  };\r\n  @Input() deleteAction: IFormAction = {\r\n    hasAction: true,\r\n    label: 'Delete',\r\n  };\r\n  @Output() previousEvent: EventEmitter<any> = new EventEmitter();\r\n  @Output() nextEvent: EventEmitter<any> = new EventEmitter();\r\n  @Output() cancelEvent: EventEmitter<any> = new EventEmitter();\r\n\r\n  submitted: boolean = false;\r\n  confirmationToggle: boolean = false;\r\n  confirmationData: ConfirmInformation = null;\r\n\r\n  newFormGroup: {\r\n    form: ExtendedFormGroup;\r\n    index: number;\r\n    parentKey: string;\r\n  } = {\r\n    form: null,\r\n    index: null,\r\n    parentKey: null,\r\n  };\r\n\r\n  followUpModalToggle: boolean = false;\r\n\r\n  constructor(\r\n    private formService: FormService,\r\n    private cd: ChangeDetectorRef\r\n  ) {}\r\n\r\n  shouldRenderFollowUpControlsType(key: any): string {\r\n    if (key.value?.followUpItems) {\r\n      return key.value?.followUpItems.type;\r\n    }\r\n  }\r\n\r\n  dimissFollowUpModal(item: ExtendedFormControl): void {\r\n    this.followUpModalToggle = false;\r\n    !item.formGroup && item?.reset();\r\n  }\r\n\r\n  saveFollowUpModal(param: {\r\n    item: ExtendedFormGroup;\r\n    control: ExtendedFormControl;\r\n  }): void {\r\n    const { item, control } = param;\r\n    if (item.valid) {\r\n      if (this.newFormGroup.index !== null) {\r\n        (control.formGroup as ExtendedFormGroupArray).setControl(\r\n          this.newFormGroup.index,\r\n          item\r\n        );\r\n      } else {\r\n        if (!control.formGroup?.controls?.length) {\r\n          control.formGroup = new ExtendedFormGroupArray([item]);\r\n        } else {\r\n          (control.formGroup as ExtendedFormGroupArray).push(item);\r\n        }\r\n      }\r\n      this.followUpModalToggle = false;\r\n      this.cd.detectChanges();\r\n    }\r\n  }\r\n\r\n  createFormGroup(param: { items: any; key: string }) {\r\n    this.newFormGroup = {\r\n      form: this.formService.dynamicFormSectionsToFormGroup(param.items),\r\n      index: null,\r\n      parentKey: param.key,\r\n    };\r\n    this.followUpModalToggle = true;\r\n  }\r\n\r\n  modalShouldBeRendered(control): boolean {\r\n    if (\r\n      control.value?.followUpItems?.items?.length &&\r\n      control.formItem.key === this.newFormGroup.parentKey\r\n    ) {\r\n      return !!this.newFormGroup.form;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * SHOULD RENDER CONTROL:\r\n   * Determines if the form control should be rendered or not.\r\n   * @param key section key\r\n   * @param formItem the target form item that should or should not be displayed\r\n   * @param index if the formgroup is an array this is the index of the formgroup item\r\n   */\r\n  shouldRenderControl(\r\n    key: string,\r\n    formItem: DynamicFormItem,\r\n    index?: number\r\n  ): boolean {\r\n    if (this.extendedFormGroup.controls)\r\n      if (formItem?.rulerKey) {\r\n        // It has a ruler key, trying to find the ruler and it's value\r\n        let ruler: ExtendedFormControl;\r\n        if (index > -1) {\r\n          // the form control where the ruler should be is an array\r\n          const target: ExtendedFormControl = (\r\n            this.extendedFormGroup.get(key) as ExtendedFormGroupArray\r\n          )\r\n            .at(index)\r\n            .get(formItem.rulerKey) as ExtendedFormControl;\r\n          if (target) {\r\n            ruler = target;\r\n          }\r\n        } else {\r\n          // no array index: the form control where the ruler should be is a regular form\r\n          ruler = this.extendedFormGroup\r\n            ?.get(key)\r\n            ?.get(formItem.rulerKey) as ExtendedFormControl;\r\n        }\r\n        const rulerValue: any = ruler.value;\r\n        const { condition }: DynamicFormItem = formItem;\r\n        if (rulerValue === undefined || condition === undefined) {\r\n          console.warn(\r\n            'Something went wrong in shouldRenderControl: Ruler value or condition could not be found.'\r\n          );\r\n          return false;\r\n        }\r\n        if (\r\n          typeof rulerValue === 'string' &&\r\n          rulerValue === (condition as any)\r\n        ) {\r\n          return this.shouldRenderControl(key, ruler.formItem, index);\r\n        } else if (\r\n          rulerValue &&\r\n          condition &&\r\n          typeof condition === 'object' &&\r\n          Array.isArray(condition)\r\n        ) {\r\n          for (const conditionItem of condition as Array<any>) {\r\n            if (conditionItem) {\r\n              if (typeof rulerValue === 'object' && Array.isArray(rulerValue)) {\r\n                for (const rulerValueItem of rulerValue as Array<any>) {\r\n                  if (\r\n                    rulerValueItem &&\r\n                    rulerValueItem.value === conditionItem.value\r\n                  ) {\r\n                    return this.shouldRenderControl(key, ruler.formItem, index);\r\n                  }\r\n                }\r\n              } else if (\r\n                typeof rulerValue === 'object' &&\r\n                !Array.isArray(rulerValue)\r\n              ) {\r\n                if (rulerValue && rulerValue.value === conditionItem.value) {\r\n                  return this.shouldRenderControl(key, ruler.formItem, index);\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else if (\r\n          rulerValue &&\r\n          typeof rulerValue === 'object' &&\r\n          !Array.isArray(rulerValue) &&\r\n          rulerValue.value === (condition as DynamicFormOption).value\r\n        ) {\r\n          return this.shouldRenderControl(key, ruler.formItem, index);\r\n        } else if (\r\n          rulerValue &&\r\n          typeof rulerValue === 'boolean' &&\r\n          rulerValue === condition\r\n        ) {\r\n          return this.shouldRenderControl(key, ruler.formItem, index);\r\n        }\r\n        return false;\r\n      }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * ADD NEW ITEM TO FORM ARRAY WITH ID:\r\n   * Duplicates the whole section or a form item within a section\r\n   * @param key section key\r\n   * @param id the id of the form item which should be duplicated\r\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\r\n   */\r\n  addNewItemToFormArrayWithId(\r\n    key: string,\r\n    id?: string,\r\n    sectionIndex?: number\r\n  ): void {\r\n    if (id) {\r\n      // There is an id which means we want to duplicate a form item within a section\r\n      if (sectionIndex > -1) {\r\n        // the form control where the item to duplicate should be is an array\r\n        const target: ExtendedFormArray = (\r\n          this.extendedFormGroup.get(key) as ExtendedFormGroupArray\r\n        ).at(sectionIndex) as ExtendedFormArray;\r\n        (target.get(id) as ExtendedFormArray).push(new FormControl(''));\r\n      } else {\r\n        // the form control is not an array since there is no section index\r\n        (this.extendedFormGroup.get(key).get(id) as ExtendedFormArray).push(\r\n          new FormControl('')\r\n        );\r\n      }\r\n    } else {\r\n      // There is no id which means we want to duplicate the entire section\r\n      const target: ExtendedFormGroupArray = this.extendedFormGroup.get(\r\n        key\r\n      ) as ExtendedFormGroupArray;\r\n      const childControls: ExtendedFormGroupControls =\r\n        this.formService.dynamicFormItemsToControls(target.sectionItem.items);\r\n      const formGroup: ExtendedFormGroup = new ExtendedFormGroup(\r\n        childControls,\r\n        target.sectionItem\r\n      );\r\n      target.push(formGroup);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * REMOVE ITEM AT INDEX FROM FORM ARRAY WITH ID:\r\n   * Removes the whole section or a form item within a section\r\n   * @param key section key\r\n   * @param info the id of the form item which should be removed and the index of where to remove it\r\n   * @param sectionIndex if the formgroup is an array this is the index of the formgroup item\r\n   */\r\n  removeItemAtIndexFromFormArrayWithId(\r\n    key: string,\r\n    info?: { id: string; index: number },\r\n    sectionIndex?: number\r\n  ): void {\r\n    if (info && info.id) {\r\n      // There is info which means we want to remove a form item within a section\r\n      if (sectionIndex > -1) {\r\n        // the form control where the item to remove should be is an array\r\n        const target: ExtendedFormArray = (\r\n          this.extendedFormGroup.get(key) as ExtendedFormGroupArray\r\n        ).at(sectionIndex) as ExtendedFormArray;\r\n        (target.get(info.id) as ExtendedFormArray).removeAt(info.index);\r\n      } else {\r\n        // the form control is not an array since there is no section index\r\n        (\r\n          this.extendedFormGroup.get(key).get(info.id) as ExtendedFormArray\r\n        ).removeAt(info.index);\r\n      }\r\n    } else {\r\n      // there is no info indicating we should use the section index to remove the section itself\r\n      if (sectionIndex > -1) {\r\n        (this.extendedFormGroup.get(key) as ExtendedFormGroupArray).removeAt(\r\n          sectionIndex\r\n        );\r\n      } else {\r\n        console.warn(\r\n          'Error at removeItemAtIndexFromFormArrayWithId: Tried to remove section but no section index was provided'\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  removeItemFromParent(param: {\r\n    form: ExtendedFormControl;\r\n    index: number;\r\n  }): void {\r\n    const { form, index } = param;\r\n    (form.formGroup as ExtendedFormGroupArray).removeAt(index);\r\n    // reset parent control if the formGroup property doesn't have controls\r\n    if (!(form.formGroup as ExtendedFormGroupArray).controls?.length) {\r\n      form.reset();\r\n    }\r\n    this.followUpModalToggle = false;\r\n  }\r\n\r\n  editItemFromParent(param: {\r\n    formArray: ExtendedFormArray;\r\n    index: number;\r\n    parentKey: string;\r\n  }): void {\r\n    const { formArray, index, parentKey } = param;\r\n\r\n    this.newFormGroup = {\r\n      form: new ExtendedFormGroup(\r\n        (formArray.at(index) as ExtendedFormGroup)\r\n          .controls as ExtendedFormGroupControls\r\n      ),\r\n      index,\r\n      parentKey,\r\n    };\r\n\r\n    this.followUpModalToggle = true;\r\n  }\r\n\r\n  orderForm = (\r\n    a: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>,\r\n    b: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>\r\n  ): number => {\r\n    if (a.value['sectionItem'] && b.value['sectionItem']) {\r\n      return (\r\n        (a.value as ExtendedFormGroup).sectionItem.order -\r\n        (b.value as ExtendedFormGroup).sectionItem.order\r\n      );\r\n    } else if (a.value['formItem'] && b.value['formItem']) {\r\n      return (\r\n        (a.value as ExtendedFormControl).formItem.order -\r\n        (b.value as ExtendedFormControl).formItem.order\r\n      );\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  getFormArrayControls(\r\n    control: ExtendedFormGroupArray\r\n  ): Array<ExtendedFormGroup> {\r\n    if (control instanceof ExtendedFormGroupArray) {\r\n      return control.controls as Array<ExtendedFormGroup>;\r\n    } else {\r\n      console.warn(\r\n        'Error in getFormArrayControls: control is not an instance of ExtendedFormGroupArray'\r\n      );\r\n      return [];\r\n    }\r\n  }\r\n\r\n  controlValueChanged(): void {\r\n    this.submitted &&= false;\r\n  }\r\n\r\n  get sectionList() {\r\n    if (this.activeStep !== null) {\r\n      return [\r\n        this.extendedFormGroup.controls[\r\n          Object.keys(this.extendedFormGroup.controls)[this.activeStep]\r\n        ],\r\n      ];\r\n    } else {\r\n      return this.extendedFormGroup.controls;\r\n    }\r\n  }\r\n\r\n  validate(): void {\r\n    console.log(this.extendedFormGroup);\r\n  }\r\n\r\n  cancel(): void {\r\n    this.cancelEvent.emit();\r\n  }\r\n\r\n  next(): void {\r\n    this.submitted = true;\r\n    if (this.formService.validateForm(this.sectionList[0])) {\r\n      this.confirmationData = this.hasConfirmation(this.sectionList[0].value);\r\n      if (this.confirmationData) {\r\n        this.confirmationToggle = true;\r\n      } else {\r\n        this.nextEvent?.emit();\r\n        this.submitted = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find if the current selected values have a confirmation required\r\n   * @param value the property value of formGroup\r\n   */\r\n  hasConfirmation(value: any): ConfirmInformation {\r\n    let confirmation: ConfirmInformation = null;\r\n    if (typeof value === 'object') {\r\n      Object.keys(value).forEach((key: string) => {\r\n        if (value[key]?.confirm) {\r\n          confirmation = value[key].confirm;\r\n        }\r\n      });\r\n    }\r\n    return confirmation;\r\n  }\r\n\r\n  denyConfirmation(): void {\r\n    this.confirmationToggle = false;\r\n    this.confirmationData = null;\r\n  }\r\n\r\n  acceptConfirmation(): void {\r\n    this.denyConfirmation();\r\n    this.submitted = false;\r\n    this.nextEvent?.emit();\r\n  }\r\n\r\n  previous(): void {\r\n    this.previousEvent.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      ::ng-deep .dynamic-form-section-item {\n        margin-bottom: 1.5rem;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 108,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "sectionList": {
                    "name": "sectionList",
                    "getSignature": {
                        "name": "sectionList",
                        "type": "",
                        "returnType": "",
                        "line": 406
                    }
                }
            },
            "templateData": "<form\r\n  *ngIf=\"extendedFormGroup\"\r\n  #ngForm=\"ngForm\"\r\n  [formGroup]=\"extendedFormGroup\"\r\n>\r\n  <div\r\n    class=\"dynamic-form-section-item\"\r\n    *ngFor=\"let section of sectionList | keyvalue: orderForm\"\r\n  >\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"sectionTemplate || internalSectionTemplate\"\r\n      [ngTemplateOutletContext]=\"{ context: section.value.sectionItem }\"\r\n    ></ng-container>\r\n\r\n    <div\r\n      [class]=\"section.value.sectionItem?.className\"\r\n      *ngIf=\"!section.value.sectionItem?.multi; else multi\"\r\n    >\r\n      <ng-container\r\n        *ngFor=\"let control of section.value.controls | keyvalue: orderForm\"\r\n      >\r\n        <div\r\n          [class]=\"control.value.formItem?.className\"\r\n          *ngIf=\"shouldRenderControl(section.key, control.value.formItem)\"\r\n        >\r\n          <ng-container *ngIf=\"control.value.formGroup; else singleItem\">\r\n            <app-dynamic-form-item\r\n              [parentFormGroup]=\"extendedFormGroup\"\r\n              [control]=\"control.value\"\r\n              [submitted]=\"submitted\"\r\n              [savedFormData]=\"savedFormData\"\r\n              [itemTemplate]=\"itemTemplate\"\r\n              [textAreaTemplate]=\"textAreaTemplate\"\r\n              [numberTemplate]=\"numberTemplate\"\r\n              [checkboxTemplate]=\"checkboxTemplate\"\r\n              [dropdownTemplate]=\"dropdownTemplate\"\r\n              [datePickerTemplate]=\"datePickerTemplate\"\r\n              [toggleSelectorTemplate]=\"toggleSelectorTemplate\"\r\n              [cardTemplate]=\"cardTemplate\"\r\n              [disclaimerTemplate]=\"disclaimerTemplate\"\r\n              [radioTemplate]=\"radioTemplate\"\r\n              [disclaimerTemplate]=\"disclaimerTemplate\"\r\n              (createFormGroup)=\"createFormGroup($event)\"\r\n              (controlValueChanged)=\"controlValueChanged()\"\r\n            ></app-dynamic-form-item>\r\n            <ng-container\r\n              [ngSwitch]=\"shouldRenderFollowUpControlsType(control.value)\"\r\n            >\r\n              <ng-container *ngSwitchCase=\"'inline'\">\r\n                <div\r\n                  *ngFor=\"\r\n                    let item of control.value.formGroup.controls\r\n                      | keyvalue: orderForm\r\n                  \"\r\n                >\r\n                  <app-dynamic-form-item\r\n                    [parentFormGroup]=\"extendedFormGroup\"\r\n                    [control]=\"item.value\"\r\n                    [submitted]=\"submitted\"\r\n                    [savedFormData]=\"savedFormData\"\r\n                    [itemTemplate]=\"itemTemplate\"\r\n                    [textAreaTemplate]=\"textAreaTemplate\"\r\n                    [numberTemplate]=\"numberTemplate\"\r\n                    [checkboxTemplate]=\"checkboxTemplate\"\r\n                    [dropdownTemplate]=\"dropdownTemplate\"\r\n                    [datePickerTemplate]=\"datePickerTemplate\"\r\n                    [toggleSelectorTemplate]=\"toggleSelectorTemplate\"\r\n                    [cardTemplate]=\"cardTemplate\"\r\n                    [radioTemplate]=\"radioTemplate\"\r\n                    [disclaimerTemplate]=\"disclaimerTemplate\"\r\n                    (controlValueChanged)=\"controlValueChanged()\"\r\n                  ></app-dynamic-form-item>\r\n                </div>\r\n              </ng-container>\r\n              <ng-container *ngSwitchDefault>\r\n                <ng-container\r\n                  *ngIf=\"radioTableTemplate; else internalRadioTemplate\"\r\n                  [ngTemplateOutlet]=\"radioTableTemplate\"\r\n                  [ngTemplateOutletContext]=\"{ context: control }\"\r\n                ></ng-container>\r\n                <ng-template #internalRadioTemplate>\r\n                  <app-dynamic-form-data\r\n                    [control]=\"control\"\r\n                    (editControl)=\"editItemFromParent($event)\"\r\n                    (deleteControl)=\"removeItemFromParent($event)\"\r\n                  ></app-dynamic-form-data>\r\n                </ng-template>\r\n\r\n                <ng-container *ngIf=\"control.value.value?.followUpItems?.multi\">\r\n                  <button\r\n                    class=\"btn btn-sm btn-secondary\"\r\n                    type=\"button\"\r\n                    (click)=\"\r\n                      createFormGroup({\r\n                        items: control.value.value.followUpItems?.items,\r\n                        key: control.key\r\n                      })\r\n                    \"\r\n                  >\r\n                    + Add new\r\n                  </button>\r\n                </ng-container>\r\n                <ng-container\r\n                  [ngTemplateOutlet]=\"modalTemplate\"\r\n                  [ngTemplateOutletContext]=\"{ context: control }\"\r\n                ></ng-container>\r\n              </ng-container>\r\n            </ng-container>\r\n          </ng-container>\r\n          <ng-template #singleItem>\r\n            <app-dynamic-form-item\r\n              [parentFormGroup]=\"extendedFormGroup\"\r\n              [control]=\"control.value\"\r\n              [sectionId]=\"section.value.sectionItem.key\"\r\n              [itemCustomClass]=\"itemCustomClass\"\r\n              [savedFormData]=\"savedFormData\"\r\n              [submitted]=\"submitted\"\r\n              [itemTemplate]=\"itemTemplate\"\r\n              [textAreaTemplate]=\"textAreaTemplate\"\r\n              [numberTemplate]=\"numberTemplate\"\r\n              [checkboxTemplate]=\"checkboxTemplate\"\r\n              [dropdownTemplate]=\"dropdownTemplate\"\r\n              [datePickerTemplate]=\"datePickerTemplate\"\r\n              [toggleSelectorTemplate]=\"toggleSelectorTemplate\"\r\n              [cardTemplate]=\"cardTemplate\"\r\n              [radioTemplate]=\"radioTemplate\"\r\n              [disclaimerTemplate]=\"disclaimerTemplate\"\r\n              (createFormGroup)=\"createFormGroup($event)\"\r\n              (itemAddedClicked)=\"\r\n                addNewItemToFormArrayWithId(section.key, $event)\r\n              \"\r\n              (itemRemovedClicked)=\"\r\n                removeItemAtIndexFromFormArrayWithId(section.key, $event)\r\n              \"\r\n              (controlValueChanged)=\"controlValueChanged()\"\r\n            ></app-dynamic-form-item>\r\n            <ng-container\r\n              [ngTemplateOutlet]=\"modalTemplate\"\r\n              [ngTemplateOutletContext]=\"{ context: control }\"\r\n            ></ng-container>\r\n          </ng-template>\r\n        </div>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <ng-template #multi>\r\n      <div\r\n        class=\"dynamic-form-section-item\"\r\n        [class]=\"section.value.sectionItem.className\"\r\n        *ngFor=\"\r\n          let arrayControl of getFormArrayControls(section.value);\r\n          let i = index\r\n        \"\r\n      >\r\n        <ng-container\r\n          *ngFor=\"let control of arrayControl.controls | keyvalue: orderForm\"\r\n        >\r\n          <div\r\n            class=\"form-group\"\r\n            [class]=\"control.value.formItem.className\"\r\n            *ngIf=\"\r\n              shouldRenderControl(\r\n                section.value.sectionItem.key,\r\n                control.value.formItem,\r\n                i\r\n              )\r\n            \"\r\n          >\r\n            <app-dynamic-form-item\r\n              [formGroup]=\"extendedFormGroup\"\r\n              [control]=\"control.value\"\r\n              [sectionId]=\"section.value.sectionItem.key + control.key + i\"\r\n              [submitted]=\"submitted\"\r\n              [savedFormData]=\"savedFormData\"\r\n              [itemTemplate]=\"itemTemplate\"\r\n              [textAreaTemplate]=\"textAreaTemplate\"\r\n              [numberTemplate]=\"numberTemplate\"\r\n              [checkboxTemplate]=\"checkboxTemplate\"\r\n              [dropdownTemplate]=\"dropdownTemplate\"\r\n              [datePickerTemplate]=\"datePickerTemplate\"\r\n              [toggleSelectorTemplate]=\"toggleSelectorTemplate\"\r\n              [cardTemplate]=\"cardTemplate\"\r\n              [radioTemplate]=\"radioTemplate\"\r\n              [disclaimerTemplate]=\"disclaimerTemplate\"\r\n              (createFormGroup)=\"createFormGroup($event)\"\r\n              (itemAddedClicked)=\"\r\n                addNewItemToFormArrayWithId(section.key, $event, i)\r\n              \"\r\n              (itemRemovedClicked)=\"\r\n                removeItemAtIndexFromFormArrayWithId(section.key, $event, i)\r\n              \"\r\n              (controlValueChanged)=\"controlValueChanged()\"\r\n            ></app-dynamic-form-item>\r\n            <ng-container\r\n              [ngSwitch]=\"shouldRenderFollowUpControlsType(control.value)\"\r\n            >\r\n              <ng-container *ngSwitchCase=\"'inline'\">\r\n                <div\r\n                  *ngFor=\"\r\n                    let item of control.value.formGroup.controls\r\n                      | keyvalue: orderForm\r\n                  \"\r\n                >\r\n                  <app-dynamic-form-item\r\n                    [parentFormGroup]=\"extendedFormGroup\"\r\n                    [control]=\"item.value\"\r\n                    [submitted]=\"submitted\"\r\n                    [savedFormData]=\"savedFormData\"\r\n                    [itemTemplate]=\"itemTemplate\"\r\n                    [textAreaTemplate]=\"textAreaTemplate\"\r\n                    [numberTemplate]=\"numberTemplate\"\r\n                    [checkboxTemplate]=\"checkboxTemplate\"\r\n                    [dropdownTemplate]=\"dropdownTemplate\"\r\n                    [datePickerTemplate]=\"datePickerTemplate\"\r\n                    [toggleSelectorTemplate]=\"toggleSelectorTemplate\"\r\n                    [cardTemplate]=\"cardTemplate\"\r\n                    [radioTemplate]=\"radioTemplate\"\r\n                    [disclaimerTemplate]=\"disclaimerTemplate\"\r\n                    (createFormGroup)=\"createFormGroup($event)\"\r\n                    (controlValueChanged)=\"controlValueChanged()\"\r\n                  ></app-dynamic-form-item>\r\n                </div>\r\n              </ng-container>\r\n              <ng-container *ngSwitchDefault>\r\n                <app-dynamic-form-data\r\n                  [control]=\"control\"\r\n                  (editControl)=\"editItemFromParent($event)\"\r\n                  (deleteControl)=\"removeItemFromParent($event)\"\r\n                ></app-dynamic-form-data>\r\n                <ng-container *ngIf=\"control.value.value?.followUpItems?.multi\">\r\n                  <button\r\n                    class=\"btn btn-sm btn-secondary\"\r\n                    type=\"button\"\r\n                    (click)=\"\r\n                      createFormGroup(control.value.value.followUpItems?.items)\r\n                    \"\r\n                  >\r\n                    + Add new\r\n                  </button>\r\n                  <ng-container\r\n                    [ngTemplateOutlet]=\"modalTemplate\"\r\n                    [ngTemplateOutletContext]=\"{ context: control }\"\r\n                  ></ng-container>\r\n                </ng-container>\r\n              </ng-container>\r\n            </ng-container>\r\n          </div>\r\n        </ng-container>\r\n        <button\r\n          *ngIf=\"getFormArrayControls(section.value).length > 1\"\r\n          [id]=\"section.value.sectionItem.key + i + '-remove'\"\r\n          class=\"btn btn-sm btn-outline-danger\"\r\n          type=\"button\"\r\n          (click)=\"\r\n            removeItemAtIndexFromFormArrayWithId(\r\n              section.value.sectionItem.key,\r\n              null,\r\n              i\r\n            )\r\n          \"\r\n        >\r\n          - Remove {{ section.value.sectionItem.title }}\r\n        </button>\r\n      </div>\r\n\r\n      <button\r\n        [id]=\"section.value.sectionItem.key + '-add'\"\r\n        class=\"btn btn-sm btn-secondary\"\r\n        type=\"button\"\r\n        (click)=\"addNewItemToFormArrayWithId(section.value.sectionItem.key)\"\r\n      >\r\n        + Add new {{ section.value.sectionItem.title }}\r\n      </button>\r\n    </ng-template>\r\n  </div>\r\n  <ng-template let-context=\"context\" #modalTemplate>\r\n    <app-dynamic-form-modal\r\n      *ngIf=\"modalShouldBeRendered(context?.value)\"\r\n      [modalToggle]=\"followUpModalToggle\"\r\n      [control]=\"context\"\r\n      [form]=\"newFormGroup.form\"\r\n      [controlIndex]=\"newFormGroup.index\"\r\n      [saveAction]=\"saveAction\"\r\n      [cancelAction]=\"cancelAction\"\r\n      [deleteAction]=\"deleteAction\"\r\n      (saveControl)=\"saveFollowUpModal($event)\"\r\n      (cancelControl)=\"dimissFollowUpModal($event)\"\r\n      (deleteControl)=\"removeItemFromParent($event)\"\r\n    ></app-dynamic-form-modal>\r\n  </ng-template>\r\n  <ng-container\r\n    *ngIf=\"hasFormActions && actionsTemplate; else internalActionsTemplate\"\r\n    [ngTemplateOutlet]=\"actionsTemplate\"\r\n  ></ng-container>\r\n  <ng-template #internalActionsTemplate>\r\n    <div *ngIf=\"hasFormActions\" class=\"d-flex justify-content-between\">\r\n      <div>\r\n        <button\r\n          *ngIf=\"cancelAction.hasAction\"\r\n          class=\"btn btn-secondary\"\r\n          (click)=\"cancel()\"\r\n        >\r\n          {{ cancelAction.label }}\r\n        </button>\r\n        <button\r\n          *ngIf=\"previousAction.hasAction\"\r\n          class=\"btn btn-outline-primary\"\r\n          (click)=\"previous()\"\r\n        >\r\n          {{ previousAction.label }}\r\n        </button>\r\n      </div>\r\n      <button\r\n        *ngIf=\"nextAction.hasAction\"\r\n        class=\"btn btn-primary\"\r\n        (click)=\"next()\"\r\n      >\r\n        {{ nextAction.label }}\r\n      </button>\r\n    </div>\r\n  </ng-template>\r\n\r\n  <ng-template let-context=\"context\" #internalSectionTemplate>\r\n    <span *ngIf=\"context?.category\">{{ context.category }}</span>\r\n    <h3 *ngIf=\"context?.title\">{{ context.title }}</h3>\r\n    <!-- <p *ngIf=\"context?.description\">{{ context.description }}</p> -->\r\n  </ng-template>\r\n\r\n  <app-dynamic-form-confirmation\r\n    *ngIf=\"confirmationData\"\r\n    [confirmationToggle]=\"confirmationToggle\"\r\n    [confirmationData]=\"confirmationData\"\r\n    (acceptConfirmationEvent)=\"acceptConfirmation()\"\r\n    (denyConfirmationEvent)=\"denyConfirmation()\"\r\n  ></app-dynamic-form-confirmation>\r\n</form>\r\n"
        },
        {
            "name": "DynamicFormConfirmationComponent",
            "id": "component-DynamicFormConfirmationComponent-b9f3269c3f2c014360fbe9c18bdeab1777cbf9eb6db2dca8b783855f4dcf2f904e44b2754fcfa6c46a67871ee56c212f70db7217ab9316eca5d84d84e6da1383",
            "file": "projects/dynamic-form/src/lib/dynamic-form-confirmation/dynamic-form-confirmation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-confirmation",
            "styleUrls": [
                "./dynamic-form-confirmation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-confirmation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "confirmationData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ConfirmInformation",
                    "decorators": []
                },
                {
                    "name": "confirmationToggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "acceptConfirmationEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "denyConfirmationEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "acceptConfirmation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "denyConfirmation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ConfirmInformation } from '../model/models';\n\n@Component({\n  selector: 'app-dynamic-form-confirmation',\n  templateUrl: './dynamic-form-confirmation.component.html',\n  styleUrls: ['./dynamic-form-confirmation.component.css'],\n})\nexport class DynamicFormConfirmationComponent {\n  @Input() confirmationToggle: boolean;\n  @Input() confirmationData: ConfirmInformation;\n\n  @Output() acceptConfirmationEvent: EventEmitter<void> = new EventEmitter();\n  @Output() denyConfirmationEvent: EventEmitter<void> = new EventEmitter();\n\n  constructor() {}\n\n  denyConfirmation(): void {\n    this.denyConfirmationEvent.emit();\n  }\n\n  acceptConfirmation(): void {\n    this.acceptConfirmationEvent.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dynamic-form-confirmation.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "templateData": "<sebng-modal\n  *ngIf=\"confirmationData\"\n  [toggle]=\"confirmationToggle\"\n  [centered]=\"true\"\n  [closeButton]=\"false\"\n  (dismiss)=\"denyConfirmation()\"\n>\n  <h3 header>{{ confirmationData?.title }}</h3>\n  <ng-container body>{{ confirmationData?.message }}</ng-container>\n  <ng-container footer>\n    <sebng-button\n      *ngIf=\"confirmationData?.deny\"\n      [theme]=\"confirmationData?.accept ? 'outline-primary' : 'primary'\"\n      (click)=\"denyConfirmation()\"\n    >\n      {{ confirmationData.deny }}\n    </sebng-button>\n    <sebng-button\n      *ngIf=\"confirmationData?.accept\"\n      (click)=\"acceptConfirmation()\"\n    >\n      {{ confirmationData.accept }}\n    </sebng-button>\n  </ng-container>\n</sebng-modal>\n"
        },
        {
            "name": "DynamicFormDataComponent",
            "id": "component-DynamicFormDataComponent-0f365736fc6ce7f64ee480e1c29c391160b2580f24c95cec4dcf2919c1132e82e6cba4979465db39361d620012e660454004811b71efec20364bfa0b21596ab6",
            "file": "projects/dynamic-form/src/lib/dynamic-from-data/dynamic-form-data.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-data",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-data.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ExtendedFormGroupControl",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteControl",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "editControl",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "formArray",
                            "type": "ExtendedFormArray",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "formArray",
                            "type": "ExtendedFormArray",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "form",
                            "type": "ExtendedFormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "ExtendedFormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ExtendedFormArray } from '../model/custom-classes/extended-form-array';\nimport { ExtendedFormControl } from '../model/custom-classes/extended-form-control';\nimport { ExtendedFormGroupControl } from '../model/custom-classes/extended-form-group';\n\n@Component({\n  selector: 'app-dynamic-form-data',\n  templateUrl: './dynamic-form-data.component.html',\n})\nexport class DynamicFormDataComponent {\n  @Input() control: ExtendedFormGroupControl;\n  @Output() editControl: EventEmitter<any> = new EventEmitter();\n  @Output() deleteControl: EventEmitter<any> = new EventEmitter();\n\n  edit(formArray: ExtendedFormArray, index: number): void {\n    this.editControl.emit({\n      formArray,\n      index,\n      parentKey: this.control?.value?.formItem?.key,\n    });\n  }\n\n  remove(form: ExtendedFormControl, index: number): void {\n    this.deleteControl.emit({ form, index });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<table\n  class=\"table table-hover\"\n  *ngIf=\"control.value?.formGroup?.value?.length\"\n>\n  <thead>\n    <tr>\n      <th *ngFor=\"let header of control.value.formGroup.value[0] | keyvalue\">\n        {{ header.key }}\n      </th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let item of control.value.formGroup.value; let i = index\">\n      <td *ngFor=\"let val of item | keyvalue\">\n        {{ val.value }}\n      </td>\n      <td>\n        <button\n          class=\"btn btn-sm btn-secondary\"\n          type=\"button\"\n          (click)=\"edit(control.value.formGroup, i)\"\n        >\n          Edit\n        </button>\n      </td>\n      <td>\n        <button\n          class=\"btn btn-sm btn-secondary btn-danger\"\n          type=\"button\"\n          (click)=\"remove(control.value, i)\"\n        >\n          Delete\n        </button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n"
        },
        {
            "name": "DynamicFormItemComponent",
            "id": "component-DynamicFormItemComponent-d4d86581e4ded7778ffd91842b483079554f8aa086de50e0c02118800af88241459b0fd69a7cb87725ca565915697dd99ed90c413c6cfd56610df9c9464a6dca",
            "file": "projects/dynamic-form/src/lib/dynamic-form-item/dynamic-form-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-item",
            "styleUrls": [],
            "styles": [
                "\n      ::ng-deep .dynamic-form-item {\n        margin-bottom: 1.5rem;\n      }\n\n      ::ng-deep .dynamic-form-item-description {\n        margin-bottom: 0.5rem;\n      }\n    "
            ],
            "templateUrl": [
                "./dynamic-form-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cardTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "checkboxTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "ExtendedFormControl | ExtendedFormArray",
                    "decorators": []
                },
                {
                    "name": "datePickerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "disclaimerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "dropdownTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "itemCustomClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "itemTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "numberTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "parentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "ExtendedFormGroup | ExtendedFormGroup[]",
                    "decorators": []
                },
                {
                    "name": "radioTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "savedFormData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "literal type[]",
                    "decorators": []
                },
                {
                    "name": "sectionId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "textAreaTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "toggleSelectorTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "TemplateRef<any>",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "controlValueChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "createFormGroup",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "itemAddedClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "itemRemovedClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "EventEmitter<literal type>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "controlType",
                    "defaultValue": "DynamicFormType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "methodsClass": [
                {
                    "name": "makeId",
                    "args": [
                        {
                            "name": "info",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "info",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setRules",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  Input,\r\n  EventEmitter,\r\n  Output,\r\n  OnInit,\r\n  TemplateRef,\r\n} from '@angular/core';\r\nimport { ExtendedFormControl } from '../model/custom-classes/extended-form-control';\r\nimport { ExtendedFormArray } from '../model/custom-classes/extended-form-array';\r\nimport { DynamicFormType } from '../model/dynamicFormType';\r\nimport { isEmpty } from '@sebgroup/frontend-tools';\r\nimport { RuleType, Rule } from '../model/models';\r\nimport { FormService } from '../form.service';\r\nimport {\r\n  ExtendedFormGroup,\r\n  ExtendedFormGroupControl,\r\n} from '../model/custom-classes/extended-form-group';\r\nimport { ValidatorFn } from '@angular/forms';\r\nimport { formatNumber } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-dynamic-form-item',\r\n  templateUrl: './dynamic-form-item.component.html',\r\n  styles: [\r\n    `\r\n      ::ng-deep .dynamic-form-item {\r\n        margin-bottom: 1.5rem;\r\n      }\r\n\r\n      ::ng-deep .dynamic-form-item-description {\r\n        margin-bottom: 0.5rem;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class DynamicFormItemComponent implements OnInit {\r\n  @Input() control: ExtendedFormControl | ExtendedFormArray;\r\n  @Input() parentFormGroup: ExtendedFormGroup | ExtendedFormGroup[];\r\n  @Input() sectionId: string;\r\n  @Input() itemCustomClass: string = '';\r\n  @Input() submitted: boolean = false;\r\n  // used to compare current rules with saved data\r\n  @Input() savedFormData: { key: string; value: string | number | boolean }[];\r\n  @Input() itemTemplate: TemplateRef<any>;\r\n  @Input() textAreaTemplate: TemplateRef<any>;\r\n  @Input() numberTemplate: TemplateRef<any>;\r\n  @Input() checkboxTemplate: TemplateRef<any>;\r\n  @Input() dropdownTemplate: TemplateRef<any>;\r\n  @Input() datePickerTemplate: TemplateRef<any>;\r\n  @Input() radioTemplate: TemplateRef<any>;\r\n  @Input() toggleSelectorTemplate: TemplateRef<any>;\r\n  @Input() cardTemplate: TemplateRef<any>;\r\n  @Input() disclaimerTemplate: TemplateRef<any>;\r\n  @Output() createFormGroup: EventEmitter<any> = new EventEmitter();\r\n  @Output() itemAddedClicked: EventEmitter<string> = new EventEmitter();\r\n  @Output() itemRemovedClicked: EventEmitter<{\r\n    id: string;\r\n    index: number;\r\n  }> = new EventEmitter();\r\n  @Output() controlValueChanged: EventEmitter<boolean> = new EventEmitter();\r\n  controlType = DynamicFormType;\r\n\r\n  constructor(private formService: FormService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.control && this.setRules();\r\n    this.control.valueChanges?.subscribe((valueChange: any) => {\r\n      this.controlValueChanged.emit(true);\r\n      if (valueChange?.followUpItems?.items?.length) {\r\n        if (valueChange.followUpItems.type === 'modal') {\r\n          delete (this.control as ExtendedFormControl).formGroup;\r\n          this.createFormGroup.emit({\r\n            items: valueChange?.followUpItems?.items,\r\n            key: this.control.formItem.key,\r\n          });\r\n        } else {\r\n          (this.control as ExtendedFormControl).formGroup =\r\n            this.formService.dynamicFormItemsToFormGroup(\r\n              valueChange?.followUpItems?.items\r\n            );\r\n        }\r\n      } else {\r\n        delete (this.control as ExtendedFormControl).formGroup;\r\n      }\r\n    });\r\n  }\r\n\r\n  setRules(): void {\r\n    let validator: ValidatorFn[];\r\n\r\n    const rule = this.control?.formItem?.rules?.find(\r\n      (rule: Rule) =>\r\n        rule.type === RuleType.minThanReference ||\r\n        rule.type === RuleType.minThanEqualsReference ||\r\n        rule.type === RuleType.maxThanReference ||\r\n        rule.type === RuleType.maxThanEqualReference\r\n    );\r\n    if (rule) {\r\n      if (this.savedFormData.length) {\r\n        const referenceValue: {\r\n          key: string;\r\n          value: string | number | boolean;\r\n        } = this.savedFormData.find(\r\n          (savedData: { key: string; value: string | number | boolean }) =>\r\n            savedData.key === rule.value\r\n        );\r\n        if (referenceValue) {\r\n          ({ validator } = this.formService.appendValidations(\r\n            rule,\r\n            null,\r\n            referenceValue\r\n          ));\r\n        }\r\n      } else if (\r\n        this.formService.findNestedControl(this.parentFormGroup, rule.value)\r\n      ) {\r\n        const referenceControl: ExtendedFormGroupControl =\r\n          this.formService.findNestedControl(this.parentFormGroup, rule.value);\r\n        ({ validator } = this.formService.appendValidations(\r\n          rule,\r\n          referenceControl\r\n        ));\r\n      }\r\n      validator &&\r\n        this.control.setValidators([this.control.validator, ...validator]);\r\n      this.control.updateValueAndValidity();\r\n    }\r\n  }\r\n\r\n  get formArrayControls(): ExtendedFormArray['controls'] {\r\n    if (this.control instanceof ExtendedFormArray) {\r\n      return this.control.controls;\r\n    } else {\r\n      console.warn(\r\n        'Error in getFormArrayControls: control is not an instance of ExtendedFormArray'\r\n      );\r\n      return [];\r\n    }\r\n  }\r\n\r\n  get error(): string {\r\n    if (this.submitted) {\r\n      if (this.control?.errors && !isEmpty(this.control.errors)) {\r\n        const errorObjKey: string = Object.keys(this.control.errors)[0];\r\n        switch (errorObjKey) {\r\n          case 'min':\r\n            return (\r\n              this.control.formItem.rules.find(\r\n                (rule: Rule) =>\r\n                  rule.type === RuleType.min ||\r\n                  rule.type === RuleType.minThanEqualsReference ||\r\n                  rule.type === RuleType.minThanReference\r\n              )?.message +\r\n              ` ${\r\n                this.control.errors?.min?.min\r\n                  ? formatNumber(this.control.errors?.min?.min, 'se')\r\n                  : ''\r\n              }`\r\n            );\r\n          case 'max':\r\n            return (\r\n              this.control.formItem.rules.find(\r\n                (rule: Rule) =>\r\n                  rule.type === RuleType.max ||\r\n                  rule.type === RuleType.maxThanEqualReference ||\r\n                  rule.type === RuleType.maxThanReference\r\n              )?.message +\r\n              ` ${\r\n                this.control.errors?.max?.max\r\n                  ? formatNumber(this.control.errors?.max?.max, 'se')\r\n                  : ''\r\n              }`\r\n            );\r\n          case 'minlength':\r\n            return this.control.formItem.rules.find(\r\n              (rule: Rule) => rule.type === RuleType.minLength\r\n            )?.message;\r\n          case 'maxlength':\r\n            return this.control.formItem.rules.find(\r\n              (rule: Rule) => rule.type === RuleType.maxLength\r\n            )?.message;\r\n          case 'required':\r\n            return this.control.formItem.rules.find(\r\n              (rule: Rule) => rule.type === RuleType.required\r\n            )?.message;\r\n          default:\r\n            break;\r\n        }\r\n      } else {\r\n        this.control && this.setRules();\r\n      }\r\n    }\r\n  }\r\n\r\n  makeId(info?: string, index?: number): string {\r\n    return `${this.sectionId}-${this.control.formItem.key}-${\r\n      this.control.formItem.controlType\r\n    }${info ? `-${info}` : '' + index ? `-${index}` : ''}`;\r\n  }\r\n\r\n  get hasTemplate(): boolean {\r\n    switch (this.control?.formItem.controlType) {\r\n      case this.controlType.TextArea:\r\n        return !!this.textAreaTemplate;\r\n      case this.controlType.Number:\r\n        return !!this.numberTemplate;\r\n      case this.controlType.Checkbox:\r\n        return !!this.checkboxTemplate;\r\n      case this.controlType.Dropdown:\r\n        return !!this.dropdownTemplate;\r\n      case this.controlType.Datepicker:\r\n        return !!this.datePickerTemplate;\r\n      case this.controlType.Card:\r\n        return !!this.cardTemplate;\r\n      case this.controlType.Radio:\r\n        return !!this.radioTemplate;\r\n      case this.controlType.Disclaimer:\r\n        return !!this.disclaimerTemplate;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n      ::ng-deep .dynamic-form-item {\n        margin-bottom: 1.5rem;\n      }\n\n      ::ng-deep .dynamic-form-item-description {\n        margin-bottom: 0.5rem;\n      }\n    \n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "formArrayControls": {
                    "name": "formArrayControls",
                    "getSignature": {
                        "name": "formArrayControls",
                        "type": "",
                        "returnType": "",
                        "line": 131
                    }
                },
                "error": {
                    "name": "error",
                    "getSignature": {
                        "name": "error",
                        "type": "string",
                        "returnType": "string",
                        "line": 142
                    }
                },
                "hasTemplate": {
                    "name": "hasTemplate",
                    "getSignature": {
                        "name": "hasTemplate",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 202
                    }
                }
            },
            "templateData": "<ng-container [ngSwitch]=\"control.formItem?.controlType\">\n  <ng-container\n    *ngIf=\"itemTemplate; else internalItemTemplate\"\n    [ngTemplateOutlet]=\"itemTemplate\"\n    [ngTemplateOutletContext]=\"{ context: control.formItem }\"\n  ></ng-container>\n\n  <div *ngIf=\"!hasTemplate\" class=\"item-wrapper\" [ngClass]=\"itemCustomClass\">\n    <ng-container\n      [ngTemplateOutlet]=\"metadata\"\n      [ngTemplateOutletContext]=\"{\n        context: control.formItem.controlMetaData\n      }\"\n    ></ng-container>\n    <ng-container *ngSwitchCase=\"controlType.Text.toString()\">\n      <sebng-textbox\n        *ngIf=\"!control.formItem.multi; else multi\"\n        [id]=\"makeId()\"\n        className=\"dynamic-form-item\"\n        [name]=\"makeId()\"\n        [placeholder]=\"control.formItem.placeholder\"\n        [formControl]=\"control\"\n        [rightText]=\"control.formItem?.controlMetaData?.inputGroupLabel\"\n        [error]=\"error\"\n      >\n      </sebng-textbox>\n\n      <ng-template #multi>\n        <div *ngFor=\"let arrayControl of formArrayControls; let i = index\">\n          <div class=\"input-group dynamic-form-item\">\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              [id]=\"makeId(null, i)\"\n              [formControl]=\"arrayControl\"\n              [placeholder]=\"\n                control.formItem.placeholder ? control.formItem.placeholder : ''\n              \"\n            />\n            <div\n              *ngIf=\"formArrayControls?.length > 1\"\n              class=\"input-group-append\"\n            >\n              <button\n                [id]=\"makeId('multitextbox-remove', i)\"\n                class=\"btn btn-outline-danger\"\n                type=\"button\"\n                (click)=\"\n                  itemRemovedClicked.emit({\n                    id: control.formItem.key,\n                    index: i\n                  })\n                \"\n              >\n                –\n              </button>\n            </div>\n          </div>\n        </div>\n        <button\n          [id]=\"makeId('multitextbox-add')\"\n          class=\"btn btn-outline-primary\"\n          type=\"button\"\n          (click)=\"itemAddedClicked.emit(control.formItem.key)\"\n        >\n          +\n        </button>\n      </ng-template>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.TextArea.toString()\">\n      <sebng-textarea\n        className=\"dynamic-form-item\"\n        [id]=\"makeId()\"\n        [placeholder]=\"control.formItem.placeholder\"\n        [formControl]=\"control\"\n        [error]=\"error\"\n      ></sebng-textarea>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Number?.toString()\">\n      <sebng-textbox\n        className=\"dynamic-form-item\"\n        pattern=\"[0-9]*\"\n        inputmode=\"numeric\"\n        type=\"text\"\n        digitsOnly\n        [rightText]=\"control.formItem?.controlMetaData?.inputGroupLabel\"\n        [formControl]=\"control\"\n        [error]=\"error\"\n      ></sebng-textbox>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Checkbox.toString()\">\n      <sebng-checkbox\n        [formControl]=\"control\"\n        [id]=\"makeId()\"\n        [label]=\"control.formItem.label\"\n        [description]=\"control.formItem.description\"\n        [error]=\"error\"\n      ></sebng-checkbox>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Dropdown.toString()\">\n      <sebng-dropdown\n        className=\"dynamic-form-item\"\n        [formControl]=\"control\"\n        [id]=\"makeId()\"\n        [searchable]=\"true\"\n        [multi]=\"control.formItem.multi\"\n        [placeholder]=\"control.formItem.placeholder\"\n        [list]=\"control.formItem.options\"\n        [error]=\"error\"\n      ></sebng-dropdown>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Datepicker.toString()\">\n      <sebng-datepicker\n        className=\"dynamic-form-item\"\n        [formControl]=\"control\"\n        [id]=\"makeId()\"\n        [placeholder]=\"control.formItem.placeholder || 'yyyy-mm-dd'\"\n        [error]=\"error\"\n      ></sebng-datepicker>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Radio.toString()\">\n      <sebng-radio-group\n        *ngIf=\"!radioTemplate\"\n        className=\"dynamic-form-item\"\n        [condensed]=\"true\"\n        [inline]=\"true\"\n        [formControl]=\"control\"\n        [id]=\"makeId()\"\n        [list]=\"control.formItem.options\"\n        [error]=\"error\"\n      ></sebng-radio-group>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.ToggleSelector.toString()\">\n      <sebng-toggle-selector\n        class=\"d-flex\"\n        [formControl]=\"control\"\n        [list]=\"control.formItem.options\"\n        [error]=\"!!error\"\n        [errorMessage]=\"error\"\n      ></sebng-toggle-selector>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Card.toString()\">\n      <sebng-toggle-selector\n        [formControl]=\"control\"\n        [list]=\"control.formItem.options\"\n        [error]=\"!!error\"\n        [errorMessage]=\"error\"\n      ></sebng-toggle-selector>\n    </ng-container>\n\n    <ng-container *ngSwitchCase=\"controlType.Disclaimer.toString()\">\n    </ng-container>\n  </div>\n\n  <ng-container *ngIf=\"hasTemplate\">\n    <ng-container\n      *ngSwitchCase=\"controlType.TextArea.toString()\"\n      [ngTemplateOutlet]=\"textAreaTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Number.toString()\"\n      [ngTemplateOutlet]=\"numberTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Checkbox.toString()\"\n      [ngTemplateOutlet]=\"checkboxTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Dropdown.toString()\"\n      [ngTemplateOutlet]=\"dropdownTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Datepicker.toString()\"\n      [ngTemplateOutlet]=\"datePickerTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Radio.toString()\"\n      [ngTemplateOutlet]=\"radioTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.ToggleSelector.toString()\"\n      [ngTemplateOutlet]=\"toggleSelectorTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Card.toString()\"\n      [ngTemplateOutlet]=\"cardTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n    <ng-container\n      *ngSwitchCase=\"controlType.Disclaimer.toString()\"\n      [ngTemplateOutlet]=\"disclaimerTemplate\"\n      [ngTemplateOutletContext]=\"{ context: control, error: error }\"\n    >\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template let-context=\"context\" #metadata>\n  <span class=\"d-block font-weight-medium\" *ngIf=\"context?.description\">{{\n    context.description\n  }}</span>\n  <span class=\"d-block\" *ngIf=\"context?.label\">{{ context.label }}</span>\n</ng-template>\n\n<ng-template let-context=\"context\" #internalItemTemplate>\n  <label *ngIf=\"context?.label && context?.controlType !== 'Checkbox'\">{{\n    context.label\n  }}</label>\n  <span *ngIf=\"context?.descriptionHeader\">{{\n    context.descriptionHeader\n  }}</span>\n  <p\n    class=\"dynamic-form-item-description\"\n    *ngIf=\"context?.description && context?.controlType !== 'Checkbox'\"\n  >\n    <small>{{ context.description }}</small>\n  </p>\n</ng-template>\n\n<ng-container [ngTemplateOutlet]=\"metadata\"></ng-container>\n"
        },
        {
            "name": "DynamicFormMediaComponent",
            "id": "component-DynamicFormMediaComponent-5fc83d726c9eed5c445c983849058163b4d0ce5cf65eedc7d9e0d32617dc40c93d675ea6d0821cb98ea7a9ddee18e147f5e0a36c7e8bf869d7c3576b9e167258",
            "file": "projects/dynamic-form/src/lib/dynamic-form-media/dynamic-form-media.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-media",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-media.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "media",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Media",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'img'"
                        }
                    ]
                },
                {
                    "name": "imgHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateHeight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate image height based on the current width, the origin width and the origin height\nheight = currentWidth * naturalHeight / naturalWidth\n",
                    "description": "<p>Calculate image height based on the current width, the origin width and the origin height\nheight = currentWidth * naturalHeight / naturalWidth</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, Input, ViewChild } from '@angular/core';\nimport { SafeResourceUrl, SafeUrl } from '@angular/platform-browser';\nimport { Media, MediaKind } from '../model/dynamicFormItem';\n\n@Component({\n  selector: 'app-dynamic-form-media',\n  templateUrl: './dynamic-form-media.component.html',\n})\nexport class DynamicFormMediaComponent {\n  @Input() media: Media;\n  @ViewChild('img') image: ElementRef;\n  imgHeight: number;\n\n  get mediaPath(): SafeResourceUrl | SafeUrl | string | null {\n    if (this.media?.url) {\n      switch (this.media.kind) {\n        case MediaKind.Image:\n          return this.media.url;\n        case MediaKind.Video:\n          return this.media.url;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Calculate image height based on the current width, the origin width and the origin height\n   * height = currentWidth * naturalHeight / naturalWidth\n   */\n  calculateHeight(): void {\n    if (this.image) {\n      this.imgHeight =\n        (this.image.nativeElement.offsetWidth *\n          this.image.nativeElement.naturalHeight) /\n        this.image.nativeElement.naturalWidth;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "accessors": {
                "mediaPath": {
                    "name": "mediaPath",
                    "getSignature": {
                        "name": "mediaPath",
                        "type": "",
                        "returnType": "SafeResourceUrl | SafeUrl | string | null",
                        "line": 14
                    }
                }
            },
            "templateData": "<ng-container [ngSwitch]=\"media.kind\">\r\n  <div class=\"media-container\" *ngSwitchCase=\"0\">\r\n    <img\r\n      #img\r\n      [src]=\"mediaPath | safe: 'resourceUrl'\"\r\n      [alt]=\"media.description\"\r\n      [height]=\"imgHeight\"\r\n      (load)=\"calculateHeight()\"\r\n    />\r\n  </div>\r\n  <div class=\"media-container\" *ngSwitchCase=\"1\">\r\n    <iframe\r\n      [src]=\"mediaPath | safe: 'resourceUrl'\"\r\n      allow=\"fullscreen\"\r\n      frameBorder=\"0\"\r\n    ></iframe>\r\n  </div>\r\n  <span *ngIf=\"media?.description && media?.url\">{{ media.description }}</span>\r\n</ng-container>\r\n"
        },
        {
            "name": "DynamicFormModalComponent",
            "id": "component-DynamicFormModalComponent-b888f32cd89467a14004558750400cf22b5e48cbed1edeafa084739a65c7747753b6f638dc63b77882c4600977b61a307f235c8361c7f7e1c1854fde79ecb2d1",
            "file": "projects/dynamic-form/src/lib/dynamic-form-modal/dynamic-form-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dynamic-form-modal",
            "styleUrls": [
                "./dynamic-form-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dynamic-form-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cancelAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IFormAction",
                    "decorators": []
                },
                {
                    "name": "centered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "ExtendedFormGroupControl",
                    "decorators": []
                },
                {
                    "name": "controlIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "deleteAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "IFormAction",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "ExtendedFormGroup",
                    "decorators": []
                },
                {
                    "name": "modalToggle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "ModalPosition",
                    "decorators": []
                },
                {
                    "name": "saveAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IFormAction",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "ModalSize",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "cancelControl",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "deleteControl",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "saveControl",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "orderForm",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "controlValueChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "dismiss",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "save",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { KeyValue } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ModalPosition, ModalSize } from '@sebgroup/ng-components';\r\nimport { IFormAction } from '../i-form-action.enum';\r\n\r\nimport { ExtendedFormControl } from '../model/custom-classes/extended-form-control';\r\nimport {\r\n  ExtendedFormGroup,\r\n  ExtendedFormGroupControl,\r\n} from '../model/custom-classes/extended-form-group';\r\n\r\n@Component({\r\n  selector: 'app-dynamic-form-modal',\r\n  templateUrl: './dynamic-form-modal.component.html',\r\n  styleUrls: ['./dynamic-form-modal.component.scss'],\r\n})\r\nexport class DynamicFormModalComponent {\r\n  @Input() control: ExtendedFormGroupControl;\r\n  @Input() controlIndex: number;\r\n  @Input() modalToggle: boolean;\r\n  @Input() form: ExtendedFormGroup;\r\n  @Input() centered: boolean = false;\r\n  @Input() position: ModalPosition = 'right';\r\n  @Input() size: ModalSize;\r\n  @Input() cancelAction: IFormAction;\r\n  @Input() saveAction: IFormAction;\r\n  @Input() deleteAction: IFormAction;\r\n\r\n  @Output() saveControl: EventEmitter<any> = new EventEmitter();\r\n  @Output() cancelControl: EventEmitter<any> = new EventEmitter();\r\n  @Output() deleteControl: EventEmitter<any> = new EventEmitter();\r\n\r\n  submitted: boolean = false;\r\n\r\n  dismiss(): void {\r\n    this.cancelControl.emit(this.control.value);\r\n  }\r\n\r\n  save(): void {\r\n    this.form.updateValueAndValidity();\r\n    this.submitted = true;\r\n    if (this.form.valid) {\r\n      this.saveControl.emit({ item: this.form, control: this.control.value });\r\n    }\r\n  }\r\n\r\n  remove(): void {\r\n    this.deleteControl.emit({\r\n      form: this.control.value,\r\n      index: this.controlIndex,\r\n    });\r\n  }\r\n\r\n  orderForm = (\r\n    a: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>,\r\n    b: KeyValue<string, ExtendedFormGroup | ExtendedFormControl>\r\n  ): number => {\r\n    if (a.value['sectionItem'] && b.value['sectionItem']) {\r\n      return (\r\n        (a.value as ExtendedFormGroup).sectionItem.order -\r\n        (b.value as ExtendedFormGroup).sectionItem.order\r\n      );\r\n    } else if (a.value['formItem'] && b.value['formItem']) {\r\n      return (\r\n        (a.value as ExtendedFormControl).formItem.order -\r\n        (b.value as ExtendedFormControl).formItem.order\r\n      );\r\n    }\r\n    return 0;\r\n  };\r\n\r\n  controlValueChanged(): void {\r\n    this.submitted &&= false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".actions {\n  display: flex;\n  flex-direction: row;\n  padding: 0.5rem 0 2rem;\n  column-gap: 1rem;\n}\n",
                    "styleUrl": "./dynamic-form-modal.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<sebng-modal\r\n  [toggle]=\"modalToggle\"\r\n  [centered]=\"centered\"\r\n  [position]=\"position\"\r\n  [size]=\"size\"\r\n  (dismiss)=\"dismiss()\"\r\n>\r\n  <ng-container header>\r\n    <h3 class=\"p-3\">{{ control?.value?.value?.followUpItems?.title }}</h3>\r\n  </ng-container>\r\n  <ng-container body>\r\n    <p>{{ control?.value?.value?.followUpItems?.description }}</p>\r\n\r\n    <div *ngFor=\"let control of form.controls | keyvalue: orderForm\">\r\n      <div *ngFor=\"let item of control.value.controls | keyvalue: orderForm\">\r\n        <ng-container *ngIf=\"item.value.formItem; else controlWrapper\">\r\n          <app-dynamic-form-item\r\n            [control]=\"item.value\"\r\n            [submitted]=\"submitted\"\r\n            (controlValueChanged)=\"controlValueChanged()\"\r\n          ></app-dynamic-form-item>\r\n        </ng-container>\r\n        <ng-template #controlWrapper>\r\n          <ng-container *ngFor=\"let key of item.value.controls | objectKeys\">\r\n            <app-dynamic-form-item\r\n              [control]=\"item.value.controls[key]\"\r\n              [submitted]=\"submitted\"\r\n              (controlValueChanged)=\"controlValueChanged()\"\r\n            ></app-dynamic-form-item>\r\n          </ng-container>\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n    <div class=\"actions\">\r\n      <sebng-button\r\n        *ngIf=\"controlIndex !== null\"\r\n        theme=\"outline-danger\"\r\n        className=\"border-transparent\"\r\n        class=\"remove-action\"\r\n        (click)=\"remove()\"\r\n      >\r\n        {{ deleteAction.label }}\r\n      </sebng-button>\r\n      <sebng-button\r\n        theme=\"outline-primary\"\r\n        class=\"cancel-action\"\r\n        (click)=\"dismiss()\"\r\n      >\r\n        {{ cancelAction?.label }}\r\n      </sebng-button>\r\n      <sebng-button theme=\"primary\" class=\"save-action\" (click)=\"save()\">\r\n        {{ saveAction.label }}\r\n      </sebng-button>\r\n    </div>\r\n  </ng-container>\r\n</sebng-modal>\r\n"
        }
    ],
    "modules": [
        {
            "name": "DigitOnlyModule",
            "id": "module-DigitOnlyModule-33f8cf8fa5538f870ef6484727ae6f5894d22c89f867f4bba8d27ea336b974df4c5e2bff3e9ce684b419944e011e2a227a15bb81d229450462e8f456d39978f5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/dynamic-form/src/lib/digit-only/digit-only.directive.ts",
            "methods": [],
            "sourceCode": "import {\r\n  Directive,\r\n  ElementRef,\r\n  HostListener,\r\n  NgModule,\r\n  AfterViewInit,\r\n  Input,\r\n  AfterViewChecked,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport { formatNumber } from '@angular/common';\r\nimport { ExtendedFormControl } from '../model/custom-classes/extended-form-control';\r\n\r\n@Directive({\r\n  selector: '[digitsOnly]',\r\n})\r\nexport class DigitOnlyDirective implements AfterViewInit, AfterViewChecked {\r\n  inputElement: HTMLInputElement;\r\n  element: ElementRef;\r\n  @Input() formControl: ExtendedFormControl;\r\n\r\n  constructor(public el: ElementRef, private cd: ChangeDetectorRef) {\r\n    this.element = el;\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.inputElement = this.element.nativeElement.querySelector('input');\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    const { formattedValue } = this.formatValue();\r\n    this.inputElement.value = formattedValue;\r\n  }\r\n\r\n  @HostListener('input', ['$event'])\r\n  onInputChange(event: Event) {\r\n    const { initialValue, value, formattedValue } = this.formatValue();\r\n    if (initialValue !== this.inputElement.value) {\r\n      event?.stopPropagation();\r\n    }\r\n    this.formControl.patchValue(value);\r\n    this.inputElement.value = formattedValue;\r\n    this.cd.detectChanges();\r\n  }\r\n\r\n  formatValue(): {\r\n    initialValue: string;\r\n    value: string;\r\n    formattedValue: string;\r\n  } {\r\n    const initialValue: string = this.inputElement.value;\r\n    const value: string = initialValue\r\n      .split(/[.,]/)[0]\r\n      .replace(/[^0-9]*/g, '')\r\n      .replace(/^0+(?!\\.|$)/, '');\r\n    const formattedValue: string = value\r\n      ? formatNumber(Number(value), 'se')\r\n      : value;\r\n    return {\r\n      initialValue,\r\n      value,\r\n      formattedValue,\r\n    };\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [DigitOnlyDirective],\r\n  exports: [DigitOnlyDirective],\r\n})\r\nexport class DigitOnlyModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DigitOnlyDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DigitOnlyDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DynamicFormModule",
            "id": "module-DynamicFormModule-59e01ca44ecce12ce41edbe2e9c075c3a81794c3515c803c9cd75daee6f448944e588f917a729bd2533bd96c3083f0af68d59f6c7cf0663f61bd1805fa4d8711",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/dynamic-form/src/lib/dynamic-form.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { CommonModule, registerLocaleData } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport {\n  CheckboxModule,\n  RadioGroupModule,\n  TextboxModule,\n  DatepickerModule,\n  DropdownModule,\n  StepperModule,\n  TextareaModule,\n  ModalModule,\n  ToggleSelectorModule,\n  VideoModule,\n  ButtonModule,\n} from '@sebgroup/ng-components';\nimport { DynamicFormComponent } from './dynamic-form.component';\nimport { DynamicFormItemComponent } from './dynamic-form-item/dynamic-form-item.component';\nimport { DynamicFormModalComponent } from './dynamic-form-modal/dynamic-form-modal.component';\nimport { DynamicFormDataComponent } from './dynamic-from-data/dynamic-form-data.component';\nimport { DynamicFormMediaComponent } from './dynamic-form-media/dynamic-form-media.component';\nimport { SafePipeModule } from './safe.pipe';\nimport { DigitOnlyModule } from './digit-only/digit-only.directive';\nimport localeSe from '@angular/common/locales/se';\nimport { DynamicFormConfirmationComponent } from './dynamic-form-confirmation/dynamic-form-confirmation.component';\nimport { ObjectKeysPipe } from './object-keys.pipe';\n\nregisterLocaleData(localeSe);\n\n@NgModule({\n  declarations: [\n    DynamicFormComponent,\n    DynamicFormItemComponent,\n    DynamicFormModalComponent,\n    DynamicFormDataComponent,\n    DynamicFormMediaComponent,\n    DynamicFormConfirmationComponent,\n    ObjectKeysPipe,\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    DropdownModule,\n    CheckboxModule,\n    RadioGroupModule,\n    TextboxModule,\n    TextareaModule,\n    DatepickerModule,\n    StepperModule,\n    ModalModule,\n    ToggleSelectorModule,\n    VideoModule,\n    ButtonModule,\n    SafePipeModule,\n    DigitOnlyModule,\n  ],\n  exports: [\n    // COMPONENTS\n    DynamicFormComponent,\n    DynamicFormItemComponent,\n    DynamicFormModalComponent,\n    DynamicFormDataComponent,\n    DynamicFormMediaComponent,\n    DynamicFormConfirmationComponent,\n    // MODULES\n    DropdownModule,\n    CheckboxModule,\n    RadioGroupModule,\n    TextareaModule,\n    DatepickerModule,\n    StepperModule,\n    ModalModule,\n    ToggleSelectorModule,\n    VideoModule,\n    ButtonModule,\n    DigitOnlyModule,\n  ],\n  bootstrap: [DynamicFormItemComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\n})\nexport class DynamicFormModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DynamicFormComponent"
                        },
                        {
                            "name": "DynamicFormConfirmationComponent"
                        },
                        {
                            "name": "DynamicFormDataComponent"
                        },
                        {
                            "name": "DynamicFormItemComponent"
                        },
                        {
                            "name": "DynamicFormMediaComponent"
                        },
                        {
                            "name": "DynamicFormModalComponent"
                        },
                        {
                            "name": "ObjectKeysPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DigitOnlyModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DigitOnlyModule"
                        },
                        {
                            "name": "DynamicFormComponent"
                        },
                        {
                            "name": "DynamicFormConfirmationComponent"
                        },
                        {
                            "name": "DynamicFormDataComponent"
                        },
                        {
                            "name": "DynamicFormItemComponent"
                        },
                        {
                            "name": "DynamicFormMediaComponent"
                        },
                        {
                            "name": "DynamicFormModalComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "DynamicFormItemComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SafePipeModule",
            "id": "module-SafePipeModule-5217f09e2ca8dda5ef25c400e9d41624ba1475b1070e1510bc94b0513e62b8a63159b65f69b54e4daffe6d54f16d6eff75986ca9a7d0ce424cdef9b9532aa917",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/dynamic-form/src/lib/safe.pipe.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Pipe, PipeTransform } from '@angular/core';\r\nimport {\r\n  DomSanitizer,\r\n  SafeHtml,\r\n  SafeStyle,\r\n  SafeScript,\r\n  SafeUrl,\r\n  SafeResourceUrl,\r\n} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safe',\r\n})\r\nexport class SafePipe implements PipeTransform {\r\n  constructor(protected sanitizer: DomSanitizer) {}\r\n\r\n  public transform(\r\n    value: any,\r\n    type: string\r\n  ): SafeHtml | SafeStyle | SafeScript | SafeUrl | SafeResourceUrl {\r\n    switch (type) {\r\n      case 'html':\r\n        return this.sanitizer.bypassSecurityTrustHtml(value);\r\n      case 'style':\r\n        return this.sanitizer.bypassSecurityTrustStyle(value);\r\n      case 'script':\r\n        return this.sanitizer.bypassSecurityTrustScript(value);\r\n      case 'url':\r\n        return this.sanitizer.bypassSecurityTrustUrl(value);\r\n      case 'resourceUrl':\r\n        return this.sanitizer.bypassSecurityTrustResourceUrl(value);\r\n      default:\r\n        throw new Error(`Invalid safe type specified: ${type}`);\r\n    }\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  declarations: [SafePipe],\r\n  exports: [SafePipe],\r\n})\r\nexport class SafePipeModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SafePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "acqFormData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    id: 'd0be9c91-3211-40a1-84a1-903133b07d7a',\r\n    name: 'Hög eller låg risk',\r\n    text: 'Hur tänker du om risk och möjlighet till avkastning när det gäller ditt pensionssparande?',\r\n    description:\r\n      'Att pensionsspara med högre risk innebär att sparandet har bättre möjligheter att växa, men att värdet kan gå mycket upp och ner fram tills du går i pension. Det finns också en risk att sparandet sjunker i värde.Med lägre risk svänger värdet på sparandet mindre, men du har inte möjlighet till samma avkastning som när du sparar med högre risk. Däremot minskar risken för att sparandet ska sjunka mycket i värde. ',\r\n    subTitle: 'Placeringsrådgivning',\r\n    shortDescription: '',\r\n    optionType: 1,\r\n    media: [\r\n      {\r\n        id: 'c2999eba-8d4c-4649-965c-7aacaa9960d0',\r\n        url: 'https://seb-external.creo.se/i/tgO5DeWBQSjGfaUrPcZyxA',\r\n        kind: 1,\r\n        mimeType: null,\r\n        name: null,\r\n        description: 'Så kan du tänka om risk (01:39)',\r\n      },\r\n    ],\r\n    answerAlternatives: [\r\n      {\r\n        id: '116469b6-afed-42ff-b697-efecb594ab08',\r\n        text: 'Jag vill få möjlighet till högre pension, även om det innebär högre risk',\r\n        reasonLabel: null,\r\n        category: null,\r\n        value: null,\r\n        order: 1,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: 'fcda0671-bd08-4349-b20a-e13cd200e499',\r\n        text: 'Jag vill att sparandet får möjlighet att växa, men risken får inte vara för hög',\r\n        reasonLabel: null,\r\n        category: '',\r\n        value: null,\r\n        order: 2,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: '8a4c0290-608b-4af7-b1a9-af3d7b1d6a57',\r\n        text: 'Jag vill att risken är låg, även om sparandet får sämre möjlighet att växa',\r\n        reasonLabel: null,\r\n        category: null,\r\n        value: null,\r\n        order: 3,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: 'a8566d0f-0530-4bb8-96b0-534c3f6a4f2c',\r\n    name: 'Hur hög risk?',\r\n    text: 'Hur viktig är möjligheten till högre pension?',\r\n    description: '',\r\n    subTitle: 'Placeringsrådgivning',\r\n    shortDescription: '',\r\n    optionType: 1,\r\n    media: [],\r\n    answerAlternatives: [\r\n      {\r\n        id: 'cd6f3d73-1656-4395-834d-10d3d5f250b7',\r\n        text: 'Mycket viktig och jag är beredd på att spara med hög risk',\r\n        reasonLabel: null,\r\n        category: null,\r\n        value: null,\r\n        order: 1,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: '310da37d-c86f-4753-964b-77cf5dcc97da',\r\n        text: 'Viktigt men risken får inte vara för hög',\r\n        reasonLabel: null,\r\n        category: '',\r\n        value: '',\r\n        order: 2,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '98f8bbd3-3f2c-41e3-a2a0-502806108dd4',\r\n    name: 'Kortsiktig risk',\r\n    text: 'Tänk dig att du idag har ett pensionssparande som är värt 100 000 kronor. Är du bekväm med att ha hög risk i det sparandet?',\r\n    description: '',\r\n    subTitle: 'Placeringsrådgivning',\r\n    shortDescription: '',\r\n    optionType: 1,\r\n    media: [\r\n      {\r\n        id: '56798cd4-6dda-4416-9f78-3d30dbb789b0',\r\n        url: '/api/v1/media/56798cd4-6dda-4416-9f78-3d30dbb789b0/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\r\n        kind: 0,\r\n        mimeType: 'image/png',\r\n        name: 'main',\r\n        description:\r\n          'Här ser du hur det sparandet skulle kunna utvecklas på ett år med tre olika risknivåer. Den markerade raden visar det spann som tror att sparandet skulle hamna inom utifrån hur du har svarat hittills.',\r\n      },\r\n    ],\r\n    answerAlternatives: [\r\n      {\r\n        id: '98a2e0ce-e46b-43e1-8593-7d78a6e954a6',\r\n        text: 'Ja, jag är bekväm med den risknivån',\r\n        reasonLabel: null,\r\n        category: null,\r\n        value: null,\r\n        order: 1,\r\n        type: 1,\r\n        configuration: '{  \"Type\": 1}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: '2cf8ca43-aeee-4fa7-b3d3-1cd7e2e7a365',\r\n        text: 'Nej, jag vill ha en annan risknivå',\r\n        reasonLabel: null,\r\n        category: '',\r\n        value: null,\r\n        order: 2,\r\n        type: 1,\r\n        configuration:\r\n          '{  \"Type\": 1,  \"Control\": {    \"Title\": \"-\",    \"Text\": \"-\",    \"Deny\": \"Close\"}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: {\r\n          title: 'Ändra dina svar',\r\n          message:\r\n            'Om du vill spara med en annan risknivå behöver du gå tillbaka och se över dina svar.',\r\n          accept: null,\r\n          deny: 'Stäng',\r\n        },\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '8096e8ae-8eb8-4008-ba34-b97404043068',\r\n    name: 'Olika riskstrategier',\r\n    text: 'Tänk dig att du har 3 år kvar till hela din pension har betalats ut och ett pensionssparande på 100 000 kronor. Vilken strategi skulle du vara mest bekväm med för det här pensionssparandet?',\r\n    description:\r\n      '{\"Heading\": \"Läs mer om riskstrategierna\",\"Texts\": [{\"Subheading\": \"Vad är en riskstrategi?\",\"Content\": \"När du sparar med SEB Bot Advisor får du en personlig riskstrategi. Riskstrategin kan var vara låg, medellåg, medel, medelhög eller hög. Det är den här strategin som avgör hur hög risken i sparandet blir och hur snabbt risken sänks. Oavsett strategi är risken högre när du har lång tid kvar till sista utbetalningen från sparandet, men sänks gradvis ju äldre du blir. Vilken riskstrategi som vi tillämpar för ditt sparande beror bland annat på hur du svarar på de här frågorna.\",\"Image\": \"high-risk\"},{\"Subheading\": \"Så funkar prognoserna\",\"Content\": \"&lt;p&gt;När vi räknar på hur sparandet kan utvecklas över tid använder vi oss av avancerade beräkningsmodeller. I frågan utgår vi från ett påhittat sparande och visar ett pessimistiskt, ett optimistiskt och ett förväntat värde för tre olika riskstrategier efter ett visst antal år. Vid den tidpunkten tror vi att värdet på sparandet kommer att ligga nära det förväntade värdet, men&lt;/p&gt;&lt;ul&gt;&lt;li&gt;det är 30 procents sannolikt att sparandet utvecklas till det optimistiska värdet eller mer&lt;/li&gt;&lt;li&gt;det är mindre än 5 procents sannolikhet att sparandet utvecklas till det pessimistiska värdet eller mindre.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I exemplen räknar vi med att värdet på sparandet fortsätter att förändras under spartiden.Däremot räknar vi inte med framtida inbetalningar.&lt;/p&gt;\",\"Image\": null}]}',\r\n    subTitle: 'Placeringsrådgivning',\r\n    shortDescription: '',\r\n    optionType: 1,\r\n    media: [\r\n      {\r\n        id: '3164e266-039f-4ac1-8b87-31c2a29ba2e9',\r\n        url: '/api/v1/media/3164e266-039f-4ac1-8b87-31c2a29ba2e9/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\r\n        kind: 0,\r\n        mimeType: 'image/png',\r\n        name: 'main',\r\n        description:\r\n          'I tabellen ser du hur mycket du skulle kunna få utbetalt per månad med olika strategier.',\r\n      },\r\n      {\r\n        id: 'a6f876e3-000c-4c6b-8f19-af8e548f3439',\r\n        url: '/api/v1/media/a6f876e3-000c-4c6b-8f19-af8e548f3439/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\r\n        kind: 0,\r\n        mimeType: 'image/png',\r\n        name: 'high-risk',\r\n        description: '',\r\n      },\r\n    ],\r\n    answerAlternatives: [\r\n      {\r\n        id: '810ef431-5a37-4adb-90a5-6f0e55b259ca',\r\n        text: 'Jag är bekväm med en strategi med hög risk',\r\n        reasonLabel: null,\r\n        category: 'RISK_WILLINGNESS',\r\n        value: '5',\r\n        order: 1,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: '3f4fd955-f855-41b7-8efd-8847ca54c8fd',\r\n        text: 'Jag är bekväm med en strategi med medelhög risk',\r\n        reasonLabel: null,\r\n        category: 'RISK_WILLINGNESS',\r\n        value: '4',\r\n        order: 2,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: 'f404a81a-ad83-47cb-aa36-922c3d7cae52',\r\n    name: 'Hållbart sparande',\r\n    text: 'Vill du pensionsspara med hållbart fokus?',\r\n    description: '',\r\n    subTitle: 'Placeringsrådgivning',\r\n    shortDescription:\r\n      'När vi väljer fonder till ditt sparande letar vi i första hand efter hållbara fonder. Om du dessutom har en hållbar profil prioriterar vi hållbarhet ännu mer. Hållbara fonder tar hänsyn till olika miljömässiga och sociala aspekter när de investerar i företag.',\r\n    optionType: 1,\r\n    media: [\r\n      {\r\n        id: 'c5f56e2e-e8f9-4944-83db-13913e4785fe',\r\n        url: 'https://seb-external.creo.se/i/ve6LxUx7pESgXjKOYyRtmg',\r\n        kind: 1,\r\n        mimeType: null,\r\n        name: null,\r\n        description: 'Så kan du påverka med ditt sparande (01:33)',\r\n      },\r\n    ],\r\n    answerAlternatives: [\r\n      {\r\n        id: 'd8be6bcc-1ef3-460c-b58d-b68f73ee5a95',\r\n        text: 'Ja, jag vill spara med hållbart fokus',\r\n        reasonLabel: '',\r\n        category: 'SUSTAINABILITY',\r\n        value: '1',\r\n        order: 1,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: '8b1870cd-2587-4549-8f79-88ba46e3cdd7',\r\n        text: 'Nej, jag vill inte spara med hållbart fokus',\r\n        reasonLabel: null,\r\n        category: 'SUSTAINABILITY',\r\n        value: '0',\r\n        order: 2,\r\n        type: 1,\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '001b2885-4960-4a64-835c-48ff20b3f3d7',\r\n    name: '',\r\n    text: 'Vi behöver veta mer om din ekonomi',\r\n    description:\r\n      'För att vi ska kunna ge råd som passar dig, behöver vi ställa några frågor om din ekonomi. Ju noggrannare du svarar, desto bättre råd kan du få. Det är viktigt att du svarar på alla frågor så att du inte får råd på felaktiga grunder.',\r\n    subTitle: '',\r\n    shortDescription: '',\r\n    optionType: 0,\r\n    media: [],\r\n    answerAlternatives: [],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '1b856337-9ba7-4186-a56d-a9c145fd851a',\r\n    name: 'Inkomst',\r\n    text: 'Hur stor är din månadsinkomst efter skatt?',\r\n    description: '',\r\n    subTitle: 'Din ekonomi',\r\n    shortDescription: '',\r\n    optionType: 2,\r\n    media: [],\r\n    answerAlternatives: [\r\n      {\r\n        id: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\r\n        text: 'Din lön eller pension efter skatt en genomsnittlig månad',\r\n        reasonLabel: 'Räkna även med bidrag och provision.',\r\n        category: 'MONTHLY_INCOME',\r\n        value: '',\r\n        order: 1,\r\n        type: 5,\r\n        configuration:\r\n          '{  \"InputType\": \"Number\",  \"IsRequired\": true,  \"Max\": 1000000000,  \"Min\": 1,  \"Version\": \"1.0.0\",  \"Type\": 2,  \"GroupLabel\": \"kr/mån\",  \"ErrorMessage\": \"Fyll i din månadsinkomst\"}',\r\n        media: [],\r\n        rules: [\r\n          {\r\n            ruleType: 0,\r\n            value: null,\r\n            message: 'Fyll i din månadsinkomst',\r\n          },\r\n          {\r\n            ruleType: 2,\r\n            value: '1',\r\n            message: 'Du behöver fylla i ett värde större än eller lika med',\r\n          },\r\n          {\r\n            ruleType: 3,\r\n            value: '1000000000',\r\n            message: 'Värdet kan inte vara över',\r\n          },\r\n        ],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '53532df5-586f-453b-a1a4-d409b6fd4a9b',\r\n    name: 'Kvar i månaden',\r\n    text: 'Hur mycket brukar du ha kvar efter att du har betalat alla viktiga utgifter?',\r\n    description:\r\n      'Räkna också med sådant som är viktigt för dig, till exempel restaurangbesök och sparande till resor.',\r\n    subTitle: 'Din ekonomi',\r\n    shortDescription: '',\r\n    optionType: 2,\r\n    media: [],\r\n    answerAlternatives: [\r\n      {\r\n        id: 'a6e8eabd-2f14-4b23-8a6d-8cb40b9f8a14',\r\n        text: 'Kvar i månaden',\r\n        reasonLabel: '',\r\n        category: 'MONTHLY_AMOUNT_LEFT',\r\n        value: null,\r\n        order: 1,\r\n        type: 5,\r\n        media: [],\r\n        rules: [\r\n          {\r\n            ruleType: 0,\r\n            value: null,\r\n            message: 'Fyll i hur mycket du brukar ha kvar i månaden',\r\n          },\r\n          {\r\n            ruleType: 9,\r\n            value: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\r\n            message: 'Värdet kan inte vara över',\r\n          },\r\n          {\r\n            ruleType: 2,\r\n            value: '1',\r\n            message: 'Du behöver fylla i ett värde större än eller lika med',\r\n          },\r\n          {\r\n            ruleType: 3,\r\n            value: '100000000',\r\n            message: 'Värdet kan inte vara över',\r\n          },\r\n        ],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '92e1f6fc-d838-4a6f-9da9-38435f9be5ba',\r\n    name: 'Tillgångar',\r\n    visibleInTable: false,\r\n    text: '&lt;p&gt;Lägg till skulder som du har hos eller utanför SEB.&lt;/p&gt;<br>',\r\n    description: '[]',\r\n    subTitle: 'Din ekonomi',\r\n    shortDescription: '',\r\n    optionType: 5,\r\n    media: [],\r\n    answerAlternatives: [],\r\n    groupQuestionItems: [\r\n      {\r\n        id: 'fb672a39-3c2d-4b66-88c9-4073f0f17399',\r\n        name: '',\r\n        visibleInTable: false,\r\n        text: 'Har du pengar på konton?',\r\n        description: '[]',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: 3,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: '087f742b-a641-4cfd-a452-befc1eac8c41',\r\n            text: 'Ja',\r\n            reasonLabel: null,\r\n            category: 'SAVING_AMOUNT',\r\n            value: null,\r\n            order: 1,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Pengar på konton\",\\n    \"Description\": \"Räkna även med pengar som du har på konton hos SEB. Om du har ett konto tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: '2c96f951-67de-4f43-9dd0-716bdfe189de',\r\n                name: 'Pengar på konton',\r\n                visibleInTable: false,\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: 2,\r\n                media: [],\r\n                answerAlternatives: [\r\n                  {\r\n                    id: '2150e645-7f56-4cfe-9296-f7ae04e3535e',\r\n                    text: 'Värde',\r\n                    reasonLabel: null,\r\n                    category: 'SAVING_AMOUNT',\r\n                    value: null,\r\n                    order: 1,\r\n                    type: 5,\r\n                    configuration:\r\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 1000000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\r\n                    media: [],\r\n                    rules: [\r\n                      {\r\n                        ruleType: 0,\r\n                        value: null,\r\n                        message: 'Fyll i hur mycket du har på konton',\r\n                      },\r\n                      {\r\n                        ruleType: 2,\r\n                        value: '1',\r\n                        message:\r\n                          'Du behöver fylla i ett värde större än eller lika med',\r\n                      },\r\n                      {\r\n                        ruleType: 3,\r\n                        value: '1000000000',\r\n                        message: 'Värdet kan inte vara över',\r\n                      },\r\n                    ],\r\n                    confirm: null,\r\n                    followupQuestions: [],\r\n                  },\r\n                ],\r\n                groupQuestionItems: [],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: 'eafff1c7-2aa8-4493-8efd-8148963902da',\r\n            text: 'Nej',\r\n            reasonLabel: null,\r\n            category: 'SAVING_AMOUNT',\r\n            value: null,\r\n            order: 2,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"\",\\n    \"Description\": \"\",\\n    \"Label\": \"\"\\n  },\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n      {\r\n        id: 'f8c4fde2-eb12-44cb-a893-a5a329f5f8c7',\r\n        name: '',\r\n        visibleInTable: false,\r\n        text: 'Äger du fonder eller värdepapper?',\r\n        description: '[]',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: 3,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: '312e28ec-dda8-46d2-b70a-e1e4364b5121',\r\n            text: 'Ja',\r\n            reasonLabel: null,\r\n            category: 'SAVING_AMOUNT',\r\n            value: null,\r\n            order: 1,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Fonder och värdepapper\",\\n    \"Description\": \"Räkna även med fonder och värdepapper som du har hos SEB. Räkna inte med fonder och värdepapper som är tänkta till pensionen. Om du har sparandet tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: 'a6c1aaeb-b690-4dc8-af4d-2d08d2cc3f94',\r\n                name: 'Fonder och värdepapper\\n',\r\n                visibleInTable: false,\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: 2,\r\n                media: [],\r\n                answerAlternatives: [\r\n                  {\r\n                    id: '9d5bbc90-19d9-40ad-868a-7f79a1de5d63',\r\n                    text: 'Värde',\r\n                    reasonLabel: null,\r\n                    category: 'SAVING_AMOUNT',\r\n                    value: null,\r\n                    order: 1,\r\n                    type: 5,\r\n                    configuration:\r\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 1000000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\r\n                    media: [],\r\n                    rules: [\r\n                      {\r\n                        ruleType: 0,\r\n                        value: null,\r\n                        message: 'Fyll i hur mycket du har på konton',\r\n                      },\r\n                      {\r\n                        ruleType: 3,\r\n                        value: '1000000000',\r\n                        message: 'Värdet kan inte vara över',\r\n                      },\r\n                      {\r\n                        ruleType: 2,\r\n                        value: '1',\r\n                        message:\r\n                          'Du behöver fylla i ett värde större än eller lika med',\r\n                      },\r\n                    ],\r\n                    confirm: null,\r\n                    followupQuestions: [],\r\n                  },\r\n                ],\r\n                groupQuestionItems: [],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: '1a832dea-c5ab-42bc-8129-2c00adff9b60',\r\n            text: 'Nej',\r\n            reasonLabel: null,\r\n            category: 'SAVING_AMOUNT',\r\n            value: null,\r\n            order: 2,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n      {\r\n        id: '5c1936ff-4ebb-448a-bd24-872d3169c623',\r\n        name: '',\r\n        visibleInTable: false,\r\n        text: 'Äger du någon fastighet?',\r\n        description: '[]',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: 3,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: '1024a005-e0ef-4611-bf2c-579fad7dc20f',\r\n            text: 'Ja',\r\n            reasonLabel: null,\r\n            category: 'HOME_VALUE',\r\n            value: null,\r\n            order: 1,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Hint\": \"(Bostadsrätt, villa, skog, etc.)\",\\n  \"Modal\": {\\n    \"Title\": \"Fastigheter\",\\n    \"Description\": \"Fyll i värdet på din bostadsrätt, villa, skog eller liknande. Fyll i det sammanlagda värdet om du har flera fastigheter. Om du äger en fastighet tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: 'e712d59b-e881-4449-ad20-52334aa3f35b',\r\n                name: 'Äger du någon fastighet?',\r\n                visibleInTable: false,\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: 2,\r\n                media: [],\r\n                answerAlternatives: [\r\n                  {\r\n                    id: '3ce2dc91-787b-4ab3-86d0-7b9c0bdd1c88',\r\n                    text: 'Värde',\r\n                    reasonLabel: null,\r\n                    category: 'HOME_VALUE',\r\n                    value: null,\r\n                    order: 1,\r\n                    type: 5,\r\n                    configuration:\r\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\r\n                    media: [],\r\n                    rules: [\r\n                      {\r\n                        ruleType: 0,\r\n                        value: null,\r\n                        message: 'Fyll i värdet på dina fastigheter',\r\n                      },\r\n                      {\r\n                        ruleType: 3,\r\n                        value: '100000000',\r\n                        message: 'Värdet kan inte vara över',\r\n                      },\r\n                      {\r\n                        ruleType: 2,\r\n                        value: '1',\r\n                        message:\r\n                          'Du behöver fylla i ett värde större än eller lika med',\r\n                      },\r\n                    ],\r\n                    confirm: null,\r\n                    followupQuestions: [],\r\n                  },\r\n                ],\r\n                groupQuestionItems: [],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: '3d1061ee-6f00-42cd-b6a6-3661d36c9e33',\r\n            text: 'Nej',\r\n            reasonLabel: null,\r\n            category: 'HOME_VALUE',\r\n            value: null,\r\n            order: 2,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i värdet på dina fastigheter\"\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n      {\r\n        id: 'f60f7eed-194d-48af-9707-5be418e73952',\r\n        name: '',\r\n        visibleInTable: false,\r\n        text: 'Äger du något företag?',\r\n        description: '[]',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: 3,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: 'b617407b-576d-43ab-8458-e3a3d13103df',\r\n            text: 'Ja',\r\n            reasonLabel: null,\r\n            category: 'ASSETS_VALUE',\r\n            value: null,\r\n            order: 1,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Företag\",\\n    \"Description\": \"Gör en försiktig uppskattning av värdet på ditt företag. Fyll i det sammanlagda värdet om du har flera företag. Om du äger ett företag tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: '8b41e306-b493-467d-bd66-8ee93660bd5d',\r\n                name: 'Äger du något företag?',\r\n                visibleInTable: false,\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: 2,\r\n                media: [],\r\n                answerAlternatives: [\r\n                  {\r\n                    id: '8cc40776-82ae-44d8-a213-c244b84e31c4',\r\n                    text: 'Värde',\r\n                    reasonLabel: null,\r\n                    category: 'ASSETS_VALUE',\r\n                    value: null,\r\n                    order: 1,\r\n                    type: 5,\r\n                    configuration:\r\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\r\n                    media: [],\r\n                    rules: [\r\n                      { ruleType: 2, value: '1', message: null },\r\n                      { ruleType: 3, value: '100000000', message: null },\r\n                      {\r\n                        ruleType: 0,\r\n                        value: null,\r\n                        message:\r\n                          'Fyll i hur mycket du brukar ha kvar i månaden',\r\n                      },\r\n                    ],\r\n                    confirm: null,\r\n                    followupQuestions: [],\r\n                  },\r\n                ],\r\n                groupQuestionItems: [],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: '82a6f7c9-90fd-47fc-abe5-9cb018912274',\r\n            text: 'Nej',\r\n            reasonLabel: null,\r\n            category: 'ASSETS_VALUE',\r\n            value: null,\r\n            order: 2,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i värdet på dina fastigheter\"\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n      {\r\n        id: '8492212e-e37c-4c9d-bdf4-c884cf3ad2b6',\r\n        name: '',\r\n        visibleInTable: false,\r\n        text: 'Har du andra tillgångar?',\r\n        description: '[]',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: 3,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: 'cbb8d3e4-22bd-4b0e-9703-3375e1ebb1a6',\r\n            text: 'Ja',\r\n            reasonLabel: null,\r\n            category: 'ASSETS_VALUE',\r\n            value: null,\r\n            order: 1,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Andra tillgångar\",\\n    \"Description\": \"Om du har en tillgång tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: 'd328ecad-2756-4f3a-9040-26235994e51c',\r\n                name: 'Andra tillgångar',\r\n                visibleInTable: false,\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: 2,\r\n                media: [],\r\n                answerAlternatives: [\r\n                  {\r\n                    id: '097a6001-d895-42b1-92bb-4a991aaf6fc5',\r\n                    text: 'Värde',\r\n                    reasonLabel: null,\r\n                    category: 'ASSETS_VALUE',\r\n                    value: null,\r\n                    order: 1,\r\n                    type: 5,\r\n                    configuration:\r\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\r\n                    media: [],\r\n                    rules: [\r\n                      {\r\n                        ruleType: 0,\r\n                        value: null,\r\n                        message: 'Fyll i värdet på dina andra tillgångar',\r\n                      },\r\n                      {\r\n                        ruleType: 3,\r\n                        value: '100000000',\r\n                        message: 'Värdet kan inte vara över',\r\n                      },\r\n                      {\r\n                        ruleType: 2,\r\n                        value: '1',\r\n                        message:\r\n                          'Du behöver fylla i ett värde större än eller lika med',\r\n                      },\r\n                    ],\r\n                    confirm: null,\r\n                    followupQuestions: [],\r\n                  },\r\n                ],\r\n                groupQuestionItems: [],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: 'b69ba899-df22-42b4-a74a-4601afa75ffa',\r\n            text: 'Nej',\r\n            reasonLabel: null,\r\n            category: 'ASSETS_VALUE',\r\n            value: null,\r\n            order: 2,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n      {\r\n        id: '3ad4a393-09ad-4eae-b910-c3ce84935b00',\r\n        name: null,\r\n        text: 'Are you on mediciation',\r\n        description: 'Are you sick',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: QuestionOptionType.Radio,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: '18edeccd-f19b-437d-aa76-4e1e37da72f0',\r\n            text: 'yes',\r\n            reasonLabel: null,\r\n            category: null,\r\n            value: null,\r\n            order: 1,\r\n            type: ComponentType.RadioTextBox,\r\n            configuration:\r\n              '{\"Modal\":{\"Title\": \"What Medicine you take\", \"Description\": \"please tell us what medicine you take and how much does it cost\"}}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: 'bd620ae8-ccf1-46c4-842d-ef3bd26491e7',\r\n                name: 'Medicine Table',\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: QuestionOptionType.Table,\r\n                media: [],\r\n                answerAlternatives: [],\r\n                groupQuestionItems: [\r\n                  {\r\n                    id: '8d8e60ed-ddc0-4864-a302-4c7e01239d03',\r\n                    name: 'Medicine Name',\r\n                    text: '&nbsp;',\r\n                    description: '[]',\r\n                    subTitle: '',\r\n                    shortDescription: '',\r\n                    optionType: QuestionOptionType.Input,\r\n                    media: [],\r\n                    answerAlternatives: [\r\n                      {\r\n                        id: '21be4801-e7bf-4b83-a66c-c84a4e770449',\r\n                        text: 'Medicine Name',\r\n                        reasonLabel: null,\r\n                        category: null,\r\n                        value: null,\r\n                        order: 1,\r\n                        type: ComponentType.Text,\r\n                        configuration:\r\n                          '{\\n  \"InputType\": \"Text\",\\n  \"IsRequired\": true,\\n  \"Type\": 2\\n}',\r\n                        media: [],\r\n                        rules: [\r\n                          {\r\n                            ruleType: RuleType.required,\r\n                            value: null,\r\n                            message: 'medicine name is required',\r\n                          },\r\n                        ],\r\n                        confirm: null,\r\n                        followupQuestions: [],\r\n                      },\r\n                    ],\r\n                    groupQuestionItems: [],\r\n                  },\r\n                  {\r\n                    id: 'd03c8d5e-ba30-41a6-b836-0f7d3f69f002',\r\n                    name: 'Medicine Brand',\r\n                    text: '&nbsp;',\r\n                    description: '[]',\r\n                    subTitle: '',\r\n                    shortDescription: '',\r\n                    optionType: QuestionOptionType.Input,\r\n                    media: [],\r\n                    answerAlternatives: [\r\n                      {\r\n                        id: '39779d7e-9d05-4c3b-8683-a1096081aa1a',\r\n                        text: 'Medicine Brand',\r\n                        reasonLabel: null,\r\n                        category: null,\r\n                        value: null,\r\n                        order: 1,\r\n                        type: ComponentType.Text,\r\n                        configuration:\r\n                          '{\\n  \"InputType\": \"Text\",\\n  \"IsRequired\": true,\\n  \"Type\": 2\\n}',\r\n                        media: [],\r\n                        rules: [\r\n                          {\r\n                            ruleType: RuleType.required,\r\n                            value: null,\r\n                            message: 'medicine brand is required',\r\n                          },\r\n                        ],\r\n                        confirm: null,\r\n                        followupQuestions: [],\r\n                      },\r\n                    ],\r\n                    groupQuestionItems: [],\r\n                  },\r\n                  {\r\n                    id: 'ec613a5b-8678-47d2-a68e-c94f56378cf6',\r\n                    name: 'Medicine Price',\r\n                    text: '&nbsp;',\r\n                    description: '[]',\r\n                    subTitle: '',\r\n                    shortDescription: '',\r\n                    optionType: QuestionOptionType.Input,\r\n                    media: [],\r\n                    answerAlternatives: [\r\n                      {\r\n                        id: '81526ffe-bad8-47e3-b87e-096885131fe2',\r\n                        text: 'Medicine Price',\r\n                        reasonLabel: null,\r\n                        category: null,\r\n                        value: null,\r\n                        order: 1,\r\n                        type: ComponentType.Number,\r\n                        configuration:\r\n                          '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Type\": 5\\n}',\r\n                        media: [],\r\n                        rules: [\r\n                          {\r\n                            ruleType: RuleType.required,\r\n                            value: null,\r\n                            message: 'medicine price is required',\r\n                          },\r\n                        ],\r\n                        confirm: null,\r\n                        followupQuestions: [],\r\n                      },\r\n                    ],\r\n                    groupQuestionItems: [],\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: '7999d0b1-d4a4-4bb3-97c4-624b1122c818',\r\n            text: 'no',\r\n            reasonLabel: null,\r\n            category: null,\r\n            value: null,\r\n            order: 2,\r\n            type: ComponentType.RadioTextBox,\r\n            configuration: '{\\n  \"Type\": 3,\\n  \"Modal\": {}\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n    ],\r\n  },\r\n]"
            },
            {
                "name": "AcquisitionForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "attributeTypeMapDynamicFormItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\r\n  { name: 'key', type: 'string' },\r\n  { name: 'value', type: 'object' },\r\n  { name: 'label', type: 'string' },\r\n  { name: 'description', type: 'string' },\r\n  { name: 'className', type: 'string' },\r\n  { name: 'required', type: 'boolean' },\r\n  { name: 'multi', type: 'boolean' },\r\n  { name: 'min', type: 'object' },\r\n  { name: 'max', type: 'object' },\r\n  { name: 'order', type: 'number' },\r\n  { name: 'placeholder', type: 'string' },\r\n  { name: 'options', type: 'Array<DynamicFormOption>' },\r\n  { name: 'rulerKey', type: 'string' },\r\n  { name: 'condition', type: 'object' },\r\n  { name: 'controlType', type: 'DynamicFormType' },\r\n  { name: 'controlMetaData', type: 'object' },\r\n]"
            },
            {
                "name": "attributeTypeMapDynamicFormOption",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n]"
            },
            {
                "name": "attributeTypeMapDynamicFormResponseItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\r\n  { name: 'key', type: 'string' },\r\n  { name: 'value', type: 'object' },\r\n  { name: 'sectionId', type: 'string' },\r\n  { name: 'sectionIndex', type: 'number' },\r\n  { name: 'formItem', type: 'DynamicFormItem' },\r\n]"
            },
            {
                "name": "attributeTypeMapDynamicFormSection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AttributeTypeMap[]",
                "defaultValue": "[\n  { name: 'title', type: 'string' },\n  { name: 'category', type: 'string' },\n  { name: 'description', type: 'string' },\n  { name: 'className', type: 'string' },\n  { name: 'key', type: 'string' },\n  { name: 'order', type: 'number' },\n  { name: 'multi', type: 'boolean' },\n  { name: 'sectionType', type: 'any' },\n  { name: 'items', type: 'Array<DynamicFormItem>' },\n]"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ComplexForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DynamicFormType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  Text: 'Text' as DynamicFormType,\r\n  TextArea: 'TextArea' as DynamicFormType,\r\n  Checkbox: 'Checkbox' as DynamicFormType,\r\n  Dropdown: 'Dropdown' as DynamicFormType,\r\n  Datepicker: 'Datepicker' as DynamicFormType,\r\n  Radio: 'Radio' as DynamicFormType,\r\n  Number: 'Number' as DynamicFormType,\r\n  Card: 'Card' as DynamicFormType,\r\n  ToggleSelector: 'ToggleSelector' as DynamicFormType,\r\n  Disclaimer: 'Disclaimer' as DynamicFormType,\r\n  None: 'None' as DynamicFormType,\r\n}"
            },
            {
                "name": "familyFollowup",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FollowUpItem",
                "defaultValue": "{\r\n  type: 'inline',\r\n  items: [\r\n    {\r\n      key: 'partner-birth-date',\r\n      controlType: 'Datepicker',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'Dina partners födelsedatum:',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-name',\r\n      controlType: 'Text',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'Din partners för-och efternamn:',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income',\r\n      controlType: 'Number',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'Din partners månadsinkomst:',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income-more-than-equal',\r\n      controlType: 'Number',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'partner-monthly-income-more-than-equal',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n        {\r\n          message: 'more than or equal partner monthly income',\r\n          type: RuleType.minThanEqualsReference,\r\n          value: 'partner-monthly-income',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income-more-than',\r\n      controlType: 'Number',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'partner-monthly-income-more-than',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n        {\r\n          message: 'more than partner monthly income',\r\n          type: RuleType.minThanReference,\r\n          value: 'partner-monthly-income',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income-less-than',\r\n      controlType: 'Number',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'partner-monthly-income-less-than',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n        {\r\n          message: 'less than partner monthly income',\r\n          type: RuleType.maxThanReference,\r\n          value: 'partner-monthly-income',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income-less-than-equal',\r\n      controlType: 'Number',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'partner-monthly-income-less-than-equal',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n        {\r\n          message: 'less than equal partner monthly income',\r\n          type: RuleType.maxThanEqualReference,\r\n          value: 'partner-monthly-income',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income-radio',\r\n      controlType: 'Radio',\r\n      label: '',\r\n      options: [\r\n        {\r\n          id: '1',\r\n          value: '1',\r\n          label: 'Före skatt',\r\n        },\r\n        {\r\n          id: '2',\r\n          value: '2',\r\n          label: 'Efter skatt',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'then-maried',\r\n      controlType: 'Text',\r\n      label: 'Gift sedan',\r\n    },\r\n  ],\r\n}"
            },
            {
                "name": "FormValidation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "getButtonAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(label: string) => ({\r\n  hasAction: false,\r\n  label,\r\n})"
            },
            {
                "name": "InlineConditionalRendering",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "InlineMultipleRecords",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "mapControlType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(controlType: ComponentType): DynamicFormType => {\r\n  switch (controlType) {\r\n    case ComponentType.Text:\r\n      return DynamicFormType.Text;\r\n    case ComponentType.Number:\r\n      return DynamicFormType.Number;\r\n    case ComponentType.CheckBox:\r\n      return DynamicFormType.Checkbox;\r\n    case ComponentType.Date:\r\n      return DynamicFormType.Datepicker;\r\n    case ComponentType.RadioTextBox:\r\n      return DynamicFormType.Radio;\r\n    case ComponentType.Card:\r\n      return DynamicFormType.Card;\r\n    case ComponentType.None:\r\n      return DynamicFormType.None;\r\n    default:\r\n      return DynamicFormType.Text;\r\n  }\r\n}"
            },
            {
                "name": "mapRules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(rules): Rule[] => {\r\n  return rules.map((rule) => {\r\n    switch (rule.ruleType) {\r\n      case 0:\r\n      default:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.required,\r\n        };\r\n      case 1:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.pattern,\r\n        };\r\n      case 2:\r\n        return { value: rule.value, message: rule.message, type: RuleType.min };\r\n      case 3:\r\n        return { value: rule.value, message: rule.message, type: RuleType.max };\r\n      case 4:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.minLength,\r\n        };\r\n      case 5:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.maxLength,\r\n        };\r\n      case 6:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.minThanReference,\r\n        };\r\n      case 7:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.minThanEqualsReference,\r\n        };\r\n      case 8:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.maxThanReference,\r\n        };\r\n      case 9:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.maxThanEqualReference,\r\n        };\r\n      case 10:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.confirm,\r\n        };\r\n    }\r\n  });\r\n}"
            },
            {
                "name": "ModalConditionalRendering",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MultipleRecords",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MultiStepForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "parseConfiguration",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/map.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(configuration: string): { [key: string]: any } => {\r\n  let parsedConfig: { [key: string]: any } = {};\r\n  if (configuration) {\r\n    try {\r\n      parsedConfig = JSON.parse(configuration);\r\n    } catch (e) {}\r\n  }\r\n  return parsedConfig;\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/dynamic-form/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Demo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DemoComponent>",
                "defaultValue": "(args: DemoComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [
            {
                "name": "mapToDynamicForm",
                "file": "stories/map.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "arr",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "DynamicFormSection[]",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "DynamicFormType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"Text\" | \"TextArea\" | \"Checkbox\" | \"Dropdown\" | \"Datepicker\" | \"Radio\" | \"Number\" | \"Card\" | \"ToggleSelector\" | \"Disclaimer\" | \"None\"",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "ExtendedFormGroupControl",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ExtendedFormControl | ExtendedFormArray | ExtendedFormGroup | ExtendedFormGroupArray",
                "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [
            {
                "name": "ComponentType",
                "childs": [
                    {
                        "name": "None",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Card",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Text",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "RadioTextBox",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CheckBox",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Date",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "stories/map.ts"
            },
            {
                "name": "MediaKind",
                "childs": [
                    {
                        "name": "Image",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Video",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
            },
            {
                "name": "QuestionOptionType",
                "childs": [
                    {
                        "name": "None",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Card",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Input",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Radio",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "CheckBox",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Group",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "Table",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "stories/map.ts"
            },
            {
                "name": "RuleType",
                "childs": [
                    {
                        "name": "required",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "min",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "max",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "minLength",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maxLength",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pattern",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "minThanReference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "minThanEqualsReference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maxThanReference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "maxThanEqualReference",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "confirm",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
            }
        ],
        "groupedVariables": {
            "stories/Demo.stories.ts": [
                {
                    "name": "acqFormData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    id: 'd0be9c91-3211-40a1-84a1-903133b07d7a',\r\n    name: 'Hög eller låg risk',\r\n    text: 'Hur tänker du om risk och möjlighet till avkastning när det gäller ditt pensionssparande?',\r\n    description:\r\n      'Att pensionsspara med högre risk innebär att sparandet har bättre möjligheter att växa, men att värdet kan gå mycket upp och ner fram tills du går i pension. Det finns också en risk att sparandet sjunker i värde.Med lägre risk svänger värdet på sparandet mindre, men du har inte möjlighet till samma avkastning som när du sparar med högre risk. Däremot minskar risken för att sparandet ska sjunka mycket i värde. ',\r\n    subTitle: 'Placeringsrådgivning',\r\n    shortDescription: '',\r\n    optionType: 1,\r\n    media: [\r\n      {\r\n        id: 'c2999eba-8d4c-4649-965c-7aacaa9960d0',\r\n        url: 'https://seb-external.creo.se/i/tgO5DeWBQSjGfaUrPcZyxA',\r\n        kind: 1,\r\n        mimeType: null,\r\n        name: null,\r\n        description: 'Så kan du tänka om risk (01:39)',\r\n      },\r\n    ],\r\n    answerAlternatives: [\r\n      {\r\n        id: '116469b6-afed-42ff-b697-efecb594ab08',\r\n        text: 'Jag vill få möjlighet till högre pension, även om det innebär högre risk',\r\n        reasonLabel: null,\r\n        category: null,\r\n        value: null,\r\n        order: 1,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: 'fcda0671-bd08-4349-b20a-e13cd200e499',\r\n        text: 'Jag vill att sparandet får möjlighet att växa, men risken får inte vara för hög',\r\n        reasonLabel: null,\r\n        category: '',\r\n        value: null,\r\n        order: 2,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: '8a4c0290-608b-4af7-b1a9-af3d7b1d6a57',\r\n        text: 'Jag vill att risken är låg, även om sparandet får sämre möjlighet att växa',\r\n        reasonLabel: null,\r\n        category: null,\r\n        value: null,\r\n        order: 3,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: 'a8566d0f-0530-4bb8-96b0-534c3f6a4f2c',\r\n    name: 'Hur hög risk?',\r\n    text: 'Hur viktig är möjligheten till högre pension?',\r\n    description: '',\r\n    subTitle: 'Placeringsrådgivning',\r\n    shortDescription: '',\r\n    optionType: 1,\r\n    media: [],\r\n    answerAlternatives: [\r\n      {\r\n        id: 'cd6f3d73-1656-4395-834d-10d3d5f250b7',\r\n        text: 'Mycket viktig och jag är beredd på att spara med hög risk',\r\n        reasonLabel: null,\r\n        category: null,\r\n        value: null,\r\n        order: 1,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: '310da37d-c86f-4753-964b-77cf5dcc97da',\r\n        text: 'Viktigt men risken får inte vara för hög',\r\n        reasonLabel: null,\r\n        category: '',\r\n        value: '',\r\n        order: 2,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '98f8bbd3-3f2c-41e3-a2a0-502806108dd4',\r\n    name: 'Kortsiktig risk',\r\n    text: 'Tänk dig att du idag har ett pensionssparande som är värt 100 000 kronor. Är du bekväm med att ha hög risk i det sparandet?',\r\n    description: '',\r\n    subTitle: 'Placeringsrådgivning',\r\n    shortDescription: '',\r\n    optionType: 1,\r\n    media: [\r\n      {\r\n        id: '56798cd4-6dda-4416-9f78-3d30dbb789b0',\r\n        url: '/api/v1/media/56798cd4-6dda-4416-9f78-3d30dbb789b0/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\r\n        kind: 0,\r\n        mimeType: 'image/png',\r\n        name: 'main',\r\n        description:\r\n          'Här ser du hur det sparandet skulle kunna utvecklas på ett år med tre olika risknivåer. Den markerade raden visar det spann som tror att sparandet skulle hamna inom utifrån hur du har svarat hittills.',\r\n      },\r\n    ],\r\n    answerAlternatives: [\r\n      {\r\n        id: '98a2e0ce-e46b-43e1-8593-7d78a6e954a6',\r\n        text: 'Ja, jag är bekväm med den risknivån',\r\n        reasonLabel: null,\r\n        category: null,\r\n        value: null,\r\n        order: 1,\r\n        type: 1,\r\n        configuration: '{  \"Type\": 1}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: '2cf8ca43-aeee-4fa7-b3d3-1cd7e2e7a365',\r\n        text: 'Nej, jag vill ha en annan risknivå',\r\n        reasonLabel: null,\r\n        category: '',\r\n        value: null,\r\n        order: 2,\r\n        type: 1,\r\n        configuration:\r\n          '{  \"Type\": 1,  \"Control\": {    \"Title\": \"-\",    \"Text\": \"-\",    \"Deny\": \"Close\"}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: {\r\n          title: 'Ändra dina svar',\r\n          message:\r\n            'Om du vill spara med en annan risknivå behöver du gå tillbaka och se över dina svar.',\r\n          accept: null,\r\n          deny: 'Stäng',\r\n        },\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '8096e8ae-8eb8-4008-ba34-b97404043068',\r\n    name: 'Olika riskstrategier',\r\n    text: 'Tänk dig att du har 3 år kvar till hela din pension har betalats ut och ett pensionssparande på 100 000 kronor. Vilken strategi skulle du vara mest bekväm med för det här pensionssparandet?',\r\n    description:\r\n      '{\"Heading\": \"Läs mer om riskstrategierna\",\"Texts\": [{\"Subheading\": \"Vad är en riskstrategi?\",\"Content\": \"När du sparar med SEB Bot Advisor får du en personlig riskstrategi. Riskstrategin kan var vara låg, medellåg, medel, medelhög eller hög. Det är den här strategin som avgör hur hög risken i sparandet blir och hur snabbt risken sänks. Oavsett strategi är risken högre när du har lång tid kvar till sista utbetalningen från sparandet, men sänks gradvis ju äldre du blir. Vilken riskstrategi som vi tillämpar för ditt sparande beror bland annat på hur du svarar på de här frågorna.\",\"Image\": \"high-risk\"},{\"Subheading\": \"Så funkar prognoserna\",\"Content\": \"&lt;p&gt;När vi räknar på hur sparandet kan utvecklas över tid använder vi oss av avancerade beräkningsmodeller. I frågan utgår vi från ett påhittat sparande och visar ett pessimistiskt, ett optimistiskt och ett förväntat värde för tre olika riskstrategier efter ett visst antal år. Vid den tidpunkten tror vi att värdet på sparandet kommer att ligga nära det förväntade värdet, men&lt;/p&gt;&lt;ul&gt;&lt;li&gt;det är 30 procents sannolikt att sparandet utvecklas till det optimistiska värdet eller mer&lt;/li&gt;&lt;li&gt;det är mindre än 5 procents sannolikhet att sparandet utvecklas till det pessimistiska värdet eller mindre.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I exemplen räknar vi med att värdet på sparandet fortsätter att förändras under spartiden.Däremot räknar vi inte med framtida inbetalningar.&lt;/p&gt;\",\"Image\": null}]}',\r\n    subTitle: 'Placeringsrådgivning',\r\n    shortDescription: '',\r\n    optionType: 1,\r\n    media: [\r\n      {\r\n        id: '3164e266-039f-4ac1-8b87-31c2a29ba2e9',\r\n        url: '/api/v1/media/3164e266-039f-4ac1-8b87-31c2a29ba2e9/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\r\n        kind: 0,\r\n        mimeType: 'image/png',\r\n        name: 'main',\r\n        description:\r\n          'I tabellen ser du hur mycket du skulle kunna få utbetalt per månad med olika strategier.',\r\n      },\r\n      {\r\n        id: 'a6f876e3-000c-4c6b-8f19-af8e548f3439',\r\n        url: '/api/v1/media/a6f876e3-000c-4c6b-8f19-af8e548f3439/form/5a2118b7-90d5-4018-a9e5-f4bf0f490529',\r\n        kind: 0,\r\n        mimeType: 'image/png',\r\n        name: 'high-risk',\r\n        description: '',\r\n      },\r\n    ],\r\n    answerAlternatives: [\r\n      {\r\n        id: '810ef431-5a37-4adb-90a5-6f0e55b259ca',\r\n        text: 'Jag är bekväm med en strategi med hög risk',\r\n        reasonLabel: null,\r\n        category: 'RISK_WILLINGNESS',\r\n        value: '5',\r\n        order: 1,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: '3f4fd955-f855-41b7-8efd-8847ca54c8fd',\r\n        text: 'Jag är bekväm med en strategi med medelhög risk',\r\n        reasonLabel: null,\r\n        category: 'RISK_WILLINGNESS',\r\n        value: '4',\r\n        order: 2,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: 'f404a81a-ad83-47cb-aa36-922c3d7cae52',\r\n    name: 'Hållbart sparande',\r\n    text: 'Vill du pensionsspara med hållbart fokus?',\r\n    description: '',\r\n    subTitle: 'Placeringsrådgivning',\r\n    shortDescription:\r\n      'När vi väljer fonder till ditt sparande letar vi i första hand efter hållbara fonder. Om du dessutom har en hållbar profil prioriterar vi hållbarhet ännu mer. Hållbara fonder tar hänsyn till olika miljömässiga och sociala aspekter när de investerar i företag.',\r\n    optionType: 1,\r\n    media: [\r\n      {\r\n        id: 'c5f56e2e-e8f9-4944-83db-13913e4785fe',\r\n        url: 'https://seb-external.creo.se/i/ve6LxUx7pESgXjKOYyRtmg',\r\n        kind: 1,\r\n        mimeType: null,\r\n        name: null,\r\n        description: 'Så kan du påverka med ditt sparande (01:33)',\r\n      },\r\n    ],\r\n    answerAlternatives: [\r\n      {\r\n        id: 'd8be6bcc-1ef3-460c-b58d-b68f73ee5a95',\r\n        text: 'Ja, jag vill spara med hållbart fokus',\r\n        reasonLabel: '',\r\n        category: 'SUSTAINABILITY',\r\n        value: '1',\r\n        order: 1,\r\n        type: 1,\r\n        configuration: '{  \"Version\": \"1.0.0\",  \"Type\": 1,  \"Control\": {}}',\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n      {\r\n        id: '8b1870cd-2587-4549-8f79-88ba46e3cdd7',\r\n        text: 'Nej, jag vill inte spara med hållbart fokus',\r\n        reasonLabel: null,\r\n        category: 'SUSTAINABILITY',\r\n        value: '0',\r\n        order: 2,\r\n        type: 1,\r\n        media: [],\r\n        rules: [],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '001b2885-4960-4a64-835c-48ff20b3f3d7',\r\n    name: '',\r\n    text: 'Vi behöver veta mer om din ekonomi',\r\n    description:\r\n      'För att vi ska kunna ge råd som passar dig, behöver vi ställa några frågor om din ekonomi. Ju noggrannare du svarar, desto bättre råd kan du få. Det är viktigt att du svarar på alla frågor så att du inte får råd på felaktiga grunder.',\r\n    subTitle: '',\r\n    shortDescription: '',\r\n    optionType: 0,\r\n    media: [],\r\n    answerAlternatives: [],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '1b856337-9ba7-4186-a56d-a9c145fd851a',\r\n    name: 'Inkomst',\r\n    text: 'Hur stor är din månadsinkomst efter skatt?',\r\n    description: '',\r\n    subTitle: 'Din ekonomi',\r\n    shortDescription: '',\r\n    optionType: 2,\r\n    media: [],\r\n    answerAlternatives: [\r\n      {\r\n        id: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\r\n        text: 'Din lön eller pension efter skatt en genomsnittlig månad',\r\n        reasonLabel: 'Räkna även med bidrag och provision.',\r\n        category: 'MONTHLY_INCOME',\r\n        value: '',\r\n        order: 1,\r\n        type: 5,\r\n        configuration:\r\n          '{  \"InputType\": \"Number\",  \"IsRequired\": true,  \"Max\": 1000000000,  \"Min\": 1,  \"Version\": \"1.0.0\",  \"Type\": 2,  \"GroupLabel\": \"kr/mån\",  \"ErrorMessage\": \"Fyll i din månadsinkomst\"}',\r\n        media: [],\r\n        rules: [\r\n          {\r\n            ruleType: 0,\r\n            value: null,\r\n            message: 'Fyll i din månadsinkomst',\r\n          },\r\n          {\r\n            ruleType: 2,\r\n            value: '1',\r\n            message: 'Du behöver fylla i ett värde större än eller lika med',\r\n          },\r\n          {\r\n            ruleType: 3,\r\n            value: '1000000000',\r\n            message: 'Värdet kan inte vara över',\r\n          },\r\n        ],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '53532df5-586f-453b-a1a4-d409b6fd4a9b',\r\n    name: 'Kvar i månaden',\r\n    text: 'Hur mycket brukar du ha kvar efter att du har betalat alla viktiga utgifter?',\r\n    description:\r\n      'Räkna också med sådant som är viktigt för dig, till exempel restaurangbesök och sparande till resor.',\r\n    subTitle: 'Din ekonomi',\r\n    shortDescription: '',\r\n    optionType: 2,\r\n    media: [],\r\n    answerAlternatives: [\r\n      {\r\n        id: 'a6e8eabd-2f14-4b23-8a6d-8cb40b9f8a14',\r\n        text: 'Kvar i månaden',\r\n        reasonLabel: '',\r\n        category: 'MONTHLY_AMOUNT_LEFT',\r\n        value: null,\r\n        order: 1,\r\n        type: 5,\r\n        media: [],\r\n        rules: [\r\n          {\r\n            ruleType: 0,\r\n            value: null,\r\n            message: 'Fyll i hur mycket du brukar ha kvar i månaden',\r\n          },\r\n          {\r\n            ruleType: 9,\r\n            value: '3add5cc7-4099-4ec7-bf5b-12d7a3e09b26',\r\n            message: 'Värdet kan inte vara över',\r\n          },\r\n          {\r\n            ruleType: 2,\r\n            value: '1',\r\n            message: 'Du behöver fylla i ett värde större än eller lika med',\r\n          },\r\n          {\r\n            ruleType: 3,\r\n            value: '100000000',\r\n            message: 'Värdet kan inte vara över',\r\n          },\r\n        ],\r\n        confirm: null,\r\n        followupQuestions: [],\r\n      },\r\n    ],\r\n    groupQuestionItems: [],\r\n  },\r\n  {\r\n    id: '92e1f6fc-d838-4a6f-9da9-38435f9be5ba',\r\n    name: 'Tillgångar',\r\n    visibleInTable: false,\r\n    text: '&lt;p&gt;Lägg till skulder som du har hos eller utanför SEB.&lt;/p&gt;<br>',\r\n    description: '[]',\r\n    subTitle: 'Din ekonomi',\r\n    shortDescription: '',\r\n    optionType: 5,\r\n    media: [],\r\n    answerAlternatives: [],\r\n    groupQuestionItems: [\r\n      {\r\n        id: 'fb672a39-3c2d-4b66-88c9-4073f0f17399',\r\n        name: '',\r\n        visibleInTable: false,\r\n        text: 'Har du pengar på konton?',\r\n        description: '[]',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: 3,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: '087f742b-a641-4cfd-a452-befc1eac8c41',\r\n            text: 'Ja',\r\n            reasonLabel: null,\r\n            category: 'SAVING_AMOUNT',\r\n            value: null,\r\n            order: 1,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Pengar på konton\",\\n    \"Description\": \"Räkna även med pengar som du har på konton hos SEB. Om du har ett konto tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: '2c96f951-67de-4f43-9dd0-716bdfe189de',\r\n                name: 'Pengar på konton',\r\n                visibleInTable: false,\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: 2,\r\n                media: [],\r\n                answerAlternatives: [\r\n                  {\r\n                    id: '2150e645-7f56-4cfe-9296-f7ae04e3535e',\r\n                    text: 'Värde',\r\n                    reasonLabel: null,\r\n                    category: 'SAVING_AMOUNT',\r\n                    value: null,\r\n                    order: 1,\r\n                    type: 5,\r\n                    configuration:\r\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 1000000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\r\n                    media: [],\r\n                    rules: [\r\n                      {\r\n                        ruleType: 0,\r\n                        value: null,\r\n                        message: 'Fyll i hur mycket du har på konton',\r\n                      },\r\n                      {\r\n                        ruleType: 2,\r\n                        value: '1',\r\n                        message:\r\n                          'Du behöver fylla i ett värde större än eller lika med',\r\n                      },\r\n                      {\r\n                        ruleType: 3,\r\n                        value: '1000000000',\r\n                        message: 'Värdet kan inte vara över',\r\n                      },\r\n                    ],\r\n                    confirm: null,\r\n                    followupQuestions: [],\r\n                  },\r\n                ],\r\n                groupQuestionItems: [],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: 'eafff1c7-2aa8-4493-8efd-8148963902da',\r\n            text: 'Nej',\r\n            reasonLabel: null,\r\n            category: 'SAVING_AMOUNT',\r\n            value: null,\r\n            order: 2,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"\",\\n    \"Description\": \"\",\\n    \"Label\": \"\"\\n  },\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n      {\r\n        id: 'f8c4fde2-eb12-44cb-a893-a5a329f5f8c7',\r\n        name: '',\r\n        visibleInTable: false,\r\n        text: 'Äger du fonder eller värdepapper?',\r\n        description: '[]',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: 3,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: '312e28ec-dda8-46d2-b70a-e1e4364b5121',\r\n            text: 'Ja',\r\n            reasonLabel: null,\r\n            category: 'SAVING_AMOUNT',\r\n            value: null,\r\n            order: 1,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Fonder och värdepapper\",\\n    \"Description\": \"Räkna även med fonder och värdepapper som du har hos SEB. Räkna inte med fonder och värdepapper som är tänkta till pensionen. Om du har sparandet tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: 'a6c1aaeb-b690-4dc8-af4d-2d08d2cc3f94',\r\n                name: 'Fonder och värdepapper\\n',\r\n                visibleInTable: false,\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: 2,\r\n                media: [],\r\n                answerAlternatives: [\r\n                  {\r\n                    id: '9d5bbc90-19d9-40ad-868a-7f79a1de5d63',\r\n                    text: 'Värde',\r\n                    reasonLabel: null,\r\n                    category: 'SAVING_AMOUNT',\r\n                    value: null,\r\n                    order: 1,\r\n                    type: 5,\r\n                    configuration:\r\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 1000000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\r\n                    media: [],\r\n                    rules: [\r\n                      {\r\n                        ruleType: 0,\r\n                        value: null,\r\n                        message: 'Fyll i hur mycket du har på konton',\r\n                      },\r\n                      {\r\n                        ruleType: 3,\r\n                        value: '1000000000',\r\n                        message: 'Värdet kan inte vara över',\r\n                      },\r\n                      {\r\n                        ruleType: 2,\r\n                        value: '1',\r\n                        message:\r\n                          'Du behöver fylla i ett värde större än eller lika med',\r\n                      },\r\n                    ],\r\n                    confirm: null,\r\n                    followupQuestions: [],\r\n                  },\r\n                ],\r\n                groupQuestionItems: [],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: '1a832dea-c5ab-42bc-8129-2c00adff9b60',\r\n            text: 'Nej',\r\n            reasonLabel: null,\r\n            category: 'SAVING_AMOUNT',\r\n            value: null,\r\n            order: 2,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n      {\r\n        id: '5c1936ff-4ebb-448a-bd24-872d3169c623',\r\n        name: '',\r\n        visibleInTable: false,\r\n        text: 'Äger du någon fastighet?',\r\n        description: '[]',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: 3,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: '1024a005-e0ef-4611-bf2c-579fad7dc20f',\r\n            text: 'Ja',\r\n            reasonLabel: null,\r\n            category: 'HOME_VALUE',\r\n            value: null,\r\n            order: 1,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Hint\": \"(Bostadsrätt, villa, skog, etc.)\",\\n  \"Modal\": {\\n    \"Title\": \"Fastigheter\",\\n    \"Description\": \"Fyll i värdet på din bostadsrätt, villa, skog eller liknande. Fyll i det sammanlagda värdet om du har flera fastigheter. Om du äger en fastighet tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: 'e712d59b-e881-4449-ad20-52334aa3f35b',\r\n                name: 'Äger du någon fastighet?',\r\n                visibleInTable: false,\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: 2,\r\n                media: [],\r\n                answerAlternatives: [\r\n                  {\r\n                    id: '3ce2dc91-787b-4ab3-86d0-7b9c0bdd1c88',\r\n                    text: 'Värde',\r\n                    reasonLabel: null,\r\n                    category: 'HOME_VALUE',\r\n                    value: null,\r\n                    order: 1,\r\n                    type: 5,\r\n                    configuration:\r\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\r\n                    media: [],\r\n                    rules: [\r\n                      {\r\n                        ruleType: 0,\r\n                        value: null,\r\n                        message: 'Fyll i värdet på dina fastigheter',\r\n                      },\r\n                      {\r\n                        ruleType: 3,\r\n                        value: '100000000',\r\n                        message: 'Värdet kan inte vara över',\r\n                      },\r\n                      {\r\n                        ruleType: 2,\r\n                        value: '1',\r\n                        message:\r\n                          'Du behöver fylla i ett värde större än eller lika med',\r\n                      },\r\n                    ],\r\n                    confirm: null,\r\n                    followupQuestions: [],\r\n                  },\r\n                ],\r\n                groupQuestionItems: [],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: '3d1061ee-6f00-42cd-b6a6-3661d36c9e33',\r\n            text: 'Nej',\r\n            reasonLabel: null,\r\n            category: 'HOME_VALUE',\r\n            value: null,\r\n            order: 2,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i värdet på dina fastigheter\"\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n      {\r\n        id: 'f60f7eed-194d-48af-9707-5be418e73952',\r\n        name: '',\r\n        visibleInTable: false,\r\n        text: 'Äger du något företag?',\r\n        description: '[]',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: 3,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: 'b617407b-576d-43ab-8458-e3a3d13103df',\r\n            text: 'Ja',\r\n            reasonLabel: null,\r\n            category: 'ASSETS_VALUE',\r\n            value: null,\r\n            order: 1,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Företag\",\\n    \"Description\": \"Gör en försiktig uppskattning av värdet på ditt företag. Fyll i det sammanlagda värdet om du har flera företag. Om du äger ett företag tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: '8b41e306-b493-467d-bd66-8ee93660bd5d',\r\n                name: 'Äger du något företag?',\r\n                visibleInTable: false,\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: 2,\r\n                media: [],\r\n                answerAlternatives: [\r\n                  {\r\n                    id: '8cc40776-82ae-44d8-a213-c244b84e31c4',\r\n                    text: 'Värde',\r\n                    reasonLabel: null,\r\n                    category: 'ASSETS_VALUE',\r\n                    value: null,\r\n                    order: 1,\r\n                    type: 5,\r\n                    configuration:\r\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\r\n                    media: [],\r\n                    rules: [\r\n                      { ruleType: 2, value: '1', message: null },\r\n                      { ruleType: 3, value: '100000000', message: null },\r\n                      {\r\n                        ruleType: 0,\r\n                        value: null,\r\n                        message:\r\n                          'Fyll i hur mycket du brukar ha kvar i månaden',\r\n                      },\r\n                    ],\r\n                    confirm: null,\r\n                    followupQuestions: [],\r\n                  },\r\n                ],\r\n                groupQuestionItems: [],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: '82a6f7c9-90fd-47fc-abe5-9cb018912274',\r\n            text: 'Nej',\r\n            reasonLabel: null,\r\n            category: 'ASSETS_VALUE',\r\n            value: null,\r\n            order: 2,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i värdet på dina fastigheter\"\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n      {\r\n        id: '8492212e-e37c-4c9d-bdf4-c884cf3ad2b6',\r\n        name: '',\r\n        visibleInTable: false,\r\n        text: 'Har du andra tillgångar?',\r\n        description: '[]',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: 3,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: 'cbb8d3e4-22bd-4b0e-9703-3375e1ebb1a6',\r\n            text: 'Ja',\r\n            reasonLabel: null,\r\n            category: 'ASSETS_VALUE',\r\n            value: null,\r\n            order: 1,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {\\n    \"Title\": \"Andra tillgångar\",\\n    \"Description\": \"Om du har en tillgång tillsammans med någon fyller du i din del av värdet.\",\\n    \"Label\": \"Värde\"\\n  }\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: 'd328ecad-2756-4f3a-9040-26235994e51c',\r\n                name: 'Andra tillgångar',\r\n                visibleInTable: false,\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: 2,\r\n                media: [],\r\n                answerAlternatives: [\r\n                  {\r\n                    id: '097a6001-d895-42b1-92bb-4a991aaf6fc5',\r\n                    text: 'Värde',\r\n                    reasonLabel: null,\r\n                    category: 'ASSETS_VALUE',\r\n                    value: null,\r\n                    order: 1,\r\n                    type: 5,\r\n                    configuration:\r\n                      '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Max\": 100000000,\\n  \"Min\": 1,\\n  \"Type\": 5,\\n  \"GroupLabel\": \"kr\"\\n}',\r\n                    media: [],\r\n                    rules: [\r\n                      {\r\n                        ruleType: 0,\r\n                        value: null,\r\n                        message: 'Fyll i värdet på dina andra tillgångar',\r\n                      },\r\n                      {\r\n                        ruleType: 3,\r\n                        value: '100000000',\r\n                        message: 'Värdet kan inte vara över',\r\n                      },\r\n                      {\r\n                        ruleType: 2,\r\n                        value: '1',\r\n                        message:\r\n                          'Du behöver fylla i ett värde större än eller lika med',\r\n                      },\r\n                    ],\r\n                    confirm: null,\r\n                    followupQuestions: [],\r\n                  },\r\n                ],\r\n                groupQuestionItems: [],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: 'b69ba899-df22-42b4-a74a-4601afa75ffa',\r\n            text: 'Nej',\r\n            reasonLabel: null,\r\n            category: 'ASSETS_VALUE',\r\n            value: null,\r\n            order: 2,\r\n            type: 3,\r\n            configuration:\r\n              '{\\n  \"Type\": 3,\\n  \"Modal\": {},\\n  \"ErrorMessage\": \"Fyll i hur mycket du har på konton\"\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n      {\r\n        id: '3ad4a393-09ad-4eae-b910-c3ce84935b00',\r\n        name: null,\r\n        text: 'Are you on mediciation',\r\n        description: 'Are you sick',\r\n        subTitle: '',\r\n        shortDescription: '',\r\n        optionType: QuestionOptionType.Radio,\r\n        media: [],\r\n        answerAlternatives: [\r\n          {\r\n            id: '18edeccd-f19b-437d-aa76-4e1e37da72f0',\r\n            text: 'yes',\r\n            reasonLabel: null,\r\n            category: null,\r\n            value: null,\r\n            order: 1,\r\n            type: ComponentType.RadioTextBox,\r\n            configuration:\r\n              '{\"Modal\":{\"Title\": \"What Medicine you take\", \"Description\": \"please tell us what medicine you take and how much does it cost\"}}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [\r\n              {\r\n                id: 'bd620ae8-ccf1-46c4-842d-ef3bd26491e7',\r\n                name: 'Medicine Table',\r\n                text: '&nbsp;',\r\n                description: '[]',\r\n                subTitle: '',\r\n                shortDescription: '',\r\n                optionType: QuestionOptionType.Table,\r\n                media: [],\r\n                answerAlternatives: [],\r\n                groupQuestionItems: [\r\n                  {\r\n                    id: '8d8e60ed-ddc0-4864-a302-4c7e01239d03',\r\n                    name: 'Medicine Name',\r\n                    text: '&nbsp;',\r\n                    description: '[]',\r\n                    subTitle: '',\r\n                    shortDescription: '',\r\n                    optionType: QuestionOptionType.Input,\r\n                    media: [],\r\n                    answerAlternatives: [\r\n                      {\r\n                        id: '21be4801-e7bf-4b83-a66c-c84a4e770449',\r\n                        text: 'Medicine Name',\r\n                        reasonLabel: null,\r\n                        category: null,\r\n                        value: null,\r\n                        order: 1,\r\n                        type: ComponentType.Text,\r\n                        configuration:\r\n                          '{\\n  \"InputType\": \"Text\",\\n  \"IsRequired\": true,\\n  \"Type\": 2\\n}',\r\n                        media: [],\r\n                        rules: [\r\n                          {\r\n                            ruleType: RuleType.required,\r\n                            value: null,\r\n                            message: 'medicine name is required',\r\n                          },\r\n                        ],\r\n                        confirm: null,\r\n                        followupQuestions: [],\r\n                      },\r\n                    ],\r\n                    groupQuestionItems: [],\r\n                  },\r\n                  {\r\n                    id: 'd03c8d5e-ba30-41a6-b836-0f7d3f69f002',\r\n                    name: 'Medicine Brand',\r\n                    text: '&nbsp;',\r\n                    description: '[]',\r\n                    subTitle: '',\r\n                    shortDescription: '',\r\n                    optionType: QuestionOptionType.Input,\r\n                    media: [],\r\n                    answerAlternatives: [\r\n                      {\r\n                        id: '39779d7e-9d05-4c3b-8683-a1096081aa1a',\r\n                        text: 'Medicine Brand',\r\n                        reasonLabel: null,\r\n                        category: null,\r\n                        value: null,\r\n                        order: 1,\r\n                        type: ComponentType.Text,\r\n                        configuration:\r\n                          '{\\n  \"InputType\": \"Text\",\\n  \"IsRequired\": true,\\n  \"Type\": 2\\n}',\r\n                        media: [],\r\n                        rules: [\r\n                          {\r\n                            ruleType: RuleType.required,\r\n                            value: null,\r\n                            message: 'medicine brand is required',\r\n                          },\r\n                        ],\r\n                        confirm: null,\r\n                        followupQuestions: [],\r\n                      },\r\n                    ],\r\n                    groupQuestionItems: [],\r\n                  },\r\n                  {\r\n                    id: 'ec613a5b-8678-47d2-a68e-c94f56378cf6',\r\n                    name: 'Medicine Price',\r\n                    text: '&nbsp;',\r\n                    description: '[]',\r\n                    subTitle: '',\r\n                    shortDescription: '',\r\n                    optionType: QuestionOptionType.Input,\r\n                    media: [],\r\n                    answerAlternatives: [\r\n                      {\r\n                        id: '81526ffe-bad8-47e3-b87e-096885131fe2',\r\n                        text: 'Medicine Price',\r\n                        reasonLabel: null,\r\n                        category: null,\r\n                        value: null,\r\n                        order: 1,\r\n                        type: ComponentType.Number,\r\n                        configuration:\r\n                          '{\\n  \"InputType\": \"Number\",\\n  \"IsRequired\": true,\\n  \"Type\": 5\\n}',\r\n                        media: [],\r\n                        rules: [\r\n                          {\r\n                            ruleType: RuleType.required,\r\n                            value: null,\r\n                            message: 'medicine price is required',\r\n                          },\r\n                        ],\r\n                        confirm: null,\r\n                        followupQuestions: [],\r\n                      },\r\n                    ],\r\n                    groupQuestionItems: [],\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            id: '7999d0b1-d4a4-4bb3-97c4-624b1122c818',\r\n            text: 'no',\r\n            reasonLabel: null,\r\n            category: null,\r\n            value: null,\r\n            order: 2,\r\n            type: ComponentType.RadioTextBox,\r\n            configuration: '{\\n  \"Type\": 3,\\n  \"Modal\": {}\\n}',\r\n            media: [],\r\n            rules: [],\r\n            confirm: null,\r\n            followupQuestions: [],\r\n          },\r\n        ],\r\n        groupQuestionItems: [],\r\n      },\r\n    ],\r\n  },\r\n]"
                },
                {
                    "name": "AcquisitionForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ComplexForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "familyFollowup",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FollowUpItem",
                    "defaultValue": "{\r\n  type: 'inline',\r\n  items: [\r\n    {\r\n      key: 'partner-birth-date',\r\n      controlType: 'Datepicker',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'Dina partners födelsedatum:',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-name',\r\n      controlType: 'Text',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'Din partners för-och efternamn:',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income',\r\n      controlType: 'Number',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'Din partners månadsinkomst:',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income-more-than-equal',\r\n      controlType: 'Number',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'partner-monthly-income-more-than-equal',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n        {\r\n          message: 'more than or equal partner monthly income',\r\n          type: RuleType.minThanEqualsReference,\r\n          value: 'partner-monthly-income',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income-more-than',\r\n      controlType: 'Number',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'partner-monthly-income-more-than',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n        {\r\n          message: 'more than partner monthly income',\r\n          type: RuleType.minThanReference,\r\n          value: 'partner-monthly-income',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income-less-than',\r\n      controlType: 'Number',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'partner-monthly-income-less-than',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n        {\r\n          message: 'less than partner monthly income',\r\n          type: RuleType.maxThanReference,\r\n          value: 'partner-monthly-income',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income-less-than-equal',\r\n      controlType: 'Number',\r\n      value: '',\r\n      controlMetaData: {\r\n        label: 'partner-monthly-income-less-than-equal',\r\n      },\r\n      rules: [\r\n        {\r\n          message: 'field is required',\r\n          type: RuleType.required,\r\n        },\r\n        {\r\n          message: 'less than equal partner monthly income',\r\n          type: RuleType.maxThanEqualReference,\r\n          value: 'partner-monthly-income',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'partner-monthly-income-radio',\r\n      controlType: 'Radio',\r\n      label: '',\r\n      options: [\r\n        {\r\n          id: '1',\r\n          value: '1',\r\n          label: 'Före skatt',\r\n        },\r\n        {\r\n          id: '2',\r\n          value: '2',\r\n          label: 'Efter skatt',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      key: 'then-maried',\r\n      controlType: 'Text',\r\n      label: 'Gift sedan',\r\n    },\r\n  ],\r\n}"
                },
                {
                    "name": "FormValidation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "getButtonAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(label: string) => ({\r\n  hasAction: false,\r\n  label,\r\n})"
                },
                {
                    "name": "InlineConditionalRendering",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "InlineMultipleRecords",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ModalConditionalRendering",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MultipleRecords",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MultiStepForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Demo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DemoComponent>",
                    "defaultValue": "(args: DemoComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormItem.ts": [
                {
                    "name": "attributeTypeMapDynamicFormItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\r\n  { name: 'key', type: 'string' },\r\n  { name: 'value', type: 'object' },\r\n  { name: 'label', type: 'string' },\r\n  { name: 'description', type: 'string' },\r\n  { name: 'className', type: 'string' },\r\n  { name: 'required', type: 'boolean' },\r\n  { name: 'multi', type: 'boolean' },\r\n  { name: 'min', type: 'object' },\r\n  { name: 'max', type: 'object' },\r\n  { name: 'order', type: 'number' },\r\n  { name: 'placeholder', type: 'string' },\r\n  { name: 'options', type: 'Array<DynamicFormOption>' },\r\n  { name: 'rulerKey', type: 'string' },\r\n  { name: 'condition', type: 'object' },\r\n  { name: 'controlType', type: 'DynamicFormType' },\r\n  { name: 'controlMetaData', type: 'object' },\r\n]"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormOption.ts": [
                {
                    "name": "attributeTypeMapDynamicFormOption",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\n  { name: 'value', type: 'object' },\n  { name: 'label', type: 'string' },\n  { name: 'disabled', type: 'boolean' },\n]"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts": [
                {
                    "name": "attributeTypeMapDynamicFormResponseItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\r\n  { name: 'key', type: 'string' },\r\n  { name: 'value', type: 'object' },\r\n  { name: 'sectionId', type: 'string' },\r\n  { name: 'sectionIndex', type: 'number' },\r\n  { name: 'formItem', type: 'DynamicFormItem' },\r\n]"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormSection.ts": [
                {
                    "name": "attributeTypeMapDynamicFormSection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AttributeTypeMap[]",
                    "defaultValue": "[\n  { name: 'title', type: 'string' },\n  { name: 'category', type: 'string' },\n  { name: 'description', type: 'string' },\n  { name: 'className', type: 'string' },\n  { name: 'key', type: 'string' },\n  { name: 'order', type: 'number' },\n  { name: 'multi', type: 'boolean' },\n  { name: 'sectionType', type: 'any' },\n  { name: 'items', type: 'Array<DynamicFormItem>' },\n]"
                }
            ],
            "projects/dynamic-form/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormType.ts": [
                {
                    "name": "DynamicFormType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  Text: 'Text' as DynamicFormType,\r\n  TextArea: 'TextArea' as DynamicFormType,\r\n  Checkbox: 'Checkbox' as DynamicFormType,\r\n  Dropdown: 'Dropdown' as DynamicFormType,\r\n  Datepicker: 'Datepicker' as DynamicFormType,\r\n  Radio: 'Radio' as DynamicFormType,\r\n  Number: 'Number' as DynamicFormType,\r\n  Card: 'Card' as DynamicFormType,\r\n  ToggleSelector: 'ToggleSelector' as DynamicFormType,\r\n  Disclaimer: 'Disclaimer' as DynamicFormType,\r\n  None: 'None' as DynamicFormType,\r\n}"
                }
            ],
            "stories/map.ts": [
                {
                    "name": "mapControlType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(controlType: ComponentType): DynamicFormType => {\r\n  switch (controlType) {\r\n    case ComponentType.Text:\r\n      return DynamicFormType.Text;\r\n    case ComponentType.Number:\r\n      return DynamicFormType.Number;\r\n    case ComponentType.CheckBox:\r\n      return DynamicFormType.Checkbox;\r\n    case ComponentType.Date:\r\n      return DynamicFormType.Datepicker;\r\n    case ComponentType.RadioTextBox:\r\n      return DynamicFormType.Radio;\r\n    case ComponentType.Card:\r\n      return DynamicFormType.Card;\r\n    case ComponentType.None:\r\n      return DynamicFormType.None;\r\n    default:\r\n      return DynamicFormType.Text;\r\n  }\r\n}"
                },
                {
                    "name": "mapRules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(rules): Rule[] => {\r\n  return rules.map((rule) => {\r\n    switch (rule.ruleType) {\r\n      case 0:\r\n      default:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.required,\r\n        };\r\n      case 1:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.pattern,\r\n        };\r\n      case 2:\r\n        return { value: rule.value, message: rule.message, type: RuleType.min };\r\n      case 3:\r\n        return { value: rule.value, message: rule.message, type: RuleType.max };\r\n      case 4:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.minLength,\r\n        };\r\n      case 5:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.maxLength,\r\n        };\r\n      case 6:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.minThanReference,\r\n        };\r\n      case 7:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.minThanEqualsReference,\r\n        };\r\n      case 8:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.maxThanReference,\r\n        };\r\n      case 9:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.maxThanEqualReference,\r\n        };\r\n      case 10:\r\n        return {\r\n          value: rule.value,\r\n          message: rule.message,\r\n          type: RuleType.confirm,\r\n        };\r\n    }\r\n  });\r\n}"
                },
                {
                    "name": "parseConfiguration",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/map.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(configuration: string): { [key: string]: any } => {\r\n  let parsedConfig: { [key: string]: any } = {};\r\n  if (configuration) {\r\n    try {\r\n      parsedConfig = JSON.parse(configuration);\r\n    } catch (e) {}\r\n  }\r\n  return parsedConfig;\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "stories/map.ts": [
                {
                    "name": "mapToDynamicForm",
                    "file": "stories/map.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "arr",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "DynamicFormSection[]",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "stories/map.ts": [
                {
                    "name": "ComponentType",
                    "childs": [
                        {
                            "name": "None",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Text",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "RadioTextBox",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CheckBox",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "stories/map.ts"
                },
                {
                    "name": "QuestionOptionType",
                    "childs": [
                        {
                            "name": "None",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Card",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Input",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Radio",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "CheckBox",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Group",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Table",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "stories/map.ts"
                }
            ],
            "projects/dynamic-form/src/lib/model/dynamicFormItem.ts": [
                {
                    "name": "MediaKind",
                    "childs": [
                        {
                            "name": "Image",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "Video",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
                },
                {
                    "name": "RuleType",
                    "childs": [
                        {
                            "name": "required",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minLength",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxLength",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pattern",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minThanReference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minThanEqualsReference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxThanReference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "maxThanEqualReference",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "confirm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/dynamic-form/src/lib/model/dynamicFormType.ts": [
                {
                    "name": "DynamicFormType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"Text\" | \"TextArea\" | \"Checkbox\" | \"Dropdown\" | \"Datepicker\" | \"Radio\" | \"Number\" | \"Card\" | \"ToggleSelector\" | \"Disclaimer\" | \"None\"",
                    "file": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts": [
                {
                    "name": "ExtendedFormGroupControl",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ExtendedFormControl | ExtendedFormArray | ExtendedFormGroup | ExtendedFormGroupArray",
                    "file": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/dynamic-form/src/lib/digit-only/digit-only.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DigitOnlyDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form-confirmation/dynamic-form-confirmation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormConfirmationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form-item/dynamic-form-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form-media/dynamic-form-media.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormMediaComponent",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form-modal/dynamic-form-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormComponent",
                "coveragePercent": 9,
                "coverageCount": "5/54",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-form.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDynamicFormValidationError",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/dynamic-from-data/dynamic-form-data.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DynamicFormDataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/i-form-action.enum.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-array.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormArray",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-control.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group-array.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormGroupArray",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExtendedFormGroup",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/custom-classes/extended-form-group.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExtendedFormGroupControls",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormItem",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "formItemValidation",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Media",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Rule",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormItem.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmInformation",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormOption",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FollowUpItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormOption.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormResponseItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormResponseItem.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormResponseItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DynamicFormSection",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormSection.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "attributeTypeMapDynamicFormSection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/dynamicFormType.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DynamicFormType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/model/models.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AttributeTypeMap",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/object-keys.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ObjectKeysPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/lib/safe.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/dynamic-form/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "acqFormData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AcquisitionForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ComplexForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "familyFollowup",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormValidation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getButtonAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InlineConditionalRendering",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InlineMultipleRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ModalConditionalRendering",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleRecords",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiStepForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Demo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/demo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DemoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "mapToDynamicForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapControlType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mapRules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/map.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "parseConfiguration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}